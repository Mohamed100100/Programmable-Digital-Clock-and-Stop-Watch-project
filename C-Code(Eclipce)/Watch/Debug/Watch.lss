
Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00006d9e  00006e32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080017a  0080017a  00006f4c  2**0
                  ALLOC
  3 .stab         00004140  00000000  00000000  00006f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001033  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  0000c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000275  00000000  00000000  0000c2df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003510  00000000  00000000  0000c554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001823  00000000  00000000  0000fa64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000179c  00000000  00000000  00011287  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00012a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003b7  00000000  00000000  00012c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002420  00000000  00000000  0001301b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001543b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <__vector_10>
      2c:	0c 94 be 2b 	jmp	0x577c	; 0x577c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fd e6       	ldi	r31, 0x6D	; 109
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 18 2c 	call	0x5830	; 0x5830 <main>
      8a:	0c 94 cd 36 	jmp	0x6d9a	; 0x6d9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 82 11 	call	0x2304	; 0x2304 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__subsf3>
      be:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixunssfdi>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 96 36 	jmp	0x6d2c	; 0x6d2c <__prologue_saves__>
      f6:	7b 01       	movw	r14, r22
      f8:	8c 01       	movw	r16, r24
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	40 e8       	ldi	r20, 0x80	; 128
     100:	5f e3       	ldi	r21, 0x3F	; 63
     102:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
     106:	88 23       	and	r24, r24
     108:	4c f4       	brge	.+18     	; 0x11c <__fixunssfdi+0x32>
     10a:	aa 24       	eor	r10, r10
     10c:	bb 24       	eor	r11, r11
     10e:	cc 24       	eor	r12, r12
     110:	dd 24       	eor	r13, r13
     112:	ee 24       	eor	r14, r14
     114:	ff 24       	eor	r15, r15
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	86 c0       	rjmp	.+268    	; 0x228 <__fixunssfdi+0x13e>
     11c:	c8 01       	movw	r24, r16
     11e:	b7 01       	movw	r22, r14
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e8       	ldi	r20, 0x80	; 128
     126:	5f e4       	ldi	r21, 0x4F	; 79
     128:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
     12c:	88 23       	and	r24, r24
     12e:	54 f4       	brge	.+20     	; 0x144 <__fixunssfdi+0x5a>
     130:	c8 01       	movw	r24, r16
     132:	b7 01       	movw	r22, r14
     134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     138:	5b 01       	movw	r10, r22
     13a:	6c 01       	movw	r12, r24
     13c:	ee 24       	eor	r14, r14
     13e:	ff 24       	eor	r15, r15
     140:	87 01       	movw	r16, r14
     142:	72 c0       	rjmp	.+228    	; 0x228 <__fixunssfdi+0x13e>
     144:	c8 01       	movw	r24, r16
     146:	b7 01       	movw	r22, r14
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e8       	ldi	r20, 0x80	; 128
     14e:	5f e5       	ldi	r21, 0x5F	; 95
     150:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
     154:	87 fd       	sbrc	r24, 7
     156:	0f c0       	rjmp	.+30     	; 0x176 <__fixunssfdi+0x8c>
     158:	aa 24       	eor	r10, r10
     15a:	aa 94       	dec	r10
     15c:	bb 24       	eor	r11, r11
     15e:	ba 94       	dec	r11
     160:	cc 24       	eor	r12, r12
     162:	ca 94       	dec	r12
     164:	dd 24       	eor	r13, r13
     166:	da 94       	dec	r13
     168:	ee 24       	eor	r14, r14
     16a:	ea 94       	dec	r14
     16c:	ff 24       	eor	r15, r15
     16e:	fa 94       	dec	r15
     170:	0f ef       	ldi	r16, 0xFF	; 255
     172:	1f ef       	ldi	r17, 0xFF	; 255
     174:	59 c0       	rjmp	.+178    	; 0x228 <__fixunssfdi+0x13e>
     176:	c8 01       	movw	r24, r16
     178:	b7 01       	movw	r22, r14
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 e8       	ldi	r20, 0x80	; 128
     180:	5f e2       	ldi	r21, 0x2F	; 47
     182:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
     186:	7b 01       	movw	r14, r22
     188:	8c 01       	movw	r16, r24
     18a:	22 24       	eor	r2, r2
     18c:	33 24       	eor	r3, r3
     18e:	21 01       	movw	r4, r2
     190:	90 e1       	ldi	r25, 0x10	; 16
     192:	a9 2e       	mov	r10, r25
     194:	b1 2c       	mov	r11, r1
     196:	c1 2c       	mov	r12, r1
     198:	d1 2c       	mov	r13, r1
     19a:	c0 e0       	ldi	r28, 0x00	; 0
     19c:	d0 e0       	ldi	r29, 0x00	; 0
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0a 2c       	mov	r0, r10
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__fixunssfdi+0xc8>
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	88 1f       	adc	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	0a 94       	dec	r0
     1b4:	d2 f7       	brpl	.-12     	; 0x1aa <__fixunssfdi+0xc0>
     1b6:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
     1ba:	3b 01       	movw	r6, r22
     1bc:	4c 01       	movw	r8, r24
     1be:	c8 01       	movw	r24, r16
     1c0:	b7 01       	movw	r22, r14
     1c2:	a4 01       	movw	r20, r8
     1c4:	93 01       	movw	r18, r6
     1c6:	0e 94 82 11 	call	0x2304	; 0x2304 <__gesf2>
     1ca:	88 23       	and	r24, r24
     1cc:	64 f0       	brlt	.+24     	; 0x1e6 <__fixunssfdi+0xfc>
     1ce:	2a 28       	or	r2, r10
     1d0:	3b 28       	or	r3, r11
     1d2:	4c 28       	or	r4, r12
     1d4:	5d 28       	or	r5, r13
     1d6:	c8 01       	movw	r24, r16
     1d8:	b7 01       	movw	r22, r14
     1da:	a4 01       	movw	r20, r8
     1dc:	93 01       	movw	r18, r6
     1de:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
     1e2:	7b 01       	movw	r14, r22
     1e4:	8c 01       	movw	r16, r24
     1e6:	d6 94       	lsr	r13
     1e8:	c7 94       	ror	r12
     1ea:	b7 94       	ror	r11
     1ec:	a7 94       	ror	r10
     1ee:	21 96       	adiw	r28, 0x01	; 1
     1f0:	c5 30       	cpi	r28, 0x05	; 5
     1f2:	d1 05       	cpc	r29, r1
     1f4:	a1 f6       	brne	.-88     	; 0x19e <__fixunssfdi+0xb4>
     1f6:	c8 01       	movw	r24, r16
     1f8:	b7 01       	movw	r22, r14
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e8       	ldi	r20, 0x80	; 128
     200:	5f e4       	ldi	r21, 0x4F	; 79
     202:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
     206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     20a:	5b 01       	movw	r10, r22
     20c:	6c 01       	movw	r12, r24
     20e:	9b 01       	movw	r18, r22
     210:	a6 01       	movw	r20, r12
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 2d       	mov	r16, r2
     21c:	0e 94 af 12 	call	0x255e	; 0x255e <__ashldi3>
     220:	59 01       	movw	r10, r18
     222:	6a 01       	movw	r12, r20
     224:	7b 01       	movw	r14, r22
     226:	8c 01       	movw	r16, r24
     228:	95 01       	movw	r18, r10
     22a:	a6 01       	movw	r20, r12
     22c:	b7 01       	movw	r22, r14
     22e:	c8 01       	movw	r24, r16
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	e2 e1       	ldi	r30, 0x12	; 18
     236:	0c 94 b2 36 	jmp	0x6d64	; 0x6d64 <__epilogue_restores__>

0000023a <__udivdi3>:
     23a:	ae e5       	ldi	r26, 0x5E	; 94
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	e3 e2       	ldi	r30, 0x23	; 35
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	0c 94 96 36 	jmp	0x6d2c	; 0x6d2c <__prologue_saves__>
     246:	a8 e0       	ldi	r26, 0x08	; 8
     248:	4e 01       	movw	r8, r28
     24a:	08 94       	sec
     24c:	81 1c       	adc	r8, r1
     24e:	91 1c       	adc	r9, r1
     250:	f4 01       	movw	r30, r8
     252:	6a 2e       	mov	r6, r26
     254:	11 92       	st	Z+, r1
     256:	6a 94       	dec	r6
     258:	e9 f7       	brne	.-6      	; 0x254 <__udivdi3+0x1a>
     25a:	29 83       	std	Y+1, r18	; 0x01
     25c:	3a 83       	std	Y+2, r19	; 0x02
     25e:	4b 83       	std	Y+3, r20	; 0x03
     260:	5c 83       	std	Y+4, r21	; 0x04
     262:	6d 83       	std	Y+5, r22	; 0x05
     264:	7e 83       	std	Y+6, r23	; 0x06
     266:	8f 83       	std	Y+7, r24	; 0x07
     268:	98 87       	std	Y+8, r25	; 0x08
     26a:	ce 01       	movw	r24, r28
     26c:	09 96       	adiw	r24, 0x09	; 9
     26e:	fc 01       	movw	r30, r24
     270:	11 92       	st	Z+, r1
     272:	aa 95       	dec	r26
     274:	e9 f7       	brne	.-6      	; 0x270 <__udivdi3+0x36>
     276:	a9 86       	std	Y+9, r10	; 0x09
     278:	ba 86       	std	Y+10, r11	; 0x0a
     27a:	cb 86       	std	Y+11, r12	; 0x0b
     27c:	dc 86       	std	Y+12, r13	; 0x0c
     27e:	ed 86       	std	Y+13, r14	; 0x0d
     280:	fe 86       	std	Y+14, r15	; 0x0e
     282:	0f 87       	std	Y+15, r16	; 0x0f
     284:	18 8b       	std	Y+16, r17	; 0x10
     286:	29 84       	ldd	r2, Y+9	; 0x09
     288:	3a 84       	ldd	r3, Y+10	; 0x0a
     28a:	4b 84       	ldd	r4, Y+11	; 0x0b
     28c:	5c 84       	ldd	r5, Y+12	; 0x0c
     28e:	ed 84       	ldd	r14, Y+13	; 0x0d
     290:	fe 84       	ldd	r15, Y+14	; 0x0e
     292:	0f 85       	ldd	r16, Y+15	; 0x0f
     294:	18 89       	ldd	r17, Y+16	; 0x10
     296:	69 80       	ldd	r6, Y+1	; 0x01
     298:	7a 80       	ldd	r7, Y+2	; 0x02
     29a:	8b 80       	ldd	r8, Y+3	; 0x03
     29c:	9c 80       	ldd	r9, Y+4	; 0x04
     29e:	6d a6       	std	Y+45, r6	; 0x2d
     2a0:	7e a6       	std	Y+46, r7	; 0x2e
     2a2:	8f a6       	std	Y+47, r8	; 0x2f
     2a4:	98 aa       	std	Y+48, r9	; 0x30
     2a6:	6d 80       	ldd	r6, Y+5	; 0x05
     2a8:	7e 80       	ldd	r7, Y+6	; 0x06
     2aa:	8f 80       	ldd	r8, Y+7	; 0x07
     2ac:	98 84       	ldd	r9, Y+8	; 0x08
     2ae:	e1 14       	cp	r14, r1
     2b0:	f1 04       	cpc	r15, r1
     2b2:	01 05       	cpc	r16, r1
     2b4:	11 05       	cpc	r17, r1
     2b6:	09 f0       	breq	.+2      	; 0x2ba <__udivdi3+0x80>
     2b8:	b3 c3       	rjmp	.+1894   	; 0xa20 <__stack+0x5c1>
     2ba:	62 14       	cp	r6, r2
     2bc:	73 04       	cpc	r7, r3
     2be:	84 04       	cpc	r8, r4
     2c0:	95 04       	cpc	r9, r5
     2c2:	08 f0       	brcs	.+2      	; 0x2c6 <__udivdi3+0x8c>
     2c4:	3d c1       	rjmp	.+634    	; 0x540 <__stack+0xe1>
     2c6:	00 e0       	ldi	r16, 0x00	; 0
     2c8:	20 16       	cp	r2, r16
     2ca:	00 e0       	ldi	r16, 0x00	; 0
     2cc:	30 06       	cpc	r3, r16
     2ce:	01 e0       	ldi	r16, 0x01	; 1
     2d0:	40 06       	cpc	r4, r16
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	50 06       	cpc	r5, r16
     2d6:	88 f4       	brcc	.+34     	; 0x2fa <__udivdi3+0xc0>
     2d8:	1f ef       	ldi	r17, 0xFF	; 255
     2da:	21 16       	cp	r2, r17
     2dc:	31 04       	cpc	r3, r1
     2de:	41 04       	cpc	r4, r1
     2e0:	51 04       	cpc	r5, r1
     2e2:	39 f0       	breq	.+14     	; 0x2f2 <__udivdi3+0xb8>
     2e4:	30 f0       	brcs	.+12     	; 0x2f2 <__udivdi3+0xb8>
     2e6:	48 e0       	ldi	r20, 0x08	; 8
     2e8:	e4 2e       	mov	r14, r20
     2ea:	f1 2c       	mov	r15, r1
     2ec:	01 2d       	mov	r16, r1
     2ee:	11 2d       	mov	r17, r1
     2f0:	18 c0       	rjmp	.+48     	; 0x322 <__udivdi3+0xe8>
     2f2:	ee 24       	eor	r14, r14
     2f4:	ff 24       	eor	r15, r15
     2f6:	87 01       	movw	r16, r14
     2f8:	14 c0       	rjmp	.+40     	; 0x322 <__udivdi3+0xe8>
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	22 16       	cp	r2, r18
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	32 06       	cpc	r3, r18
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	42 06       	cpc	r4, r18
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	52 06       	cpc	r5, r18
     30a:	30 f0       	brcs	.+12     	; 0x318 <__udivdi3+0xde>
     30c:	38 e1       	ldi	r19, 0x18	; 24
     30e:	e3 2e       	mov	r14, r19
     310:	f1 2c       	mov	r15, r1
     312:	01 2d       	mov	r16, r1
     314:	11 2d       	mov	r17, r1
     316:	05 c0       	rjmp	.+10     	; 0x322 <__udivdi3+0xe8>
     318:	20 e1       	ldi	r18, 0x10	; 16
     31a:	e2 2e       	mov	r14, r18
     31c:	f1 2c       	mov	r15, r1
     31e:	01 2d       	mov	r16, r1
     320:	11 2d       	mov	r17, r1
     322:	d2 01       	movw	r26, r4
     324:	c1 01       	movw	r24, r2
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0xf8>
     32a:	b6 95       	lsr	r27
     32c:	a7 95       	ror	r26
     32e:	97 95       	ror	r25
     330:	87 95       	ror	r24
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0xf0>
     336:	8a 58       	subi	r24, 0x8A	; 138
     338:	9f 4f       	sbci	r25, 0xFF	; 255
     33a:	dc 01       	movw	r26, r24
     33c:	2c 91       	ld	r18, X
     33e:	80 e2       	ldi	r24, 0x20	; 32
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	8e 19       	sub	r24, r14
     348:	9f 09       	sbc	r25, r15
     34a:	a0 0b       	sbc	r26, r16
     34c:	b1 0b       	sbc	r27, r17
     34e:	7c 01       	movw	r14, r24
     350:	8d 01       	movw	r16, r26
     352:	e2 1a       	sub	r14, r18
     354:	f1 08       	sbc	r15, r1
     356:	01 09       	sbc	r16, r1
     358:	11 09       	sbc	r17, r1
     35a:	e1 14       	cp	r14, r1
     35c:	f1 04       	cpc	r15, r1
     35e:	01 05       	cpc	r16, r1
     360:	11 05       	cpc	r17, r1
     362:	a1 f1       	breq	.+104    	; 0x3cc <__udivdi3+0x192>
     364:	0e 2c       	mov	r0, r14
     366:	04 c0       	rjmp	.+8      	; 0x370 <__udivdi3+0x136>
     368:	22 0c       	add	r2, r2
     36a:	33 1c       	adc	r3, r3
     36c:	44 1c       	adc	r4, r4
     36e:	55 1c       	adc	r5, r5
     370:	0a 94       	dec	r0
     372:	d2 f7       	brpl	.-12     	; 0x368 <__udivdi3+0x12e>
     374:	a4 01       	movw	r20, r8
     376:	93 01       	movw	r18, r6
     378:	0e 2c       	mov	r0, r14
     37a:	04 c0       	rjmp	.+8      	; 0x384 <__udivdi3+0x14a>
     37c:	22 0f       	add	r18, r18
     37e:	33 1f       	adc	r19, r19
     380:	44 1f       	adc	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	0a 94       	dec	r0
     386:	d2 f7       	brpl	.-12     	; 0x37c <__udivdi3+0x142>
     388:	80 e2       	ldi	r24, 0x20	; 32
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	8e 19       	sub	r24, r14
     38e:	9f 09       	sbc	r25, r15
     390:	6d a4       	ldd	r6, Y+45	; 0x2d
     392:	7e a4       	ldd	r7, Y+46	; 0x2e
     394:	8f a4       	ldd	r8, Y+47	; 0x2f
     396:	98 a8       	ldd	r9, Y+48	; 0x30
     398:	04 c0       	rjmp	.+8      	; 0x3a2 <__udivdi3+0x168>
     39a:	96 94       	lsr	r9
     39c:	87 94       	ror	r8
     39e:	77 94       	ror	r7
     3a0:	67 94       	ror	r6
     3a2:	8a 95       	dec	r24
     3a4:	d2 f7       	brpl	.-12     	; 0x39a <__udivdi3+0x160>
     3a6:	62 2a       	or	r6, r18
     3a8:	73 2a       	or	r7, r19
     3aa:	84 2a       	or	r8, r20
     3ac:	95 2a       	or	r9, r21
     3ae:	ad a4       	ldd	r10, Y+45	; 0x2d
     3b0:	be a4       	ldd	r11, Y+46	; 0x2e
     3b2:	cf a4       	ldd	r12, Y+47	; 0x2f
     3b4:	d8 a8       	ldd	r13, Y+48	; 0x30
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <__udivdi3+0x186>
     3b8:	aa 0c       	add	r10, r10
     3ba:	bb 1c       	adc	r11, r11
     3bc:	cc 1c       	adc	r12, r12
     3be:	dd 1c       	adc	r13, r13
     3c0:	ea 94       	dec	r14
     3c2:	d2 f7       	brpl	.-12     	; 0x3b8 <__udivdi3+0x17e>
     3c4:	ad a6       	std	Y+45, r10	; 0x2d
     3c6:	be a6       	std	Y+46, r11	; 0x2e
     3c8:	cf a6       	std	Y+47, r12	; 0x2f
     3ca:	d8 aa       	std	Y+48, r13	; 0x30
     3cc:	62 01       	movw	r12, r4
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	cd aa       	std	Y+53, r12	; 0x35
     3d4:	de aa       	std	Y+54, r13	; 0x36
     3d6:	ef aa       	std	Y+55, r14	; 0x37
     3d8:	f8 ae       	std	Y+56, r15	; 0x38
     3da:	92 01       	movw	r18, r4
     3dc:	81 01       	movw	r16, r2
     3de:	20 70       	andi	r18, 0x00	; 0
     3e0:	30 70       	andi	r19, 0x00	; 0
     3e2:	09 af       	std	Y+57, r16	; 0x39
     3e4:	1a af       	std	Y+58, r17	; 0x3a
     3e6:	2b af       	std	Y+59, r18	; 0x3b
     3e8:	3c af       	std	Y+60, r19	; 0x3c
     3ea:	c4 01       	movw	r24, r8
     3ec:	b3 01       	movw	r22, r6
     3ee:	a7 01       	movw	r20, r14
     3f0:	96 01       	movw	r18, r12
     3f2:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
     3fa:	c4 01       	movw	r24, r8
     3fc:	b3 01       	movw	r22, r6
     3fe:	2d a9       	ldd	r18, Y+53	; 0x35
     400:	3e a9       	ldd	r19, Y+54	; 0x36
     402:	4f a9       	ldd	r20, Y+55	; 0x37
     404:	58 ad       	ldd	r21, Y+56	; 0x38
     406:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     40a:	c9 01       	movw	r24, r18
     40c:	da 01       	movw	r26, r20
     40e:	3c 01       	movw	r6, r24
     410:	4d 01       	movw	r8, r26
     412:	c4 01       	movw	r24, r8
     414:	b3 01       	movw	r22, r6
     416:	29 ad       	ldd	r18, Y+57	; 0x39
     418:	3a ad       	ldd	r19, Y+58	; 0x3a
     41a:	4b ad       	ldd	r20, Y+59	; 0x3b
     41c:	5c ad       	ldd	r21, Y+60	; 0x3c
     41e:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     422:	9b 01       	movw	r18, r22
     424:	ac 01       	movw	r20, r24
     426:	87 01       	movw	r16, r14
     428:	ff 24       	eor	r15, r15
     42a:	ee 24       	eor	r14, r14
     42c:	ad a4       	ldd	r10, Y+45	; 0x2d
     42e:	be a4       	ldd	r11, Y+46	; 0x2e
     430:	cf a4       	ldd	r12, Y+47	; 0x2f
     432:	d8 a8       	ldd	r13, Y+48	; 0x30
     434:	c6 01       	movw	r24, r12
     436:	aa 27       	eor	r26, r26
     438:	bb 27       	eor	r27, r27
     43a:	57 01       	movw	r10, r14
     43c:	68 01       	movw	r12, r16
     43e:	a8 2a       	or	r10, r24
     440:	b9 2a       	or	r11, r25
     442:	ca 2a       	or	r12, r26
     444:	db 2a       	or	r13, r27
     446:	a2 16       	cp	r10, r18
     448:	b3 06       	cpc	r11, r19
     44a:	c4 06       	cpc	r12, r20
     44c:	d5 06       	cpc	r13, r21
     44e:	e0 f4       	brcc	.+56     	; 0x488 <__stack+0x29>
     450:	08 94       	sec
     452:	61 08       	sbc	r6, r1
     454:	71 08       	sbc	r7, r1
     456:	81 08       	sbc	r8, r1
     458:	91 08       	sbc	r9, r1
     45a:	a2 0c       	add	r10, r2
     45c:	b3 1c       	adc	r11, r3
     45e:	c4 1c       	adc	r12, r4
     460:	d5 1c       	adc	r13, r5
     462:	a2 14       	cp	r10, r2
     464:	b3 04       	cpc	r11, r3
     466:	c4 04       	cpc	r12, r4
     468:	d5 04       	cpc	r13, r5
     46a:	70 f0       	brcs	.+28     	; 0x488 <__stack+0x29>
     46c:	a2 16       	cp	r10, r18
     46e:	b3 06       	cpc	r11, r19
     470:	c4 06       	cpc	r12, r20
     472:	d5 06       	cpc	r13, r21
     474:	48 f4       	brcc	.+18     	; 0x488 <__stack+0x29>
     476:	08 94       	sec
     478:	61 08       	sbc	r6, r1
     47a:	71 08       	sbc	r7, r1
     47c:	81 08       	sbc	r8, r1
     47e:	91 08       	sbc	r9, r1
     480:	a2 0c       	add	r10, r2
     482:	b3 1c       	adc	r11, r3
     484:	c4 1c       	adc	r12, r4
     486:	d5 1c       	adc	r13, r5
     488:	a2 1a       	sub	r10, r18
     48a:	b3 0a       	sbc	r11, r19
     48c:	c4 0a       	sbc	r12, r20
     48e:	d5 0a       	sbc	r13, r21
     490:	c6 01       	movw	r24, r12
     492:	b5 01       	movw	r22, r10
     494:	2d a9       	ldd	r18, Y+53	; 0x35
     496:	3e a9       	ldd	r19, Y+54	; 0x36
     498:	4f a9       	ldd	r20, Y+55	; 0x37
     49a:	58 ad       	ldd	r21, Y+56	; 0x38
     49c:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     4a0:	7b 01       	movw	r14, r22
     4a2:	8c 01       	movw	r16, r24
     4a4:	c6 01       	movw	r24, r12
     4a6:	b5 01       	movw	r22, r10
     4a8:	2d a9       	ldd	r18, Y+53	; 0x35
     4aa:	3e a9       	ldd	r19, Y+54	; 0x36
     4ac:	4f a9       	ldd	r20, Y+55	; 0x37
     4ae:	58 ad       	ldd	r21, Y+56	; 0x38
     4b0:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     4b4:	c9 01       	movw	r24, r18
     4b6:	da 01       	movw	r26, r20
     4b8:	5c 01       	movw	r10, r24
     4ba:	6d 01       	movw	r12, r26
     4bc:	c6 01       	movw	r24, r12
     4be:	b5 01       	movw	r22, r10
     4c0:	29 ad       	ldd	r18, Y+57	; 0x39
     4c2:	3a ad       	ldd	r19, Y+58	; 0x3a
     4c4:	4b ad       	ldd	r20, Y+59	; 0x3b
     4c6:	5c ad       	ldd	r21, Y+60	; 0x3c
     4c8:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     4cc:	9b 01       	movw	r18, r22
     4ce:	ac 01       	movw	r20, r24
     4d0:	87 01       	movw	r16, r14
     4d2:	ff 24       	eor	r15, r15
     4d4:	ee 24       	eor	r14, r14
     4d6:	8d a5       	ldd	r24, Y+45	; 0x2d
     4d8:	9e a5       	ldd	r25, Y+46	; 0x2e
     4da:	af a5       	ldd	r26, Y+47	; 0x2f
     4dc:	b8 a9       	ldd	r27, Y+48	; 0x30
     4de:	a0 70       	andi	r26, 0x00	; 0
     4e0:	b0 70       	andi	r27, 0x00	; 0
     4e2:	e8 2a       	or	r14, r24
     4e4:	f9 2a       	or	r15, r25
     4e6:	0a 2b       	or	r16, r26
     4e8:	1b 2b       	or	r17, r27
     4ea:	e2 16       	cp	r14, r18
     4ec:	f3 06       	cpc	r15, r19
     4ee:	04 07       	cpc	r16, r20
     4f0:	15 07       	cpc	r17, r21
     4f2:	c0 f4       	brcc	.+48     	; 0x524 <__stack+0xc5>
     4f4:	08 94       	sec
     4f6:	a1 08       	sbc	r10, r1
     4f8:	b1 08       	sbc	r11, r1
     4fa:	c1 08       	sbc	r12, r1
     4fc:	d1 08       	sbc	r13, r1
     4fe:	e2 0c       	add	r14, r2
     500:	f3 1c       	adc	r15, r3
     502:	04 1d       	adc	r16, r4
     504:	15 1d       	adc	r17, r5
     506:	e2 14       	cp	r14, r2
     508:	f3 04       	cpc	r15, r3
     50a:	04 05       	cpc	r16, r4
     50c:	15 05       	cpc	r17, r5
     50e:	50 f0       	brcs	.+20     	; 0x524 <__stack+0xc5>
     510:	e2 16       	cp	r14, r18
     512:	f3 06       	cpc	r15, r19
     514:	04 07       	cpc	r16, r20
     516:	15 07       	cpc	r17, r21
     518:	28 f4       	brcc	.+10     	; 0x524 <__stack+0xc5>
     51a:	08 94       	sec
     51c:	a1 08       	sbc	r10, r1
     51e:	b1 08       	sbc	r11, r1
     520:	c1 08       	sbc	r12, r1
     522:	d1 08       	sbc	r13, r1
     524:	d3 01       	movw	r26, r6
     526:	99 27       	eor	r25, r25
     528:	88 27       	eor	r24, r24
     52a:	86 01       	movw	r16, r12
     52c:	75 01       	movw	r14, r10
     52e:	e8 2a       	or	r14, r24
     530:	f9 2a       	or	r15, r25
     532:	0a 2b       	or	r16, r26
     534:	1b 2b       	or	r17, r27
     536:	e9 aa       	std	Y+49, r14	; 0x31
     538:	fa aa       	std	Y+50, r15	; 0x32
     53a:	0b ab       	std	Y+51, r16	; 0x33
     53c:	1c ab       	std	Y+52, r17	; 0x34
     53e:	cf c4       	rjmp	.+2462   	; 0xede <__stack+0xa7f>
     540:	21 14       	cp	r2, r1
     542:	31 04       	cpc	r3, r1
     544:	41 04       	cpc	r4, r1
     546:	51 04       	cpc	r5, r1
     548:	71 f4       	brne	.+28     	; 0x566 <__stack+0x107>
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     55e:	c9 01       	movw	r24, r18
     560:	da 01       	movw	r26, r20
     562:	1c 01       	movw	r2, r24
     564:	2d 01       	movw	r4, r26
     566:	00 e0       	ldi	r16, 0x00	; 0
     568:	20 16       	cp	r2, r16
     56a:	00 e0       	ldi	r16, 0x00	; 0
     56c:	30 06       	cpc	r3, r16
     56e:	01 e0       	ldi	r16, 0x01	; 1
     570:	40 06       	cpc	r4, r16
     572:	00 e0       	ldi	r16, 0x00	; 0
     574:	50 06       	cpc	r5, r16
     576:	88 f4       	brcc	.+34     	; 0x59a <__stack+0x13b>
     578:	1f ef       	ldi	r17, 0xFF	; 255
     57a:	21 16       	cp	r2, r17
     57c:	31 04       	cpc	r3, r1
     57e:	41 04       	cpc	r4, r1
     580:	51 04       	cpc	r5, r1
     582:	31 f0       	breq	.+12     	; 0x590 <__stack+0x131>
     584:	28 f0       	brcs	.+10     	; 0x590 <__stack+0x131>
     586:	48 e0       	ldi	r20, 0x08	; 8
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	17 c0       	rjmp	.+46     	; 0x5be <__stack+0x15f>
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	12 c0       	rjmp	.+36     	; 0x5be <__stack+0x15f>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	22 16       	cp	r2, r18
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	32 06       	cpc	r3, r18
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	42 06       	cpc	r4, r18
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	52 06       	cpc	r5, r18
     5aa:	28 f0       	brcs	.+10     	; 0x5b6 <__stack+0x157>
     5ac:	48 e1       	ldi	r20, 0x18	; 24
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	04 c0       	rjmp	.+8      	; 0x5be <__stack+0x15f>
     5b6:	40 e1       	ldi	r20, 0x10	; 16
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	d2 01       	movw	r26, r4
     5c0:	c1 01       	movw	r24, r2
     5c2:	04 2e       	mov	r0, r20
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <__stack+0x16f>
     5c6:	b6 95       	lsr	r27
     5c8:	a7 95       	ror	r26
     5ca:	97 95       	ror	r25
     5cc:	87 95       	ror	r24
     5ce:	0a 94       	dec	r0
     5d0:	d2 f7       	brpl	.-12     	; 0x5c6 <__stack+0x167>
     5d2:	8a 58       	subi	r24, 0x8A	; 138
     5d4:	9f 4f       	sbci	r25, 0xFF	; 255
     5d6:	dc 01       	movw	r26, r24
     5d8:	2c 91       	ld	r18, X
     5da:	e0 e2       	ldi	r30, 0x20	; 32
     5dc:	ee 2e       	mov	r14, r30
     5de:	f1 2c       	mov	r15, r1
     5e0:	01 2d       	mov	r16, r1
     5e2:	11 2d       	mov	r17, r1
     5e4:	d8 01       	movw	r26, r16
     5e6:	c7 01       	movw	r24, r14
     5e8:	84 1b       	sub	r24, r20
     5ea:	95 0b       	sbc	r25, r21
     5ec:	a6 0b       	sbc	r26, r22
     5ee:	b7 0b       	sbc	r27, r23
     5f0:	82 1b       	sub	r24, r18
     5f2:	91 09       	sbc	r25, r1
     5f4:	a1 09       	sbc	r26, r1
     5f6:	b1 09       	sbc	r27, r1
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	a1 05       	cpc	r26, r1
     5fc:	b1 05       	cpc	r27, r1
     5fe:	61 f4       	brne	.+24     	; 0x618 <__stack+0x1b9>
     600:	64 01       	movw	r12, r8
     602:	53 01       	movw	r10, r6
     604:	a2 18       	sub	r10, r2
     606:	b3 08       	sbc	r11, r3
     608:	c4 08       	sbc	r12, r4
     60a:	d5 08       	sbc	r13, r5
     60c:	31 e0       	ldi	r19, 0x01	; 1
     60e:	63 2e       	mov	r6, r19
     610:	71 2c       	mov	r7, r1
     612:	81 2c       	mov	r8, r1
     614:	91 2c       	mov	r9, r1
     616:	1e c1       	rjmp	.+572    	; 0x854 <__stack+0x3f5>
     618:	6f 96       	adiw	r28, 0x1f	; 31
     61a:	8f af       	std	Y+63, r24	; 0x3f
     61c:	6f 97       	sbiw	r28, 0x1f	; 31
     61e:	08 2e       	mov	r0, r24
     620:	04 c0       	rjmp	.+8      	; 0x62a <__stack+0x1cb>
     622:	22 0c       	add	r2, r2
     624:	33 1c       	adc	r3, r3
     626:	44 1c       	adc	r4, r4
     628:	55 1c       	adc	r5, r5
     62a:	0a 94       	dec	r0
     62c:	d2 f7       	brpl	.-12     	; 0x622 <__stack+0x1c3>
     62e:	ee 2d       	mov	r30, r14
     630:	e8 1b       	sub	r30, r24
     632:	64 01       	movw	r12, r8
     634:	53 01       	movw	r10, r6
     636:	0e 2e       	mov	r0, r30
     638:	04 c0       	rjmp	.+8      	; 0x642 <__stack+0x1e3>
     63a:	d6 94       	lsr	r13
     63c:	c7 94       	ror	r12
     63e:	b7 94       	ror	r11
     640:	a7 94       	ror	r10
     642:	0a 94       	dec	r0
     644:	d2 f7       	brpl	.-12     	; 0x63a <__stack+0x1db>
     646:	a4 01       	movw	r20, r8
     648:	93 01       	movw	r18, r6
     64a:	6f 96       	adiw	r28, 0x1f	; 31
     64c:	0f ac       	ldd	r0, Y+63	; 0x3f
     64e:	6f 97       	sbiw	r28, 0x1f	; 31
     650:	04 c0       	rjmp	.+8      	; 0x65a <__stack+0x1fb>
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	44 1f       	adc	r20, r20
     658:	55 1f       	adc	r21, r21
     65a:	0a 94       	dec	r0
     65c:	d2 f7       	brpl	.-12     	; 0x652 <__stack+0x1f3>
     65e:	6d a4       	ldd	r6, Y+45	; 0x2d
     660:	7e a4       	ldd	r7, Y+46	; 0x2e
     662:	8f a4       	ldd	r8, Y+47	; 0x2f
     664:	98 a8       	ldd	r9, Y+48	; 0x30
     666:	0e 2e       	mov	r0, r30
     668:	04 c0       	rjmp	.+8      	; 0x672 <__stack+0x213>
     66a:	96 94       	lsr	r9
     66c:	87 94       	ror	r8
     66e:	77 94       	ror	r7
     670:	67 94       	ror	r6
     672:	0a 94       	dec	r0
     674:	d2 f7       	brpl	.-12     	; 0x66a <__stack+0x20b>
     676:	84 01       	movw	r16, r8
     678:	73 01       	movw	r14, r6
     67a:	e2 2a       	or	r14, r18
     67c:	f3 2a       	or	r15, r19
     67e:	04 2b       	or	r16, r20
     680:	15 2b       	or	r17, r21
     682:	e9 a6       	std	Y+41, r14	; 0x29
     684:	fa a6       	std	Y+42, r15	; 0x2a
     686:	0b a7       	std	Y+43, r16	; 0x2b
     688:	1c a7       	std	Y+44, r17	; 0x2c
     68a:	32 01       	movw	r6, r4
     68c:	88 24       	eor	r8, r8
     68e:	99 24       	eor	r9, r9
     690:	92 01       	movw	r18, r4
     692:	81 01       	movw	r16, r2
     694:	20 70       	andi	r18, 0x00	; 0
     696:	30 70       	andi	r19, 0x00	; 0
     698:	21 96       	adiw	r28, 0x01	; 1
     69a:	0c af       	std	Y+60, r16	; 0x3c
     69c:	1d af       	std	Y+61, r17	; 0x3d
     69e:	2e af       	std	Y+62, r18	; 0x3e
     6a0:	3f af       	std	Y+63, r19	; 0x3f
     6a2:	21 97       	sbiw	r28, 0x01	; 1
     6a4:	c6 01       	movw	r24, r12
     6a6:	b5 01       	movw	r22, r10
     6a8:	a4 01       	movw	r20, r8
     6aa:	93 01       	movw	r18, r6
     6ac:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     6b0:	7b 01       	movw	r14, r22
     6b2:	8c 01       	movw	r16, r24
     6b4:	c6 01       	movw	r24, r12
     6b6:	b5 01       	movw	r22, r10
     6b8:	a4 01       	movw	r20, r8
     6ba:	93 01       	movw	r18, r6
     6bc:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     6c0:	c9 01       	movw	r24, r18
     6c2:	da 01       	movw	r26, r20
     6c4:	25 96       	adiw	r28, 0x05	; 5
     6c6:	8c af       	std	Y+60, r24	; 0x3c
     6c8:	9d af       	std	Y+61, r25	; 0x3d
     6ca:	ae af       	std	Y+62, r26	; 0x3e
     6cc:	bf af       	std	Y+63, r27	; 0x3f
     6ce:	25 97       	sbiw	r28, 0x05	; 5
     6d0:	bc 01       	movw	r22, r24
     6d2:	cd 01       	movw	r24, r26
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	2c ad       	ldd	r18, Y+60	; 0x3c
     6d8:	3d ad       	ldd	r19, Y+61	; 0x3d
     6da:	4e ad       	ldd	r20, Y+62	; 0x3e
     6dc:	5f ad       	ldd	r21, Y+63	; 0x3f
     6de:	21 97       	sbiw	r28, 0x01	; 1
     6e0:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	87 01       	movw	r16, r14
     6ea:	ff 24       	eor	r15, r15
     6ec:	ee 24       	eor	r14, r14
     6ee:	a9 a4       	ldd	r10, Y+41	; 0x29
     6f0:	ba a4       	ldd	r11, Y+42	; 0x2a
     6f2:	cb a4       	ldd	r12, Y+43	; 0x2b
     6f4:	dc a4       	ldd	r13, Y+44	; 0x2c
     6f6:	c6 01       	movw	r24, r12
     6f8:	aa 27       	eor	r26, r26
     6fa:	bb 27       	eor	r27, r27
     6fc:	5c 01       	movw	r10, r24
     6fe:	6d 01       	movw	r12, r26
     700:	ae 28       	or	r10, r14
     702:	bf 28       	or	r11, r15
     704:	c0 2a       	or	r12, r16
     706:	d1 2a       	or	r13, r17
     708:	a2 16       	cp	r10, r18
     70a:	b3 06       	cpc	r11, r19
     70c:	c4 06       	cpc	r12, r20
     70e:	d5 06       	cpc	r13, r21
     710:	60 f5       	brcc	.+88     	; 0x76a <__stack+0x30b>
     712:	25 96       	adiw	r28, 0x05	; 5
     714:	6c ad       	ldd	r22, Y+60	; 0x3c
     716:	7d ad       	ldd	r23, Y+61	; 0x3d
     718:	8e ad       	ldd	r24, Y+62	; 0x3e
     71a:	9f ad       	ldd	r25, Y+63	; 0x3f
     71c:	25 97       	sbiw	r28, 0x05	; 5
     71e:	61 50       	subi	r22, 0x01	; 1
     720:	70 40       	sbci	r23, 0x00	; 0
     722:	80 40       	sbci	r24, 0x00	; 0
     724:	90 40       	sbci	r25, 0x00	; 0
     726:	25 96       	adiw	r28, 0x05	; 5
     728:	6c af       	std	Y+60, r22	; 0x3c
     72a:	7d af       	std	Y+61, r23	; 0x3d
     72c:	8e af       	std	Y+62, r24	; 0x3e
     72e:	9f af       	std	Y+63, r25	; 0x3f
     730:	25 97       	sbiw	r28, 0x05	; 5
     732:	a2 0c       	add	r10, r2
     734:	b3 1c       	adc	r11, r3
     736:	c4 1c       	adc	r12, r4
     738:	d5 1c       	adc	r13, r5
     73a:	a2 14       	cp	r10, r2
     73c:	b3 04       	cpc	r11, r3
     73e:	c4 04       	cpc	r12, r4
     740:	d5 04       	cpc	r13, r5
     742:	98 f0       	brcs	.+38     	; 0x76a <__stack+0x30b>
     744:	a2 16       	cp	r10, r18
     746:	b3 06       	cpc	r11, r19
     748:	c4 06       	cpc	r12, r20
     74a:	d5 06       	cpc	r13, r21
     74c:	70 f4       	brcc	.+28     	; 0x76a <__stack+0x30b>
     74e:	61 50       	subi	r22, 0x01	; 1
     750:	70 40       	sbci	r23, 0x00	; 0
     752:	80 40       	sbci	r24, 0x00	; 0
     754:	90 40       	sbci	r25, 0x00	; 0
     756:	25 96       	adiw	r28, 0x05	; 5
     758:	6c af       	std	Y+60, r22	; 0x3c
     75a:	7d af       	std	Y+61, r23	; 0x3d
     75c:	8e af       	std	Y+62, r24	; 0x3e
     75e:	9f af       	std	Y+63, r25	; 0x3f
     760:	25 97       	sbiw	r28, 0x05	; 5
     762:	a2 0c       	add	r10, r2
     764:	b3 1c       	adc	r11, r3
     766:	c4 1c       	adc	r12, r4
     768:	d5 1c       	adc	r13, r5
     76a:	a2 1a       	sub	r10, r18
     76c:	b3 0a       	sbc	r11, r19
     76e:	c4 0a       	sbc	r12, r20
     770:	d5 0a       	sbc	r13, r21
     772:	c6 01       	movw	r24, r12
     774:	b5 01       	movw	r22, r10
     776:	a4 01       	movw	r20, r8
     778:	93 01       	movw	r18, r6
     77a:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     77e:	7b 01       	movw	r14, r22
     780:	8c 01       	movw	r16, r24
     782:	c6 01       	movw	r24, r12
     784:	b5 01       	movw	r22, r10
     786:	a4 01       	movw	r20, r8
     788:	93 01       	movw	r18, r6
     78a:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     78e:	c9 01       	movw	r24, r18
     790:	da 01       	movw	r26, r20
     792:	3c 01       	movw	r6, r24
     794:	4d 01       	movw	r8, r26
     796:	c4 01       	movw	r24, r8
     798:	b3 01       	movw	r22, r6
     79a:	21 96       	adiw	r28, 0x01	; 1
     79c:	2c ad       	ldd	r18, Y+60	; 0x3c
     79e:	3d ad       	ldd	r19, Y+61	; 0x3d
     7a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     7a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     7a4:	21 97       	sbiw	r28, 0x01	; 1
     7a6:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	87 01       	movw	r16, r14
     7b0:	ff 24       	eor	r15, r15
     7b2:	ee 24       	eor	r14, r14
     7b4:	89 a5       	ldd	r24, Y+41	; 0x29
     7b6:	9a a5       	ldd	r25, Y+42	; 0x2a
     7b8:	ab a5       	ldd	r26, Y+43	; 0x2b
     7ba:	bc a5       	ldd	r27, Y+44	; 0x2c
     7bc:	a0 70       	andi	r26, 0x00	; 0
     7be:	b0 70       	andi	r27, 0x00	; 0
     7c0:	57 01       	movw	r10, r14
     7c2:	68 01       	movw	r12, r16
     7c4:	a8 2a       	or	r10, r24
     7c6:	b9 2a       	or	r11, r25
     7c8:	ca 2a       	or	r12, r26
     7ca:	db 2a       	or	r13, r27
     7cc:	a2 16       	cp	r10, r18
     7ce:	b3 06       	cpc	r11, r19
     7d0:	c4 06       	cpc	r12, r20
     7d2:	d5 06       	cpc	r13, r21
     7d4:	e0 f4       	brcc	.+56     	; 0x80e <__stack+0x3af>
     7d6:	08 94       	sec
     7d8:	61 08       	sbc	r6, r1
     7da:	71 08       	sbc	r7, r1
     7dc:	81 08       	sbc	r8, r1
     7de:	91 08       	sbc	r9, r1
     7e0:	a2 0c       	add	r10, r2
     7e2:	b3 1c       	adc	r11, r3
     7e4:	c4 1c       	adc	r12, r4
     7e6:	d5 1c       	adc	r13, r5
     7e8:	a2 14       	cp	r10, r2
     7ea:	b3 04       	cpc	r11, r3
     7ec:	c4 04       	cpc	r12, r4
     7ee:	d5 04       	cpc	r13, r5
     7f0:	70 f0       	brcs	.+28     	; 0x80e <__stack+0x3af>
     7f2:	a2 16       	cp	r10, r18
     7f4:	b3 06       	cpc	r11, r19
     7f6:	c4 06       	cpc	r12, r20
     7f8:	d5 06       	cpc	r13, r21
     7fa:	48 f4       	brcc	.+18     	; 0x80e <__stack+0x3af>
     7fc:	08 94       	sec
     7fe:	61 08       	sbc	r6, r1
     800:	71 08       	sbc	r7, r1
     802:	81 08       	sbc	r8, r1
     804:	91 08       	sbc	r9, r1
     806:	a2 0c       	add	r10, r2
     808:	b3 1c       	adc	r11, r3
     80a:	c4 1c       	adc	r12, r4
     80c:	d5 1c       	adc	r13, r5
     80e:	8d a5       	ldd	r24, Y+45	; 0x2d
     810:	9e a5       	ldd	r25, Y+46	; 0x2e
     812:	af a5       	ldd	r26, Y+47	; 0x2f
     814:	b8 a9       	ldd	r27, Y+48	; 0x30
     816:	6f 96       	adiw	r28, 0x1f	; 31
     818:	0f ac       	ldd	r0, Y+63	; 0x3f
     81a:	6f 97       	sbiw	r28, 0x1f	; 31
     81c:	04 c0       	rjmp	.+8      	; 0x826 <__stack+0x3c7>
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	aa 1f       	adc	r26, r26
     824:	bb 1f       	adc	r27, r27
     826:	0a 94       	dec	r0
     828:	d2 f7       	brpl	.-12     	; 0x81e <__stack+0x3bf>
     82a:	8d a7       	std	Y+45, r24	; 0x2d
     82c:	9e a7       	std	Y+46, r25	; 0x2e
     82e:	af a7       	std	Y+47, r26	; 0x2f
     830:	b8 ab       	std	Y+48, r27	; 0x30
     832:	a2 1a       	sub	r10, r18
     834:	b3 0a       	sbc	r11, r19
     836:	c4 0a       	sbc	r12, r20
     838:	d5 0a       	sbc	r13, r21
     83a:	25 96       	adiw	r28, 0x05	; 5
     83c:	ec ac       	ldd	r14, Y+60	; 0x3c
     83e:	fd ac       	ldd	r15, Y+61	; 0x3d
     840:	0e ad       	ldd	r16, Y+62	; 0x3e
     842:	1f ad       	ldd	r17, Y+63	; 0x3f
     844:	25 97       	sbiw	r28, 0x05	; 5
     846:	d7 01       	movw	r26, r14
     848:	99 27       	eor	r25, r25
     84a:	88 27       	eor	r24, r24
     84c:	68 2a       	or	r6, r24
     84e:	79 2a       	or	r7, r25
     850:	8a 2a       	or	r8, r26
     852:	9b 2a       	or	r9, r27
     854:	82 01       	movw	r16, r4
     856:	22 27       	eor	r18, r18
     858:	33 27       	eor	r19, r19
     85a:	29 96       	adiw	r28, 0x09	; 9
     85c:	0c af       	std	Y+60, r16	; 0x3c
     85e:	1d af       	std	Y+61, r17	; 0x3d
     860:	2e af       	std	Y+62, r18	; 0x3e
     862:	3f af       	std	Y+63, r19	; 0x3f
     864:	29 97       	sbiw	r28, 0x09	; 9
     866:	a2 01       	movw	r20, r4
     868:	91 01       	movw	r18, r2
     86a:	40 70       	andi	r20, 0x00	; 0
     86c:	50 70       	andi	r21, 0x00	; 0
     86e:	2d 96       	adiw	r28, 0x0d	; 13
     870:	2c af       	std	Y+60, r18	; 0x3c
     872:	3d af       	std	Y+61, r19	; 0x3d
     874:	4e af       	std	Y+62, r20	; 0x3e
     876:	5f af       	std	Y+63, r21	; 0x3f
     878:	2d 97       	sbiw	r28, 0x0d	; 13
     87a:	c6 01       	movw	r24, r12
     87c:	b5 01       	movw	r22, r10
     87e:	29 96       	adiw	r28, 0x09	; 9
     880:	2c ad       	ldd	r18, Y+60	; 0x3c
     882:	3d ad       	ldd	r19, Y+61	; 0x3d
     884:	4e ad       	ldd	r20, Y+62	; 0x3e
     886:	5f ad       	ldd	r21, Y+63	; 0x3f
     888:	29 97       	sbiw	r28, 0x09	; 9
     88a:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     88e:	7b 01       	movw	r14, r22
     890:	8c 01       	movw	r16, r24
     892:	c6 01       	movw	r24, r12
     894:	b5 01       	movw	r22, r10
     896:	29 96       	adiw	r28, 0x09	; 9
     898:	2c ad       	ldd	r18, Y+60	; 0x3c
     89a:	3d ad       	ldd	r19, Y+61	; 0x3d
     89c:	4e ad       	ldd	r20, Y+62	; 0x3e
     89e:	5f ad       	ldd	r21, Y+63	; 0x3f
     8a0:	29 97       	sbiw	r28, 0x09	; 9
     8a2:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     8a6:	c9 01       	movw	r24, r18
     8a8:	da 01       	movw	r26, r20
     8aa:	61 96       	adiw	r28, 0x11	; 17
     8ac:	8c af       	std	Y+60, r24	; 0x3c
     8ae:	9d af       	std	Y+61, r25	; 0x3d
     8b0:	ae af       	std	Y+62, r26	; 0x3e
     8b2:	bf af       	std	Y+63, r27	; 0x3f
     8b4:	61 97       	sbiw	r28, 0x11	; 17
     8b6:	bc 01       	movw	r22, r24
     8b8:	cd 01       	movw	r24, r26
     8ba:	2d 96       	adiw	r28, 0x0d	; 13
     8bc:	2c ad       	ldd	r18, Y+60	; 0x3c
     8be:	3d ad       	ldd	r19, Y+61	; 0x3d
     8c0:	4e ad       	ldd	r20, Y+62	; 0x3e
     8c2:	5f ad       	ldd	r21, Y+63	; 0x3f
     8c4:	2d 97       	sbiw	r28, 0x0d	; 13
     8c6:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     8ca:	9b 01       	movw	r18, r22
     8cc:	ac 01       	movw	r20, r24
     8ce:	87 01       	movw	r16, r14
     8d0:	ff 24       	eor	r15, r15
     8d2:	ee 24       	eor	r14, r14
     8d4:	ad a4       	ldd	r10, Y+45	; 0x2d
     8d6:	be a4       	ldd	r11, Y+46	; 0x2e
     8d8:	cf a4       	ldd	r12, Y+47	; 0x2f
     8da:	d8 a8       	ldd	r13, Y+48	; 0x30
     8dc:	c6 01       	movw	r24, r12
     8de:	aa 27       	eor	r26, r26
     8e0:	bb 27       	eor	r27, r27
     8e2:	57 01       	movw	r10, r14
     8e4:	68 01       	movw	r12, r16
     8e6:	a8 2a       	or	r10, r24
     8e8:	b9 2a       	or	r11, r25
     8ea:	ca 2a       	or	r12, r26
     8ec:	db 2a       	or	r13, r27
     8ee:	a2 16       	cp	r10, r18
     8f0:	b3 06       	cpc	r11, r19
     8f2:	c4 06       	cpc	r12, r20
     8f4:	d5 06       	cpc	r13, r21
     8f6:	60 f5       	brcc	.+88     	; 0x950 <__stack+0x4f1>
     8f8:	61 96       	adiw	r28, 0x11	; 17
     8fa:	6c ad       	ldd	r22, Y+60	; 0x3c
     8fc:	7d ad       	ldd	r23, Y+61	; 0x3d
     8fe:	8e ad       	ldd	r24, Y+62	; 0x3e
     900:	9f ad       	ldd	r25, Y+63	; 0x3f
     902:	61 97       	sbiw	r28, 0x11	; 17
     904:	61 50       	subi	r22, 0x01	; 1
     906:	70 40       	sbci	r23, 0x00	; 0
     908:	80 40       	sbci	r24, 0x00	; 0
     90a:	90 40       	sbci	r25, 0x00	; 0
     90c:	61 96       	adiw	r28, 0x11	; 17
     90e:	6c af       	std	Y+60, r22	; 0x3c
     910:	7d af       	std	Y+61, r23	; 0x3d
     912:	8e af       	std	Y+62, r24	; 0x3e
     914:	9f af       	std	Y+63, r25	; 0x3f
     916:	61 97       	sbiw	r28, 0x11	; 17
     918:	a2 0c       	add	r10, r2
     91a:	b3 1c       	adc	r11, r3
     91c:	c4 1c       	adc	r12, r4
     91e:	d5 1c       	adc	r13, r5
     920:	a2 14       	cp	r10, r2
     922:	b3 04       	cpc	r11, r3
     924:	c4 04       	cpc	r12, r4
     926:	d5 04       	cpc	r13, r5
     928:	98 f0       	brcs	.+38     	; 0x950 <__stack+0x4f1>
     92a:	a2 16       	cp	r10, r18
     92c:	b3 06       	cpc	r11, r19
     92e:	c4 06       	cpc	r12, r20
     930:	d5 06       	cpc	r13, r21
     932:	70 f4       	brcc	.+28     	; 0x950 <__stack+0x4f1>
     934:	61 50       	subi	r22, 0x01	; 1
     936:	70 40       	sbci	r23, 0x00	; 0
     938:	80 40       	sbci	r24, 0x00	; 0
     93a:	90 40       	sbci	r25, 0x00	; 0
     93c:	61 96       	adiw	r28, 0x11	; 17
     93e:	6c af       	std	Y+60, r22	; 0x3c
     940:	7d af       	std	Y+61, r23	; 0x3d
     942:	8e af       	std	Y+62, r24	; 0x3e
     944:	9f af       	std	Y+63, r25	; 0x3f
     946:	61 97       	sbiw	r28, 0x11	; 17
     948:	a2 0c       	add	r10, r2
     94a:	b3 1c       	adc	r11, r3
     94c:	c4 1c       	adc	r12, r4
     94e:	d5 1c       	adc	r13, r5
     950:	a2 1a       	sub	r10, r18
     952:	b3 0a       	sbc	r11, r19
     954:	c4 0a       	sbc	r12, r20
     956:	d5 0a       	sbc	r13, r21
     958:	c6 01       	movw	r24, r12
     95a:	b5 01       	movw	r22, r10
     95c:	29 96       	adiw	r28, 0x09	; 9
     95e:	2c ad       	ldd	r18, Y+60	; 0x3c
     960:	3d ad       	ldd	r19, Y+61	; 0x3d
     962:	4e ad       	ldd	r20, Y+62	; 0x3e
     964:	5f ad       	ldd	r21, Y+63	; 0x3f
     966:	29 97       	sbiw	r28, 0x09	; 9
     968:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     96c:	7b 01       	movw	r14, r22
     96e:	8c 01       	movw	r16, r24
     970:	c6 01       	movw	r24, r12
     972:	b5 01       	movw	r22, r10
     974:	29 96       	adiw	r28, 0x09	; 9
     976:	2c ad       	ldd	r18, Y+60	; 0x3c
     978:	3d ad       	ldd	r19, Y+61	; 0x3d
     97a:	4e ad       	ldd	r20, Y+62	; 0x3e
     97c:	5f ad       	ldd	r21, Y+63	; 0x3f
     97e:	29 97       	sbiw	r28, 0x09	; 9
     980:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     984:	c9 01       	movw	r24, r18
     986:	da 01       	movw	r26, r20
     988:	5c 01       	movw	r10, r24
     98a:	6d 01       	movw	r12, r26
     98c:	c6 01       	movw	r24, r12
     98e:	b5 01       	movw	r22, r10
     990:	2d 96       	adiw	r28, 0x0d	; 13
     992:	2c ad       	ldd	r18, Y+60	; 0x3c
     994:	3d ad       	ldd	r19, Y+61	; 0x3d
     996:	4e ad       	ldd	r20, Y+62	; 0x3e
     998:	5f ad       	ldd	r21, Y+63	; 0x3f
     99a:	2d 97       	sbiw	r28, 0x0d	; 13
     99c:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	87 01       	movw	r16, r14
     9a6:	ff 24       	eor	r15, r15
     9a8:	ee 24       	eor	r14, r14
     9aa:	8d a5       	ldd	r24, Y+45	; 0x2d
     9ac:	9e a5       	ldd	r25, Y+46	; 0x2e
     9ae:	af a5       	ldd	r26, Y+47	; 0x2f
     9b0:	b8 a9       	ldd	r27, Y+48	; 0x30
     9b2:	a0 70       	andi	r26, 0x00	; 0
     9b4:	b0 70       	andi	r27, 0x00	; 0
     9b6:	e8 2a       	or	r14, r24
     9b8:	f9 2a       	or	r15, r25
     9ba:	0a 2b       	or	r16, r26
     9bc:	1b 2b       	or	r17, r27
     9be:	e2 16       	cp	r14, r18
     9c0:	f3 06       	cpc	r15, r19
     9c2:	04 07       	cpc	r16, r20
     9c4:	15 07       	cpc	r17, r21
     9c6:	c0 f4       	brcc	.+48     	; 0x9f8 <__stack+0x599>
     9c8:	08 94       	sec
     9ca:	a1 08       	sbc	r10, r1
     9cc:	b1 08       	sbc	r11, r1
     9ce:	c1 08       	sbc	r12, r1
     9d0:	d1 08       	sbc	r13, r1
     9d2:	e2 0c       	add	r14, r2
     9d4:	f3 1c       	adc	r15, r3
     9d6:	04 1d       	adc	r16, r4
     9d8:	15 1d       	adc	r17, r5
     9da:	e2 14       	cp	r14, r2
     9dc:	f3 04       	cpc	r15, r3
     9de:	04 05       	cpc	r16, r4
     9e0:	15 05       	cpc	r17, r5
     9e2:	50 f0       	brcs	.+20     	; 0x9f8 <__stack+0x599>
     9e4:	e2 16       	cp	r14, r18
     9e6:	f3 06       	cpc	r15, r19
     9e8:	04 07       	cpc	r16, r20
     9ea:	15 07       	cpc	r17, r21
     9ec:	28 f4       	brcc	.+10     	; 0x9f8 <__stack+0x599>
     9ee:	08 94       	sec
     9f0:	a1 08       	sbc	r10, r1
     9f2:	b1 08       	sbc	r11, r1
     9f4:	c1 08       	sbc	r12, r1
     9f6:	d1 08       	sbc	r13, r1
     9f8:	61 96       	adiw	r28, 0x11	; 17
     9fa:	ec ac       	ldd	r14, Y+60	; 0x3c
     9fc:	fd ac       	ldd	r15, Y+61	; 0x3d
     9fe:	0e ad       	ldd	r16, Y+62	; 0x3e
     a00:	1f ad       	ldd	r17, Y+63	; 0x3f
     a02:	61 97       	sbiw	r28, 0x11	; 17
     a04:	d7 01       	movw	r26, r14
     a06:	99 27       	eor	r25, r25
     a08:	88 27       	eor	r24, r24
     a0a:	96 01       	movw	r18, r12
     a0c:	85 01       	movw	r16, r10
     a0e:	08 2b       	or	r16, r24
     a10:	19 2b       	or	r17, r25
     a12:	2a 2b       	or	r18, r26
     a14:	3b 2b       	or	r19, r27
     a16:	09 ab       	std	Y+49, r16	; 0x31
     a18:	1a ab       	std	Y+50, r17	; 0x32
     a1a:	2b ab       	std	Y+51, r18	; 0x33
     a1c:	3c ab       	std	Y+52, r19	; 0x34
     a1e:	62 c2       	rjmp	.+1220   	; 0xee4 <__stack+0xa85>
     a20:	6e 14       	cp	r6, r14
     a22:	7f 04       	cpc	r7, r15
     a24:	80 06       	cpc	r8, r16
     a26:	91 06       	cpc	r9, r17
     a28:	08 f4       	brcc	.+2      	; 0xa2c <__stack+0x5cd>
     a2a:	51 c2       	rjmp	.+1186   	; 0xece <__stack+0xa6f>
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	e2 16       	cp	r14, r18
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	f2 06       	cpc	r15, r18
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	02 07       	cpc	r16, r18
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	12 07       	cpc	r17, r18
     a3c:	88 f4       	brcc	.+34     	; 0xa60 <__stack+0x601>
     a3e:	3f ef       	ldi	r19, 0xFF	; 255
     a40:	e3 16       	cp	r14, r19
     a42:	f1 04       	cpc	r15, r1
     a44:	01 05       	cpc	r16, r1
     a46:	11 05       	cpc	r17, r1
     a48:	31 f0       	breq	.+12     	; 0xa56 <__stack+0x5f7>
     a4a:	28 f0       	brcs	.+10     	; 0xa56 <__stack+0x5f7>
     a4c:	48 e0       	ldi	r20, 0x08	; 8
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	17 c0       	rjmp	.+46     	; 0xa84 <__stack+0x625>
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	12 c0       	rjmp	.+36     	; 0xa84 <__stack+0x625>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	e4 16       	cp	r14, r20
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	f4 06       	cpc	r15, r20
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	04 07       	cpc	r16, r20
     a6c:	41 e0       	ldi	r20, 0x01	; 1
     a6e:	14 07       	cpc	r17, r20
     a70:	28 f0       	brcs	.+10     	; 0xa7c <__stack+0x61d>
     a72:	48 e1       	ldi	r20, 0x18	; 24
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__stack+0x625>
     a7c:	40 e1       	ldi	r20, 0x10	; 16
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	d8 01       	movw	r26, r16
     a86:	c7 01       	movw	r24, r14
     a88:	04 2e       	mov	r0, r20
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__stack+0x635>
     a8c:	b6 95       	lsr	r27
     a8e:	a7 95       	ror	r26
     a90:	97 95       	ror	r25
     a92:	87 95       	ror	r24
     a94:	0a 94       	dec	r0
     a96:	d2 f7       	brpl	.-12     	; 0xa8c <__stack+0x62d>
     a98:	8a 58       	subi	r24, 0x8A	; 138
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	dc 01       	movw	r26, r24
     a9e:	2c 91       	ld	r18, X
     aa0:	30 e2       	ldi	r19, 0x20	; 32
     aa2:	a3 2e       	mov	r10, r19
     aa4:	b1 2c       	mov	r11, r1
     aa6:	c1 2c       	mov	r12, r1
     aa8:	d1 2c       	mov	r13, r1
     aaa:	d6 01       	movw	r26, r12
     aac:	c5 01       	movw	r24, r10
     aae:	84 1b       	sub	r24, r20
     ab0:	95 0b       	sbc	r25, r21
     ab2:	a6 0b       	sbc	r26, r22
     ab4:	b7 0b       	sbc	r27, r23
     ab6:	82 1b       	sub	r24, r18
     ab8:	91 09       	sbc	r25, r1
     aba:	a1 09       	sbc	r26, r1
     abc:	b1 09       	sbc	r27, r1
     abe:	00 97       	sbiw	r24, 0x00	; 0
     ac0:	a1 05       	cpc	r26, r1
     ac2:	b1 05       	cpc	r27, r1
     ac4:	89 f4       	brne	.+34     	; 0xae8 <__stack+0x689>
     ac6:	e6 14       	cp	r14, r6
     ac8:	f7 04       	cpc	r15, r7
     aca:	08 05       	cpc	r16, r8
     acc:	19 05       	cpc	r17, r9
     ace:	08 f4       	brcc	.+2      	; 0xad2 <__stack+0x673>
     ad0:	f2 c1       	rjmp	.+996    	; 0xeb6 <__stack+0xa57>
     ad2:	6d a4       	ldd	r6, Y+45	; 0x2d
     ad4:	7e a4       	ldd	r7, Y+46	; 0x2e
     ad6:	8f a4       	ldd	r8, Y+47	; 0x2f
     ad8:	98 a8       	ldd	r9, Y+48	; 0x30
     ada:	62 14       	cp	r6, r2
     adc:	73 04       	cpc	r7, r3
     ade:	84 04       	cpc	r8, r4
     ae0:	95 04       	cpc	r9, r5
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <__stack+0x687>
     ae4:	e8 c1       	rjmp	.+976    	; 0xeb6 <__stack+0xa57>
     ae6:	f3 c1       	rjmp	.+998    	; 0xece <__stack+0xa6f>
     ae8:	6e 96       	adiw	r28, 0x1e	; 30
     aea:	8f af       	std	Y+63, r24	; 0x3f
     aec:	6e 97       	sbiw	r28, 0x1e	; 30
     aee:	08 2e       	mov	r0, r24
     af0:	04 c0       	rjmp	.+8      	; 0xafa <__stack+0x69b>
     af2:	ee 0c       	add	r14, r14
     af4:	ff 1c       	adc	r15, r15
     af6:	00 1f       	adc	r16, r16
     af8:	11 1f       	adc	r17, r17
     afa:	0a 94       	dec	r0
     afc:	d2 f7       	brpl	.-12     	; 0xaf2 <__stack+0x693>
     afe:	6a 2d       	mov	r22, r10
     b00:	68 1b       	sub	r22, r24
     b02:	d2 01       	movw	r26, r4
     b04:	c1 01       	movw	r24, r2
     b06:	06 2e       	mov	r0, r22
     b08:	04 c0       	rjmp	.+8      	; 0xb12 <__stack+0x6b3>
     b0a:	b6 95       	lsr	r27
     b0c:	a7 95       	ror	r26
     b0e:	97 95       	ror	r25
     b10:	87 95       	ror	r24
     b12:	0a 94       	dec	r0
     b14:	d2 f7       	brpl	.-12     	; 0xb0a <__stack+0x6ab>
     b16:	5c 01       	movw	r10, r24
     b18:	6d 01       	movw	r12, r26
     b1a:	ae 28       	or	r10, r14
     b1c:	bf 28       	or	r11, r15
     b1e:	c0 2a       	or	r12, r16
     b20:	d1 2a       	or	r13, r17
     b22:	ad a2       	std	Y+37, r10	; 0x25
     b24:	be a2       	std	Y+38, r11	; 0x26
     b26:	cf a2       	std	Y+39, r12	; 0x27
     b28:	d8 a6       	std	Y+40, r13	; 0x28
     b2a:	72 01       	movw	r14, r4
     b2c:	61 01       	movw	r12, r2
     b2e:	6e 96       	adiw	r28, 0x1e	; 30
     b30:	0f ac       	ldd	r0, Y+63	; 0x3f
     b32:	6e 97       	sbiw	r28, 0x1e	; 30
     b34:	04 c0       	rjmp	.+8      	; 0xb3e <__stack+0x6df>
     b36:	cc 0c       	add	r12, r12
     b38:	dd 1c       	adc	r13, r13
     b3a:	ee 1c       	adc	r14, r14
     b3c:	ff 1c       	adc	r15, r15
     b3e:	0a 94       	dec	r0
     b40:	d2 f7       	brpl	.-12     	; 0xb36 <__stack+0x6d7>
     b42:	c9 a2       	std	Y+33, r12	; 0x21
     b44:	da a2       	std	Y+34, r13	; 0x22
     b46:	eb a2       	std	Y+35, r14	; 0x23
     b48:	fc a2       	std	Y+36, r15	; 0x24
     b4a:	64 01       	movw	r12, r8
     b4c:	53 01       	movw	r10, r6
     b4e:	06 2e       	mov	r0, r22
     b50:	04 c0       	rjmp	.+8      	; 0xb5a <__stack+0x6fb>
     b52:	d6 94       	lsr	r13
     b54:	c7 94       	ror	r12
     b56:	b7 94       	ror	r11
     b58:	a7 94       	ror	r10
     b5a:	0a 94       	dec	r0
     b5c:	d2 f7       	brpl	.-12     	; 0xb52 <__stack+0x6f3>
     b5e:	d4 01       	movw	r26, r8
     b60:	c3 01       	movw	r24, r6
     b62:	6e 96       	adiw	r28, 0x1e	; 30
     b64:	0f ac       	ldd	r0, Y+63	; 0x3f
     b66:	6e 97       	sbiw	r28, 0x1e	; 30
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <__stack+0x713>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	aa 1f       	adc	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	0a 94       	dec	r0
     b74:	d2 f7       	brpl	.-12     	; 0xb6a <__stack+0x70b>
     b76:	ed a4       	ldd	r14, Y+45	; 0x2d
     b78:	fe a4       	ldd	r15, Y+46	; 0x2e
     b7a:	0f a5       	ldd	r16, Y+47	; 0x2f
     b7c:	18 a9       	ldd	r17, Y+48	; 0x30
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__stack+0x729>
     b80:	16 95       	lsr	r17
     b82:	07 95       	ror	r16
     b84:	f7 94       	ror	r15
     b86:	e7 94       	ror	r14
     b88:	6a 95       	dec	r22
     b8a:	d2 f7       	brpl	.-12     	; 0xb80 <__stack+0x721>
     b8c:	37 01       	movw	r6, r14
     b8e:	48 01       	movw	r8, r16
     b90:	68 2a       	or	r6, r24
     b92:	79 2a       	or	r7, r25
     b94:	8a 2a       	or	r8, r26
     b96:	9b 2a       	or	r9, r27
     b98:	6d 8e       	std	Y+29, r6	; 0x1d
     b9a:	7e 8e       	std	Y+30, r7	; 0x1e
     b9c:	8f 8e       	std	Y+31, r8	; 0x1f
     b9e:	98 a2       	std	Y+32, r9	; 0x20
     ba0:	ed a0       	ldd	r14, Y+37	; 0x25
     ba2:	fe a0       	ldd	r15, Y+38	; 0x26
     ba4:	0f a1       	ldd	r16, Y+39	; 0x27
     ba6:	18 a5       	ldd	r17, Y+40	; 0x28
     ba8:	38 01       	movw	r6, r16
     baa:	88 24       	eor	r8, r8
     bac:	99 24       	eor	r9, r9
     bae:	98 01       	movw	r18, r16
     bb0:	87 01       	movw	r16, r14
     bb2:	20 70       	andi	r18, 0x00	; 0
     bb4:	30 70       	andi	r19, 0x00	; 0
     bb6:	65 96       	adiw	r28, 0x15	; 21
     bb8:	0c af       	std	Y+60, r16	; 0x3c
     bba:	1d af       	std	Y+61, r17	; 0x3d
     bbc:	2e af       	std	Y+62, r18	; 0x3e
     bbe:	3f af       	std	Y+63, r19	; 0x3f
     bc0:	65 97       	sbiw	r28, 0x15	; 21
     bc2:	c6 01       	movw	r24, r12
     bc4:	b5 01       	movw	r22, r10
     bc6:	a4 01       	movw	r20, r8
     bc8:	93 01       	movw	r18, r6
     bca:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     bce:	7b 01       	movw	r14, r22
     bd0:	8c 01       	movw	r16, r24
     bd2:	c6 01       	movw	r24, r12
     bd4:	b5 01       	movw	r22, r10
     bd6:	a4 01       	movw	r20, r8
     bd8:	93 01       	movw	r18, r6
     bda:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     bde:	c9 01       	movw	r24, r18
     be0:	da 01       	movw	r26, r20
     be2:	1c 01       	movw	r2, r24
     be4:	2d 01       	movw	r4, r26
     be6:	c2 01       	movw	r24, r4
     be8:	b1 01       	movw	r22, r2
     bea:	65 96       	adiw	r28, 0x15	; 21
     bec:	2c ad       	ldd	r18, Y+60	; 0x3c
     bee:	3d ad       	ldd	r19, Y+61	; 0x3d
     bf0:	4e ad       	ldd	r20, Y+62	; 0x3e
     bf2:	5f ad       	ldd	r21, Y+63	; 0x3f
     bf4:	65 97       	sbiw	r28, 0x15	; 21
     bf6:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     bfa:	9b 01       	movw	r18, r22
     bfc:	ac 01       	movw	r20, r24
     bfe:	87 01       	movw	r16, r14
     c00:	ff 24       	eor	r15, r15
     c02:	ee 24       	eor	r14, r14
     c04:	ad 8c       	ldd	r10, Y+29	; 0x1d
     c06:	be 8c       	ldd	r11, Y+30	; 0x1e
     c08:	cf 8c       	ldd	r12, Y+31	; 0x1f
     c0a:	d8 a0       	ldd	r13, Y+32	; 0x20
     c0c:	c6 01       	movw	r24, r12
     c0e:	aa 27       	eor	r26, r26
     c10:	bb 27       	eor	r27, r27
     c12:	57 01       	movw	r10, r14
     c14:	68 01       	movw	r12, r16
     c16:	a8 2a       	or	r10, r24
     c18:	b9 2a       	or	r11, r25
     c1a:	ca 2a       	or	r12, r26
     c1c:	db 2a       	or	r13, r27
     c1e:	a2 16       	cp	r10, r18
     c20:	b3 06       	cpc	r11, r19
     c22:	c4 06       	cpc	r12, r20
     c24:	d5 06       	cpc	r13, r21
     c26:	00 f5       	brcc	.+64     	; 0xc68 <__stack+0x809>
     c28:	08 94       	sec
     c2a:	21 08       	sbc	r2, r1
     c2c:	31 08       	sbc	r3, r1
     c2e:	41 08       	sbc	r4, r1
     c30:	51 08       	sbc	r5, r1
     c32:	ed a0       	ldd	r14, Y+37	; 0x25
     c34:	fe a0       	ldd	r15, Y+38	; 0x26
     c36:	0f a1       	ldd	r16, Y+39	; 0x27
     c38:	18 a5       	ldd	r17, Y+40	; 0x28
     c3a:	ae 0c       	add	r10, r14
     c3c:	bf 1c       	adc	r11, r15
     c3e:	c0 1e       	adc	r12, r16
     c40:	d1 1e       	adc	r13, r17
     c42:	ae 14       	cp	r10, r14
     c44:	bf 04       	cpc	r11, r15
     c46:	c0 06       	cpc	r12, r16
     c48:	d1 06       	cpc	r13, r17
     c4a:	70 f0       	brcs	.+28     	; 0xc68 <__stack+0x809>
     c4c:	a2 16       	cp	r10, r18
     c4e:	b3 06       	cpc	r11, r19
     c50:	c4 06       	cpc	r12, r20
     c52:	d5 06       	cpc	r13, r21
     c54:	48 f4       	brcc	.+18     	; 0xc68 <__stack+0x809>
     c56:	08 94       	sec
     c58:	21 08       	sbc	r2, r1
     c5a:	31 08       	sbc	r3, r1
     c5c:	41 08       	sbc	r4, r1
     c5e:	51 08       	sbc	r5, r1
     c60:	ae 0c       	add	r10, r14
     c62:	bf 1c       	adc	r11, r15
     c64:	c0 1e       	adc	r12, r16
     c66:	d1 1e       	adc	r13, r17
     c68:	a2 1a       	sub	r10, r18
     c6a:	b3 0a       	sbc	r11, r19
     c6c:	c4 0a       	sbc	r12, r20
     c6e:	d5 0a       	sbc	r13, r21
     c70:	c6 01       	movw	r24, r12
     c72:	b5 01       	movw	r22, r10
     c74:	a4 01       	movw	r20, r8
     c76:	93 01       	movw	r18, r6
     c78:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     c7c:	7b 01       	movw	r14, r22
     c7e:	8c 01       	movw	r16, r24
     c80:	c6 01       	movw	r24, r12
     c82:	b5 01       	movw	r22, r10
     c84:	a4 01       	movw	r20, r8
     c86:	93 01       	movw	r18, r6
     c88:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
     c8c:	c9 01       	movw	r24, r18
     c8e:	da 01       	movw	r26, r20
     c90:	3c 01       	movw	r6, r24
     c92:	4d 01       	movw	r8, r26
     c94:	c4 01       	movw	r24, r8
     c96:	b3 01       	movw	r22, r6
     c98:	65 96       	adiw	r28, 0x15	; 21
     c9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     c9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     c9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ca0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ca2:	65 97       	sbiw	r28, 0x15	; 21
     ca4:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     ca8:	9b 01       	movw	r18, r22
     caa:	ac 01       	movw	r20, r24
     cac:	87 01       	movw	r16, r14
     cae:	ff 24       	eor	r15, r15
     cb0:	ee 24       	eor	r14, r14
     cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cb6:	af 8d       	ldd	r26, Y+31	; 0x1f
     cb8:	b8 a1       	ldd	r27, Y+32	; 0x20
     cba:	a0 70       	andi	r26, 0x00	; 0
     cbc:	b0 70       	andi	r27, 0x00	; 0
     cbe:	57 01       	movw	r10, r14
     cc0:	68 01       	movw	r12, r16
     cc2:	a8 2a       	or	r10, r24
     cc4:	b9 2a       	or	r11, r25
     cc6:	ca 2a       	or	r12, r26
     cc8:	db 2a       	or	r13, r27
     cca:	a2 16       	cp	r10, r18
     ccc:	b3 06       	cpc	r11, r19
     cce:	c4 06       	cpc	r12, r20
     cd0:	d5 06       	cpc	r13, r21
     cd2:	00 f5       	brcc	.+64     	; 0xd14 <__stack+0x8b5>
     cd4:	08 94       	sec
     cd6:	61 08       	sbc	r6, r1
     cd8:	71 08       	sbc	r7, r1
     cda:	81 08       	sbc	r8, r1
     cdc:	91 08       	sbc	r9, r1
     cde:	6d a1       	ldd	r22, Y+37	; 0x25
     ce0:	7e a1       	ldd	r23, Y+38	; 0x26
     ce2:	8f a1       	ldd	r24, Y+39	; 0x27
     ce4:	98 a5       	ldd	r25, Y+40	; 0x28
     ce6:	a6 0e       	add	r10, r22
     ce8:	b7 1e       	adc	r11, r23
     cea:	c8 1e       	adc	r12, r24
     cec:	d9 1e       	adc	r13, r25
     cee:	a6 16       	cp	r10, r22
     cf0:	b7 06       	cpc	r11, r23
     cf2:	c8 06       	cpc	r12, r24
     cf4:	d9 06       	cpc	r13, r25
     cf6:	70 f0       	brcs	.+28     	; 0xd14 <__stack+0x8b5>
     cf8:	a2 16       	cp	r10, r18
     cfa:	b3 06       	cpc	r11, r19
     cfc:	c4 06       	cpc	r12, r20
     cfe:	d5 06       	cpc	r13, r21
     d00:	48 f4       	brcc	.+18     	; 0xd14 <__stack+0x8b5>
     d02:	08 94       	sec
     d04:	61 08       	sbc	r6, r1
     d06:	71 08       	sbc	r7, r1
     d08:	81 08       	sbc	r8, r1
     d0a:	91 08       	sbc	r9, r1
     d0c:	a6 0e       	add	r10, r22
     d0e:	b7 1e       	adc	r11, r23
     d10:	c8 1e       	adc	r12, r24
     d12:	d9 1e       	adc	r13, r25
     d14:	d6 01       	movw	r26, r12
     d16:	c5 01       	movw	r24, r10
     d18:	82 1b       	sub	r24, r18
     d1a:	93 0b       	sbc	r25, r19
     d1c:	a4 0b       	sbc	r26, r20
     d1e:	b5 0b       	sbc	r27, r21
     d20:	89 8f       	std	Y+25, r24	; 0x19
     d22:	9a 8f       	std	Y+26, r25	; 0x1a
     d24:	ab 8f       	std	Y+27, r26	; 0x1b
     d26:	bc 8f       	std	Y+28, r27	; 0x1c
     d28:	d1 01       	movw	r26, r2
     d2a:	99 27       	eor	r25, r25
     d2c:	88 27       	eor	r24, r24
     d2e:	64 01       	movw	r12, r8
     d30:	53 01       	movw	r10, r6
     d32:	a8 2a       	or	r10, r24
     d34:	b9 2a       	or	r11, r25
     d36:	ca 2a       	or	r12, r26
     d38:	db 2a       	or	r13, r27
     d3a:	a9 aa       	std	Y+49, r10	; 0x31
     d3c:	ba aa       	std	Y+50, r11	; 0x32
     d3e:	cb aa       	std	Y+51, r12	; 0x33
     d40:	dc aa       	std	Y+52, r13	; 0x34
     d42:	86 01       	movw	r16, r12
     d44:	75 01       	movw	r14, r10
     d46:	2f ef       	ldi	r18, 0xFF	; 255
     d48:	3f ef       	ldi	r19, 0xFF	; 255
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	e2 22       	and	r14, r18
     d50:	f3 22       	and	r15, r19
     d52:	04 23       	and	r16, r20
     d54:	15 23       	and	r17, r21
     d56:	a6 01       	movw	r20, r12
     d58:	66 27       	eor	r22, r22
     d5a:	77 27       	eor	r23, r23
     d5c:	6d 96       	adiw	r28, 0x1d	; 29
     d5e:	4c af       	std	Y+60, r20	; 0x3c
     d60:	5d af       	std	Y+61, r21	; 0x3d
     d62:	6e af       	std	Y+62, r22	; 0x3e
     d64:	7f af       	std	Y+63, r23	; 0x3f
     d66:	6d 97       	sbiw	r28, 0x1d	; 29
     d68:	a9 a0       	ldd	r10, Y+33	; 0x21
     d6a:	ba a0       	ldd	r11, Y+34	; 0x22
     d6c:	cb a0       	ldd	r12, Y+35	; 0x23
     d6e:	dc a0       	ldd	r13, Y+36	; 0x24
     d70:	6f ef       	ldi	r22, 0xFF	; 255
     d72:	7f ef       	ldi	r23, 0xFF	; 255
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a6 22       	and	r10, r22
     d7a:	b7 22       	and	r11, r23
     d7c:	c8 22       	and	r12, r24
     d7e:	d9 22       	and	r13, r25
     d80:	89 a1       	ldd	r24, Y+33	; 0x21
     d82:	9a a1       	ldd	r25, Y+34	; 0x22
     d84:	ab a1       	ldd	r26, Y+35	; 0x23
     d86:	bc a1       	ldd	r27, Y+36	; 0x24
     d88:	1d 01       	movw	r2, r26
     d8a:	44 24       	eor	r4, r4
     d8c:	55 24       	eor	r5, r5
     d8e:	c8 01       	movw	r24, r16
     d90:	b7 01       	movw	r22, r14
     d92:	a6 01       	movw	r20, r12
     d94:	95 01       	movw	r18, r10
     d96:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     d9a:	69 96       	adiw	r28, 0x19	; 25
     d9c:	6c af       	std	Y+60, r22	; 0x3c
     d9e:	7d af       	std	Y+61, r23	; 0x3d
     da0:	8e af       	std	Y+62, r24	; 0x3e
     da2:	9f af       	std	Y+63, r25	; 0x3f
     da4:	69 97       	sbiw	r28, 0x19	; 25
     da6:	c8 01       	movw	r24, r16
     da8:	b7 01       	movw	r22, r14
     daa:	a2 01       	movw	r20, r4
     dac:	91 01       	movw	r18, r2
     dae:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     db2:	3b 01       	movw	r6, r22
     db4:	4c 01       	movw	r8, r24
     db6:	6d 96       	adiw	r28, 0x1d	; 29
     db8:	6c ad       	ldd	r22, Y+60	; 0x3c
     dba:	7d ad       	ldd	r23, Y+61	; 0x3d
     dbc:	8e ad       	ldd	r24, Y+62	; 0x3e
     dbe:	9f ad       	ldd	r25, Y+63	; 0x3f
     dc0:	6d 97       	sbiw	r28, 0x1d	; 29
     dc2:	a6 01       	movw	r20, r12
     dc4:	95 01       	movw	r18, r10
     dc6:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     dca:	7b 01       	movw	r14, r22
     dcc:	8c 01       	movw	r16, r24
     dce:	6d 96       	adiw	r28, 0x1d	; 29
     dd0:	6c ad       	ldd	r22, Y+60	; 0x3c
     dd2:	7d ad       	ldd	r23, Y+61	; 0x3d
     dd4:	8e ad       	ldd	r24, Y+62	; 0x3e
     dd6:	9f ad       	ldd	r25, Y+63	; 0x3f
     dd8:	6d 97       	sbiw	r28, 0x1d	; 29
     dda:	a2 01       	movw	r20, r4
     ddc:	91 01       	movw	r18, r2
     dde:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
     de2:	5b 01       	movw	r10, r22
     de4:	6c 01       	movw	r12, r24
     de6:	a8 01       	movw	r20, r16
     de8:	97 01       	movw	r18, r14
     dea:	26 0d       	add	r18, r6
     dec:	37 1d       	adc	r19, r7
     dee:	48 1d       	adc	r20, r8
     df0:	59 1d       	adc	r21, r9
     df2:	69 96       	adiw	r28, 0x19	; 25
     df4:	6c ac       	ldd	r6, Y+60	; 0x3c
     df6:	7d ac       	ldd	r7, Y+61	; 0x3d
     df8:	8e ac       	ldd	r8, Y+62	; 0x3e
     dfa:	9f ac       	ldd	r9, Y+63	; 0x3f
     dfc:	69 97       	sbiw	r28, 0x19	; 25
     dfe:	c4 01       	movw	r24, r8
     e00:	aa 27       	eor	r26, r26
     e02:	bb 27       	eor	r27, r27
     e04:	28 0f       	add	r18, r24
     e06:	39 1f       	adc	r19, r25
     e08:	4a 1f       	adc	r20, r26
     e0a:	5b 1f       	adc	r21, r27
     e0c:	2e 15       	cp	r18, r14
     e0e:	3f 05       	cpc	r19, r15
     e10:	40 07       	cpc	r20, r16
     e12:	51 07       	cpc	r21, r17
     e14:	48 f4       	brcc	.+18     	; 0xe28 <__stack+0x9c9>
     e16:	e1 2c       	mov	r14, r1
     e18:	f1 2c       	mov	r15, r1
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	06 2f       	mov	r16, r22
     e1e:	11 2d       	mov	r17, r1
     e20:	ae 0c       	add	r10, r14
     e22:	bf 1c       	adc	r11, r15
     e24:	c0 1e       	adc	r12, r16
     e26:	d1 1e       	adc	r13, r17
     e28:	ca 01       	movw	r24, r20
     e2a:	aa 27       	eor	r26, r26
     e2c:	bb 27       	eor	r27, r27
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	6a 0d       	add	r22, r10
     e34:	7b 1d       	adc	r23, r11
     e36:	8c 1d       	adc	r24, r12
     e38:	9d 1d       	adc	r25, r13
     e3a:	69 8c       	ldd	r6, Y+25	; 0x19
     e3c:	7a 8c       	ldd	r7, Y+26	; 0x1a
     e3e:	8b 8c       	ldd	r8, Y+27	; 0x1b
     e40:	9c 8c       	ldd	r9, Y+28	; 0x1c
     e42:	66 16       	cp	r6, r22
     e44:	77 06       	cpc	r7, r23
     e46:	88 06       	cpc	r8, r24
     e48:	99 06       	cpc	r9, r25
     e4a:	40 f1       	brcs	.+80     	; 0xe9c <__stack+0xa3d>
     e4c:	66 15       	cp	r22, r6
     e4e:	77 05       	cpc	r23, r7
     e50:	88 05       	cpc	r24, r8
     e52:	99 05       	cpc	r25, r9
     e54:	09 f0       	breq	.+2      	; 0xe58 <__stack+0x9f9>
     e56:	43 c0       	rjmp	.+134    	; 0xede <__stack+0xa7f>
     e58:	d9 01       	movw	r26, r18
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	69 96       	adiw	r28, 0x19	; 25
     e60:	2c ad       	ldd	r18, Y+60	; 0x3c
     e62:	3d ad       	ldd	r19, Y+61	; 0x3d
     e64:	4e ad       	ldd	r20, Y+62	; 0x3e
     e66:	5f ad       	ldd	r21, Y+63	; 0x3f
     e68:	69 97       	sbiw	r28, 0x19	; 25
     e6a:	40 70       	andi	r20, 0x00	; 0
     e6c:	50 70       	andi	r21, 0x00	; 0
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	a4 1f       	adc	r26, r20
     e74:	b5 1f       	adc	r27, r21
     e76:	2d a5       	ldd	r18, Y+45	; 0x2d
     e78:	3e a5       	ldd	r19, Y+46	; 0x2e
     e7a:	4f a5       	ldd	r20, Y+47	; 0x2f
     e7c:	58 a9       	ldd	r21, Y+48	; 0x30
     e7e:	6e 96       	adiw	r28, 0x1e	; 30
     e80:	0f ac       	ldd	r0, Y+63	; 0x3f
     e82:	6e 97       	sbiw	r28, 0x1e	; 30
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <__stack+0xa2f>
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	44 1f       	adc	r20, r20
     e8c:	55 1f       	adc	r21, r21
     e8e:	0a 94       	dec	r0
     e90:	d2 f7       	brpl	.-12     	; 0xe86 <__stack+0xa27>
     e92:	28 17       	cp	r18, r24
     e94:	39 07       	cpc	r19, r25
     e96:	4a 07       	cpc	r20, r26
     e98:	5b 07       	cpc	r21, r27
     e9a:	08 f5       	brcc	.+66     	; 0xede <__stack+0xa7f>
     e9c:	09 a9       	ldd	r16, Y+49	; 0x31
     e9e:	1a a9       	ldd	r17, Y+50	; 0x32
     ea0:	2b a9       	ldd	r18, Y+51	; 0x33
     ea2:	3c a9       	ldd	r19, Y+52	; 0x34
     ea4:	01 50       	subi	r16, 0x01	; 1
     ea6:	10 40       	sbci	r17, 0x00	; 0
     ea8:	20 40       	sbci	r18, 0x00	; 0
     eaa:	30 40       	sbci	r19, 0x00	; 0
     eac:	09 ab       	std	Y+49, r16	; 0x31
     eae:	1a ab       	std	Y+50, r17	; 0x32
     eb0:	2b ab       	std	Y+51, r18	; 0x33
     eb2:	3c ab       	std	Y+52, r19	; 0x34
     eb4:	14 c0       	rjmp	.+40     	; 0xede <__stack+0xa7f>
     eb6:	66 24       	eor	r6, r6
     eb8:	77 24       	eor	r7, r7
     eba:	43 01       	movw	r8, r6
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	29 ab       	std	Y+49, r18	; 0x31
     ec6:	3a ab       	std	Y+50, r19	; 0x32
     ec8:	4b ab       	std	Y+51, r20	; 0x33
     eca:	5c ab       	std	Y+52, r21	; 0x34
     ecc:	0b c0       	rjmp	.+22     	; 0xee4 <__stack+0xa85>
     ece:	66 24       	eor	r6, r6
     ed0:	77 24       	eor	r7, r7
     ed2:	43 01       	movw	r8, r6
     ed4:	19 aa       	std	Y+49, r1	; 0x31
     ed6:	1a aa       	std	Y+50, r1	; 0x32
     ed8:	1b aa       	std	Y+51, r1	; 0x33
     eda:	1c aa       	std	Y+52, r1	; 0x34
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <__stack+0xa85>
     ede:	66 24       	eor	r6, r6
     ee0:	77 24       	eor	r7, r7
     ee2:	43 01       	movw	r8, r6
     ee4:	fe 01       	movw	r30, r28
     ee6:	71 96       	adiw	r30, 0x11	; 17
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	df 01       	movw	r26, r30
     eec:	1d 92       	st	X+, r1
     eee:	8a 95       	dec	r24
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__stack+0xa8d>
     ef2:	a9 a8       	ldd	r10, Y+49	; 0x31
     ef4:	ba a8       	ldd	r11, Y+50	; 0x32
     ef6:	cb a8       	ldd	r12, Y+51	; 0x33
     ef8:	dc a8       	ldd	r13, Y+52	; 0x34
     efa:	a9 8a       	std	Y+17, r10	; 0x11
     efc:	ba 8a       	std	Y+18, r11	; 0x12
     efe:	cb 8a       	std	Y+19, r12	; 0x13
     f00:	dc 8a       	std	Y+20, r13	; 0x14
     f02:	6d 8a       	std	Y+21, r6	; 0x15
     f04:	7e 8a       	std	Y+22, r7	; 0x16
     f06:	8f 8a       	std	Y+23, r8	; 0x17
     f08:	98 8e       	std	Y+24, r9	; 0x18
     f0a:	29 a9       	ldd	r18, Y+49	; 0x31
     f0c:	3a 89       	ldd	r19, Y+18	; 0x12
     f0e:	4b 89       	ldd	r20, Y+19	; 0x13
     f10:	5c 89       	ldd	r21, Y+20	; 0x14
     f12:	66 2d       	mov	r22, r6
     f14:	7e 89       	ldd	r23, Y+22	; 0x16
     f16:	8f 89       	ldd	r24, Y+23	; 0x17
     f18:	98 8d       	ldd	r25, Y+24	; 0x18
     f1a:	c2 5a       	subi	r28, 0xA2	; 162
     f1c:	df 4f       	sbci	r29, 0xFF	; 255
     f1e:	e2 e1       	ldi	r30, 0x12	; 18
     f20:	0c 94 b2 36 	jmp	0x6d64	; 0x6d64 <__epilogue_restores__>

00000f24 <__umoddi3>:
     f24:	ab e5       	ldi	r26, 0x5B	; 91
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e9       	ldi	r30, 0x98	; 152
     f2a:	f7 e0       	ldi	r31, 0x07	; 7
     f2c:	0c 94 96 36 	jmp	0x6d2c	; 0x6d2c <__prologue_saves__>
     f30:	a8 e0       	ldi	r26, 0x08	; 8
     f32:	4e 01       	movw	r8, r28
     f34:	08 94       	sec
     f36:	81 1c       	adc	r8, r1
     f38:	91 1c       	adc	r9, r1
     f3a:	f4 01       	movw	r30, r8
     f3c:	6a 2e       	mov	r6, r26
     f3e:	11 92       	st	Z+, r1
     f40:	6a 94       	dec	r6
     f42:	e9 f7       	brne	.-6      	; 0xf3e <__umoddi3+0x1a>
     f44:	29 83       	std	Y+1, r18	; 0x01
     f46:	3a 83       	std	Y+2, r19	; 0x02
     f48:	4b 83       	std	Y+3, r20	; 0x03
     f4a:	5c 83       	std	Y+4, r21	; 0x04
     f4c:	6d 83       	std	Y+5, r22	; 0x05
     f4e:	7e 83       	std	Y+6, r23	; 0x06
     f50:	8f 83       	std	Y+7, r24	; 0x07
     f52:	98 87       	std	Y+8, r25	; 0x08
     f54:	ce 01       	movw	r24, r28
     f56:	09 96       	adiw	r24, 0x09	; 9
     f58:	fc 01       	movw	r30, r24
     f5a:	11 92       	st	Z+, r1
     f5c:	aa 95       	dec	r26
     f5e:	e9 f7       	brne	.-6      	; 0xf5a <__umoddi3+0x36>
     f60:	a9 86       	std	Y+9, r10	; 0x09
     f62:	ba 86       	std	Y+10, r11	; 0x0a
     f64:	cb 86       	std	Y+11, r12	; 0x0b
     f66:	dc 86       	std	Y+12, r13	; 0x0c
     f68:	ed 86       	std	Y+13, r14	; 0x0d
     f6a:	fe 86       	std	Y+14, r15	; 0x0e
     f6c:	0f 87       	std	Y+15, r16	; 0x0f
     f6e:	18 8b       	std	Y+16, r17	; 0x10
     f70:	29 84       	ldd	r2, Y+9	; 0x09
     f72:	3a 84       	ldd	r3, Y+10	; 0x0a
     f74:	4b 84       	ldd	r4, Y+11	; 0x0b
     f76:	5c 84       	ldd	r5, Y+12	; 0x0c
     f78:	ad 84       	ldd	r10, Y+13	; 0x0d
     f7a:	be 84       	ldd	r11, Y+14	; 0x0e
     f7c:	cf 84       	ldd	r12, Y+15	; 0x0f
     f7e:	d8 88       	ldd	r13, Y+16	; 0x10
     f80:	29 81       	ldd	r18, Y+1	; 0x01
     f82:	3a 81       	ldd	r19, Y+2	; 0x02
     f84:	4b 81       	ldd	r20, Y+3	; 0x03
     f86:	5c 81       	ldd	r21, Y+4	; 0x04
     f88:	69 96       	adiw	r28, 0x19	; 25
     f8a:	2f af       	std	Y+63, r18	; 0x3f
     f8c:	69 97       	sbiw	r28, 0x19	; 25
     f8e:	6a 96       	adiw	r28, 0x1a	; 26
     f90:	3f af       	std	Y+63, r19	; 0x3f
     f92:	6a 97       	sbiw	r28, 0x1a	; 26
     f94:	6b 96       	adiw	r28, 0x1b	; 27
     f96:	4f af       	std	Y+63, r20	; 0x3f
     f98:	6b 97       	sbiw	r28, 0x1b	; 27
     f9a:	6c 96       	adiw	r28, 0x1c	; 28
     f9c:	5f af       	std	Y+63, r21	; 0x3f
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	6c 96       	adiw	r28, 0x1c	; 28
     fa2:	6c ac       	ldd	r6, Y+60	; 0x3c
     fa4:	7d ac       	ldd	r7, Y+61	; 0x3d
     fa6:	8e ac       	ldd	r8, Y+62	; 0x3e
     fa8:	9f ac       	ldd	r9, Y+63	; 0x3f
     faa:	6c 97       	sbiw	r28, 0x1c	; 28
     fac:	69 aa       	std	Y+49, r6	; 0x31
     fae:	7a aa       	std	Y+50, r7	; 0x32
     fb0:	8b aa       	std	Y+51, r8	; 0x33
     fb2:	9c aa       	std	Y+52, r9	; 0x34
     fb4:	6d 81       	ldd	r22, Y+5	; 0x05
     fb6:	7e 81       	ldd	r23, Y+6	; 0x06
     fb8:	8f 81       	ldd	r24, Y+7	; 0x07
     fba:	98 85       	ldd	r25, Y+8	; 0x08
     fbc:	3b 01       	movw	r6, r22
     fbe:	4c 01       	movw	r8, r24
     fc0:	6d aa       	std	Y+53, r6	; 0x35
     fc2:	7e aa       	std	Y+54, r7	; 0x36
     fc4:	8f aa       	std	Y+55, r8	; 0x37
     fc6:	98 ae       	std	Y+56, r9	; 0x38
     fc8:	a1 14       	cp	r10, r1
     fca:	b1 04       	cpc	r11, r1
     fcc:	c1 04       	cpc	r12, r1
     fce:	d1 04       	cpc	r13, r1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <__umoddi3+0xb0>
     fd2:	04 c3       	rjmp	.+1544   	; 0x15dc <__umoddi3+0x6b8>
     fd4:	62 14       	cp	r6, r2
     fd6:	73 04       	cpc	r7, r3
     fd8:	84 04       	cpc	r8, r4
     fda:	95 04       	cpc	r9, r5
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <__umoddi3+0xbc>
     fde:	00 c1       	rjmp	.+512    	; 0x11e0 <__umoddi3+0x2bc>
     fe0:	00 e0       	ldi	r16, 0x00	; 0
     fe2:	20 16       	cp	r2, r16
     fe4:	00 e0       	ldi	r16, 0x00	; 0
     fe6:	30 06       	cpc	r3, r16
     fe8:	01 e0       	ldi	r16, 0x01	; 1
     fea:	40 06       	cpc	r4, r16
     fec:	00 e0       	ldi	r16, 0x00	; 0
     fee:	50 06       	cpc	r5, r16
     ff0:	88 f4       	brcc	.+34     	; 0x1014 <__umoddi3+0xf0>
     ff2:	1f ef       	ldi	r17, 0xFF	; 255
     ff4:	21 16       	cp	r2, r17
     ff6:	31 04       	cpc	r3, r1
     ff8:	41 04       	cpc	r4, r1
     ffa:	51 04       	cpc	r5, r1
     ffc:	39 f0       	breq	.+14     	; 0x100c <__umoddi3+0xe8>
     ffe:	30 f0       	brcs	.+12     	; 0x100c <__umoddi3+0xe8>
    1000:	88 e0       	ldi	r24, 0x08	; 8
    1002:	e8 2e       	mov	r14, r24
    1004:	f1 2c       	mov	r15, r1
    1006:	01 2d       	mov	r16, r1
    1008:	11 2d       	mov	r17, r1
    100a:	18 c0       	rjmp	.+48     	; 0x103c <__umoddi3+0x118>
    100c:	ee 24       	eor	r14, r14
    100e:	ff 24       	eor	r15, r15
    1010:	87 01       	movw	r16, r14
    1012:	14 c0       	rjmp	.+40     	; 0x103c <__umoddi3+0x118>
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	24 16       	cp	r2, r20
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	34 06       	cpc	r3, r20
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	44 06       	cpc	r4, r20
    1020:	41 e0       	ldi	r20, 0x01	; 1
    1022:	54 06       	cpc	r5, r20
    1024:	30 f0       	brcs	.+12     	; 0x1032 <__umoddi3+0x10e>
    1026:	b8 e1       	ldi	r27, 0x18	; 24
    1028:	eb 2e       	mov	r14, r27
    102a:	f1 2c       	mov	r15, r1
    102c:	01 2d       	mov	r16, r1
    102e:	11 2d       	mov	r17, r1
    1030:	05 c0       	rjmp	.+10     	; 0x103c <__umoddi3+0x118>
    1032:	a0 e1       	ldi	r26, 0x10	; 16
    1034:	ea 2e       	mov	r14, r26
    1036:	f1 2c       	mov	r15, r1
    1038:	01 2d       	mov	r16, r1
    103a:	11 2d       	mov	r17, r1
    103c:	d2 01       	movw	r26, r4
    103e:	c1 01       	movw	r24, r2
    1040:	0e 2c       	mov	r0, r14
    1042:	04 c0       	rjmp	.+8      	; 0x104c <__umoddi3+0x128>
    1044:	b6 95       	lsr	r27
    1046:	a7 95       	ror	r26
    1048:	97 95       	ror	r25
    104a:	87 95       	ror	r24
    104c:	0a 94       	dec	r0
    104e:	d2 f7       	brpl	.-12     	; 0x1044 <__umoddi3+0x120>
    1050:	8a 58       	subi	r24, 0x8A	; 138
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	dc 01       	movw	r26, r24
    1056:	2c 91       	ld	r18, X
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a0 e0       	ldi	r26, 0x00	; 0
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	8e 19       	sub	r24, r14
    1062:	9f 09       	sbc	r25, r15
    1064:	a0 0b       	sbc	r26, r16
    1066:	b1 0b       	sbc	r27, r17
    1068:	5c 01       	movw	r10, r24
    106a:	6d 01       	movw	r12, r26
    106c:	a2 1a       	sub	r10, r18
    106e:	b1 08       	sbc	r11, r1
    1070:	c1 08       	sbc	r12, r1
    1072:	d1 08       	sbc	r13, r1
    1074:	a9 ae       	std	Y+57, r10	; 0x39
    1076:	ba ae       	std	Y+58, r11	; 0x3a
    1078:	cb ae       	std	Y+59, r12	; 0x3b
    107a:	dc ae       	std	Y+60, r13	; 0x3c
    107c:	a1 14       	cp	r10, r1
    107e:	b1 04       	cpc	r11, r1
    1080:	c1 04       	cpc	r12, r1
    1082:	d1 04       	cpc	r13, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <__umoddi3+0x164>
    1086:	3f c0       	rjmp	.+126    	; 0x1106 <__umoddi3+0x1e2>
    1088:	69 ad       	ldd	r22, Y+57	; 0x39
    108a:	06 2e       	mov	r0, r22
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <__umoddi3+0x172>
    108e:	22 0c       	add	r2, r2
    1090:	33 1c       	adc	r3, r3
    1092:	44 1c       	adc	r4, r4
    1094:	55 1c       	adc	r5, r5
    1096:	0a 94       	dec	r0
    1098:	d2 f7       	brpl	.-12     	; 0x108e <__umoddi3+0x16a>
    109a:	a4 01       	movw	r20, r8
    109c:	93 01       	movw	r18, r6
    109e:	06 2e       	mov	r0, r22
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <__umoddi3+0x186>
    10a2:	22 0f       	add	r18, r18
    10a4:	33 1f       	adc	r19, r19
    10a6:	44 1f       	adc	r20, r20
    10a8:	55 1f       	adc	r21, r21
    10aa:	0a 94       	dec	r0
    10ac:	d2 f7       	brpl	.-12     	; 0x10a2 <__umoddi3+0x17e>
    10ae:	80 e2       	ldi	r24, 0x20	; 32
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	8a 19       	sub	r24, r10
    10b4:	9b 09       	sbc	r25, r11
    10b6:	6c 96       	adiw	r28, 0x1c	; 28
    10b8:	cc ac       	ldd	r12, Y+60	; 0x3c
    10ba:	dd ac       	ldd	r13, Y+61	; 0x3d
    10bc:	ee ac       	ldd	r14, Y+62	; 0x3e
    10be:	ff ac       	ldd	r15, Y+63	; 0x3f
    10c0:	6c 97       	sbiw	r28, 0x1c	; 28
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <__umoddi3+0x1a8>
    10c4:	f6 94       	lsr	r15
    10c6:	e7 94       	ror	r14
    10c8:	d7 94       	ror	r13
    10ca:	c7 94       	ror	r12
    10cc:	8a 95       	dec	r24
    10ce:	d2 f7       	brpl	.-12     	; 0x10c4 <__umoddi3+0x1a0>
    10d0:	87 01       	movw	r16, r14
    10d2:	76 01       	movw	r14, r12
    10d4:	e2 2a       	or	r14, r18
    10d6:	f3 2a       	or	r15, r19
    10d8:	04 2b       	or	r16, r20
    10da:	15 2b       	or	r17, r21
    10dc:	ed aa       	std	Y+53, r14	; 0x35
    10de:	fe aa       	std	Y+54, r15	; 0x36
    10e0:	0f ab       	std	Y+55, r16	; 0x37
    10e2:	18 af       	std	Y+56, r17	; 0x38
    10e4:	6c 96       	adiw	r28, 0x1c	; 28
    10e6:	8c ad       	ldd	r24, Y+60	; 0x3c
    10e8:	9d ad       	ldd	r25, Y+61	; 0x3d
    10ea:	ae ad       	ldd	r26, Y+62	; 0x3e
    10ec:	bf ad       	ldd	r27, Y+63	; 0x3f
    10ee:	6c 97       	sbiw	r28, 0x1c	; 28
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <__umoddi3+0x1d6>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	aa 1f       	adc	r26, r26
    10f8:	bb 1f       	adc	r27, r27
    10fa:	6a 95       	dec	r22
    10fc:	d2 f7       	brpl	.-12     	; 0x10f2 <__umoddi3+0x1ce>
    10fe:	89 ab       	std	Y+49, r24	; 0x31
    1100:	9a ab       	std	Y+50, r25	; 0x32
    1102:	ab ab       	std	Y+51, r26	; 0x33
    1104:	bc ab       	std	Y+52, r27	; 0x34
    1106:	32 01       	movw	r6, r4
    1108:	88 24       	eor	r8, r8
    110a:	99 24       	eor	r9, r9
    110c:	b2 01       	movw	r22, r4
    110e:	a1 01       	movw	r20, r2
    1110:	60 70       	andi	r22, 0x00	; 0
    1112:	70 70       	andi	r23, 0x00	; 0
    1114:	21 96       	adiw	r28, 0x01	; 1
    1116:	4c af       	std	Y+60, r20	; 0x3c
    1118:	5d af       	std	Y+61, r21	; 0x3d
    111a:	6e af       	std	Y+62, r22	; 0x3e
    111c:	7f af       	std	Y+63, r23	; 0x3f
    111e:	21 97       	sbiw	r28, 0x01	; 1
    1120:	6d a9       	ldd	r22, Y+53	; 0x35
    1122:	7e a9       	ldd	r23, Y+54	; 0x36
    1124:	8f a9       	ldd	r24, Y+55	; 0x37
    1126:	98 ad       	ldd	r25, Y+56	; 0x38
    1128:	a4 01       	movw	r20, r8
    112a:	93 01       	movw	r18, r6
    112c:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    1130:	7b 01       	movw	r14, r22
    1132:	8c 01       	movw	r16, r24
    1134:	6d a9       	ldd	r22, Y+53	; 0x35
    1136:	7e a9       	ldd	r23, Y+54	; 0x36
    1138:	8f a9       	ldd	r24, Y+55	; 0x37
    113a:	98 ad       	ldd	r25, Y+56	; 0x38
    113c:	a4 01       	movw	r20, r8
    113e:	93 01       	movw	r18, r6
    1140:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    1144:	ca 01       	movw	r24, r20
    1146:	b9 01       	movw	r22, r18
    1148:	21 96       	adiw	r28, 0x01	; 1
    114a:	2c ad       	ldd	r18, Y+60	; 0x3c
    114c:	3d ad       	ldd	r19, Y+61	; 0x3d
    114e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1150:	5f ad       	ldd	r21, Y+63	; 0x3f
    1152:	21 97       	sbiw	r28, 0x01	; 1
    1154:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	87 01       	movw	r16, r14
    115e:	ff 24       	eor	r15, r15
    1160:	ee 24       	eor	r14, r14
    1162:	a9 a8       	ldd	r10, Y+49	; 0x31
    1164:	ba a8       	ldd	r11, Y+50	; 0x32
    1166:	cb a8       	ldd	r12, Y+51	; 0x33
    1168:	dc a8       	ldd	r13, Y+52	; 0x34
    116a:	c6 01       	movw	r24, r12
    116c:	aa 27       	eor	r26, r26
    116e:	bb 27       	eor	r27, r27
    1170:	57 01       	movw	r10, r14
    1172:	68 01       	movw	r12, r16
    1174:	a8 2a       	or	r10, r24
    1176:	b9 2a       	or	r11, r25
    1178:	ca 2a       	or	r12, r26
    117a:	db 2a       	or	r13, r27
    117c:	a2 16       	cp	r10, r18
    117e:	b3 06       	cpc	r11, r19
    1180:	c4 06       	cpc	r12, r20
    1182:	d5 06       	cpc	r13, r21
    1184:	90 f4       	brcc	.+36     	; 0x11aa <__umoddi3+0x286>
    1186:	a2 0c       	add	r10, r2
    1188:	b3 1c       	adc	r11, r3
    118a:	c4 1c       	adc	r12, r4
    118c:	d5 1c       	adc	r13, r5
    118e:	a2 14       	cp	r10, r2
    1190:	b3 04       	cpc	r11, r3
    1192:	c4 04       	cpc	r12, r4
    1194:	d5 04       	cpc	r13, r5
    1196:	48 f0       	brcs	.+18     	; 0x11aa <__umoddi3+0x286>
    1198:	a2 16       	cp	r10, r18
    119a:	b3 06       	cpc	r11, r19
    119c:	c4 06       	cpc	r12, r20
    119e:	d5 06       	cpc	r13, r21
    11a0:	20 f4       	brcc	.+8      	; 0x11aa <__umoddi3+0x286>
    11a2:	a2 0c       	add	r10, r2
    11a4:	b3 1c       	adc	r11, r3
    11a6:	c4 1c       	adc	r12, r4
    11a8:	d5 1c       	adc	r13, r5
    11aa:	a2 1a       	sub	r10, r18
    11ac:	b3 0a       	sbc	r11, r19
    11ae:	c4 0a       	sbc	r12, r20
    11b0:	d5 0a       	sbc	r13, r21
    11b2:	c6 01       	movw	r24, r12
    11b4:	b5 01       	movw	r22, r10
    11b6:	a4 01       	movw	r20, r8
    11b8:	93 01       	movw	r18, r6
    11ba:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    11be:	7b 01       	movw	r14, r22
    11c0:	8c 01       	movw	r16, r24
    11c2:	c6 01       	movw	r24, r12
    11c4:	b5 01       	movw	r22, r10
    11c6:	a4 01       	movw	r20, r8
    11c8:	93 01       	movw	r18, r6
    11ca:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    11ce:	ca 01       	movw	r24, r20
    11d0:	b9 01       	movw	r22, r18
    11d2:	21 96       	adiw	r28, 0x01	; 1
    11d4:	2c ad       	ldd	r18, Y+60	; 0x3c
    11d6:	3d ad       	ldd	r19, Y+61	; 0x3d
    11d8:	4e ad       	ldd	r20, Y+62	; 0x3e
    11da:	5f ad       	ldd	r21, Y+63	; 0x3f
    11dc:	21 97       	sbiw	r28, 0x01	; 1
    11de:	ba c1       	rjmp	.+884    	; 0x1554 <__umoddi3+0x630>
    11e0:	21 14       	cp	r2, r1
    11e2:	31 04       	cpc	r3, r1
    11e4:	41 04       	cpc	r4, r1
    11e6:	51 04       	cpc	r5, r1
    11e8:	71 f4       	brne	.+28     	; 0x1206 <__umoddi3+0x2e2>
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    11fe:	c9 01       	movw	r24, r18
    1200:	da 01       	movw	r26, r20
    1202:	1c 01       	movw	r2, r24
    1204:	2d 01       	movw	r4, r26
    1206:	00 e0       	ldi	r16, 0x00	; 0
    1208:	20 16       	cp	r2, r16
    120a:	00 e0       	ldi	r16, 0x00	; 0
    120c:	30 06       	cpc	r3, r16
    120e:	01 e0       	ldi	r16, 0x01	; 1
    1210:	40 06       	cpc	r4, r16
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	50 06       	cpc	r5, r16
    1216:	88 f4       	brcc	.+34     	; 0x123a <__umoddi3+0x316>
    1218:	1f ef       	ldi	r17, 0xFF	; 255
    121a:	21 16       	cp	r2, r17
    121c:	31 04       	cpc	r3, r1
    121e:	41 04       	cpc	r4, r1
    1220:	51 04       	cpc	r5, r1
    1222:	39 f0       	breq	.+14     	; 0x1232 <__umoddi3+0x30e>
    1224:	30 f0       	brcs	.+12     	; 0x1232 <__umoddi3+0x30e>
    1226:	68 e0       	ldi	r22, 0x08	; 8
    1228:	e6 2e       	mov	r14, r22
    122a:	f1 2c       	mov	r15, r1
    122c:	01 2d       	mov	r16, r1
    122e:	11 2d       	mov	r17, r1
    1230:	18 c0       	rjmp	.+48     	; 0x1262 <__umoddi3+0x33e>
    1232:	ee 24       	eor	r14, r14
    1234:	ff 24       	eor	r15, r15
    1236:	87 01       	movw	r16, r14
    1238:	14 c0       	rjmp	.+40     	; 0x1262 <__umoddi3+0x33e>
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	24 16       	cp	r2, r20
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	34 06       	cpc	r3, r20
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	44 06       	cpc	r4, r20
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	54 06       	cpc	r5, r20
    124a:	30 f0       	brcs	.+12     	; 0x1258 <__umoddi3+0x334>
    124c:	58 e1       	ldi	r21, 0x18	; 24
    124e:	e5 2e       	mov	r14, r21
    1250:	f1 2c       	mov	r15, r1
    1252:	01 2d       	mov	r16, r1
    1254:	11 2d       	mov	r17, r1
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <__umoddi3+0x33e>
    1258:	40 e1       	ldi	r20, 0x10	; 16
    125a:	e4 2e       	mov	r14, r20
    125c:	f1 2c       	mov	r15, r1
    125e:	01 2d       	mov	r16, r1
    1260:	11 2d       	mov	r17, r1
    1262:	d2 01       	movw	r26, r4
    1264:	c1 01       	movw	r24, r2
    1266:	0e 2c       	mov	r0, r14
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <__umoddi3+0x34e>
    126a:	b6 95       	lsr	r27
    126c:	a7 95       	ror	r26
    126e:	97 95       	ror	r25
    1270:	87 95       	ror	r24
    1272:	0a 94       	dec	r0
    1274:	d2 f7       	brpl	.-12     	; 0x126a <__umoddi3+0x346>
    1276:	8a 58       	subi	r24, 0x8A	; 138
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	dc 01       	movw	r26, r24
    127c:	2c 91       	ld	r18, X
    127e:	30 e2       	ldi	r19, 0x20	; 32
    1280:	a3 2e       	mov	r10, r19
    1282:	b1 2c       	mov	r11, r1
    1284:	c1 2c       	mov	r12, r1
    1286:	d1 2c       	mov	r13, r1
    1288:	d6 01       	movw	r26, r12
    128a:	c5 01       	movw	r24, r10
    128c:	8e 19       	sub	r24, r14
    128e:	9f 09       	sbc	r25, r15
    1290:	a0 0b       	sbc	r26, r16
    1292:	b1 0b       	sbc	r27, r17
    1294:	7c 01       	movw	r14, r24
    1296:	8d 01       	movw	r16, r26
    1298:	e2 1a       	sub	r14, r18
    129a:	f1 08       	sbc	r15, r1
    129c:	01 09       	sbc	r16, r1
    129e:	11 09       	sbc	r17, r1
    12a0:	e9 ae       	std	Y+57, r14	; 0x39
    12a2:	fa ae       	std	Y+58, r15	; 0x3a
    12a4:	0b af       	std	Y+59, r16	; 0x3b
    12a6:	1c af       	std	Y+60, r17	; 0x3c
    12a8:	e1 14       	cp	r14, r1
    12aa:	f1 04       	cpc	r15, r1
    12ac:	01 05       	cpc	r16, r1
    12ae:	11 05       	cpc	r17, r1
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <__umoddi3+0x39c>
    12b2:	64 01       	movw	r12, r8
    12b4:	53 01       	movw	r10, r6
    12b6:	a2 18       	sub	r10, r2
    12b8:	b3 08       	sbc	r11, r3
    12ba:	c4 08       	sbc	r12, r4
    12bc:	d5 08       	sbc	r13, r5
    12be:	e2 c0       	rjmp	.+452    	; 0x1484 <__umoddi3+0x560>
    12c0:	f9 ac       	ldd	r15, Y+57	; 0x39
    12c2:	68 96       	adiw	r28, 0x18	; 24
    12c4:	ff ae       	std	Y+63, r15	; 0x3f
    12c6:	68 97       	sbiw	r28, 0x18	; 24
    12c8:	0f 2c       	mov	r0, r15
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <__umoddi3+0x3b0>
    12cc:	22 0c       	add	r2, r2
    12ce:	33 1c       	adc	r3, r3
    12d0:	44 1c       	adc	r4, r4
    12d2:	55 1c       	adc	r5, r5
    12d4:	0a 94       	dec	r0
    12d6:	d2 f7       	brpl	.-12     	; 0x12cc <__umoddi3+0x3a8>
    12d8:	8a 2d       	mov	r24, r10
    12da:	8f 19       	sub	r24, r15
    12dc:	64 01       	movw	r12, r8
    12de:	53 01       	movw	r10, r6
    12e0:	08 2e       	mov	r0, r24
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <__umoddi3+0x3c8>
    12e4:	d6 94       	lsr	r13
    12e6:	c7 94       	ror	r12
    12e8:	b7 94       	ror	r11
    12ea:	a7 94       	ror	r10
    12ec:	0a 94       	dec	r0
    12ee:	d2 f7       	brpl	.-12     	; 0x12e4 <__umoddi3+0x3c0>
    12f0:	a4 01       	movw	r20, r8
    12f2:	93 01       	movw	r18, r6
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <__umoddi3+0x3da>
    12f6:	22 0f       	add	r18, r18
    12f8:	33 1f       	adc	r19, r19
    12fa:	44 1f       	adc	r20, r20
    12fc:	55 1f       	adc	r21, r21
    12fe:	fa 94       	dec	r15
    1300:	d2 f7       	brpl	.-12     	; 0x12f6 <__umoddi3+0x3d2>
    1302:	6c 96       	adiw	r28, 0x1c	; 28
    1304:	6c ac       	ldd	r6, Y+60	; 0x3c
    1306:	7d ac       	ldd	r7, Y+61	; 0x3d
    1308:	8e ac       	ldd	r8, Y+62	; 0x3e
    130a:	9f ac       	ldd	r9, Y+63	; 0x3f
    130c:	6c 97       	sbiw	r28, 0x1c	; 28
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__umoddi3+0x3f4>
    1310:	96 94       	lsr	r9
    1312:	87 94       	ror	r8
    1314:	77 94       	ror	r7
    1316:	67 94       	ror	r6
    1318:	8a 95       	dec	r24
    131a:	d2 f7       	brpl	.-12     	; 0x1310 <__umoddi3+0x3ec>
    131c:	84 01       	movw	r16, r8
    131e:	73 01       	movw	r14, r6
    1320:	e2 2a       	or	r14, r18
    1322:	f3 2a       	or	r15, r19
    1324:	04 2b       	or	r16, r20
    1326:	15 2b       	or	r17, r21
    1328:	ed a6       	std	Y+45, r14	; 0x2d
    132a:	fe a6       	std	Y+46, r15	; 0x2e
    132c:	0f a7       	std	Y+47, r16	; 0x2f
    132e:	18 ab       	std	Y+48, r17	; 0x30
    1330:	32 01       	movw	r6, r4
    1332:	88 24       	eor	r8, r8
    1334:	99 24       	eor	r9, r9
    1336:	b2 01       	movw	r22, r4
    1338:	a1 01       	movw	r20, r2
    133a:	60 70       	andi	r22, 0x00	; 0
    133c:	70 70       	andi	r23, 0x00	; 0
    133e:	25 96       	adiw	r28, 0x05	; 5
    1340:	4c af       	std	Y+60, r20	; 0x3c
    1342:	5d af       	std	Y+61, r21	; 0x3d
    1344:	6e af       	std	Y+62, r22	; 0x3e
    1346:	7f af       	std	Y+63, r23	; 0x3f
    1348:	25 97       	sbiw	r28, 0x05	; 5
    134a:	c6 01       	movw	r24, r12
    134c:	b5 01       	movw	r22, r10
    134e:	a4 01       	movw	r20, r8
    1350:	93 01       	movw	r18, r6
    1352:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    1356:	7b 01       	movw	r14, r22
    1358:	8c 01       	movw	r16, r24
    135a:	c6 01       	movw	r24, r12
    135c:	b5 01       	movw	r22, r10
    135e:	a4 01       	movw	r20, r8
    1360:	93 01       	movw	r18, r6
    1362:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    1366:	ca 01       	movw	r24, r20
    1368:	b9 01       	movw	r22, r18
    136a:	25 96       	adiw	r28, 0x05	; 5
    136c:	2c ad       	ldd	r18, Y+60	; 0x3c
    136e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1370:	4e ad       	ldd	r20, Y+62	; 0x3e
    1372:	5f ad       	ldd	r21, Y+63	; 0x3f
    1374:	25 97       	sbiw	r28, 0x05	; 5
    1376:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    137a:	9b 01       	movw	r18, r22
    137c:	ac 01       	movw	r20, r24
    137e:	87 01       	movw	r16, r14
    1380:	ff 24       	eor	r15, r15
    1382:	ee 24       	eor	r14, r14
    1384:	ad a4       	ldd	r10, Y+45	; 0x2d
    1386:	be a4       	ldd	r11, Y+46	; 0x2e
    1388:	cf a4       	ldd	r12, Y+47	; 0x2f
    138a:	d8 a8       	ldd	r13, Y+48	; 0x30
    138c:	c6 01       	movw	r24, r12
    138e:	aa 27       	eor	r26, r26
    1390:	bb 27       	eor	r27, r27
    1392:	5c 01       	movw	r10, r24
    1394:	6d 01       	movw	r12, r26
    1396:	ae 28       	or	r10, r14
    1398:	bf 28       	or	r11, r15
    139a:	c0 2a       	or	r12, r16
    139c:	d1 2a       	or	r13, r17
    139e:	a2 16       	cp	r10, r18
    13a0:	b3 06       	cpc	r11, r19
    13a2:	c4 06       	cpc	r12, r20
    13a4:	d5 06       	cpc	r13, r21
    13a6:	90 f4       	brcc	.+36     	; 0x13cc <__umoddi3+0x4a8>
    13a8:	a2 0c       	add	r10, r2
    13aa:	b3 1c       	adc	r11, r3
    13ac:	c4 1c       	adc	r12, r4
    13ae:	d5 1c       	adc	r13, r5
    13b0:	a2 14       	cp	r10, r2
    13b2:	b3 04       	cpc	r11, r3
    13b4:	c4 04       	cpc	r12, r4
    13b6:	d5 04       	cpc	r13, r5
    13b8:	48 f0       	brcs	.+18     	; 0x13cc <__umoddi3+0x4a8>
    13ba:	a2 16       	cp	r10, r18
    13bc:	b3 06       	cpc	r11, r19
    13be:	c4 06       	cpc	r12, r20
    13c0:	d5 06       	cpc	r13, r21
    13c2:	20 f4       	brcc	.+8      	; 0x13cc <__umoddi3+0x4a8>
    13c4:	a2 0c       	add	r10, r2
    13c6:	b3 1c       	adc	r11, r3
    13c8:	c4 1c       	adc	r12, r4
    13ca:	d5 1c       	adc	r13, r5
    13cc:	a2 1a       	sub	r10, r18
    13ce:	b3 0a       	sbc	r11, r19
    13d0:	c4 0a       	sbc	r12, r20
    13d2:	d5 0a       	sbc	r13, r21
    13d4:	c6 01       	movw	r24, r12
    13d6:	b5 01       	movw	r22, r10
    13d8:	a4 01       	movw	r20, r8
    13da:	93 01       	movw	r18, r6
    13dc:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    13e0:	7b 01       	movw	r14, r22
    13e2:	8c 01       	movw	r16, r24
    13e4:	c6 01       	movw	r24, r12
    13e6:	b5 01       	movw	r22, r10
    13e8:	a4 01       	movw	r20, r8
    13ea:	93 01       	movw	r18, r6
    13ec:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    13f0:	ca 01       	movw	r24, r20
    13f2:	b9 01       	movw	r22, r18
    13f4:	25 96       	adiw	r28, 0x05	; 5
    13f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    13f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    13fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    13fe:	25 97       	sbiw	r28, 0x05	; 5
    1400:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	87 01       	movw	r16, r14
    140a:	ff 24       	eor	r15, r15
    140c:	ee 24       	eor	r14, r14
    140e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1410:	9e a5       	ldd	r25, Y+46	; 0x2e
    1412:	af a5       	ldd	r26, Y+47	; 0x2f
    1414:	b8 a9       	ldd	r27, Y+48	; 0x30
    1416:	a0 70       	andi	r26, 0x00	; 0
    1418:	b0 70       	andi	r27, 0x00	; 0
    141a:	57 01       	movw	r10, r14
    141c:	68 01       	movw	r12, r16
    141e:	a8 2a       	or	r10, r24
    1420:	b9 2a       	or	r11, r25
    1422:	ca 2a       	or	r12, r26
    1424:	db 2a       	or	r13, r27
    1426:	a2 16       	cp	r10, r18
    1428:	b3 06       	cpc	r11, r19
    142a:	c4 06       	cpc	r12, r20
    142c:	d5 06       	cpc	r13, r21
    142e:	90 f4       	brcc	.+36     	; 0x1454 <__umoddi3+0x530>
    1430:	a2 0c       	add	r10, r2
    1432:	b3 1c       	adc	r11, r3
    1434:	c4 1c       	adc	r12, r4
    1436:	d5 1c       	adc	r13, r5
    1438:	a2 14       	cp	r10, r2
    143a:	b3 04       	cpc	r11, r3
    143c:	c4 04       	cpc	r12, r4
    143e:	d5 04       	cpc	r13, r5
    1440:	48 f0       	brcs	.+18     	; 0x1454 <__umoddi3+0x530>
    1442:	a2 16       	cp	r10, r18
    1444:	b3 06       	cpc	r11, r19
    1446:	c4 06       	cpc	r12, r20
    1448:	d5 06       	cpc	r13, r21
    144a:	20 f4       	brcc	.+8      	; 0x1454 <__umoddi3+0x530>
    144c:	a2 0c       	add	r10, r2
    144e:	b3 1c       	adc	r11, r3
    1450:	c4 1c       	adc	r12, r4
    1452:	d5 1c       	adc	r13, r5
    1454:	6c 96       	adiw	r28, 0x1c	; 28
    1456:	ec ac       	ldd	r14, Y+60	; 0x3c
    1458:	fd ac       	ldd	r15, Y+61	; 0x3d
    145a:	0e ad       	ldd	r16, Y+62	; 0x3e
    145c:	1f ad       	ldd	r17, Y+63	; 0x3f
    145e:	6c 97       	sbiw	r28, 0x1c	; 28
    1460:	68 96       	adiw	r28, 0x18	; 24
    1462:	0f ac       	ldd	r0, Y+63	; 0x3f
    1464:	68 97       	sbiw	r28, 0x18	; 24
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <__umoddi3+0x54c>
    1468:	ee 0c       	add	r14, r14
    146a:	ff 1c       	adc	r15, r15
    146c:	00 1f       	adc	r16, r16
    146e:	11 1f       	adc	r17, r17
    1470:	0a 94       	dec	r0
    1472:	d2 f7       	brpl	.-12     	; 0x1468 <__umoddi3+0x544>
    1474:	e9 aa       	std	Y+49, r14	; 0x31
    1476:	fa aa       	std	Y+50, r15	; 0x32
    1478:	0b ab       	std	Y+51, r16	; 0x33
    147a:	1c ab       	std	Y+52, r17	; 0x34
    147c:	a2 1a       	sub	r10, r18
    147e:	b3 0a       	sbc	r11, r19
    1480:	c4 0a       	sbc	r12, r20
    1482:	d5 0a       	sbc	r13, r21
    1484:	32 01       	movw	r6, r4
    1486:	88 24       	eor	r8, r8
    1488:	99 24       	eor	r9, r9
    148a:	b2 01       	movw	r22, r4
    148c:	a1 01       	movw	r20, r2
    148e:	60 70       	andi	r22, 0x00	; 0
    1490:	70 70       	andi	r23, 0x00	; 0
    1492:	29 96       	adiw	r28, 0x09	; 9
    1494:	4c af       	std	Y+60, r20	; 0x3c
    1496:	5d af       	std	Y+61, r21	; 0x3d
    1498:	6e af       	std	Y+62, r22	; 0x3e
    149a:	7f af       	std	Y+63, r23	; 0x3f
    149c:	29 97       	sbiw	r28, 0x09	; 9
    149e:	c6 01       	movw	r24, r12
    14a0:	b5 01       	movw	r22, r10
    14a2:	a4 01       	movw	r20, r8
    14a4:	93 01       	movw	r18, r6
    14a6:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    14aa:	7b 01       	movw	r14, r22
    14ac:	8c 01       	movw	r16, r24
    14ae:	c6 01       	movw	r24, r12
    14b0:	b5 01       	movw	r22, r10
    14b2:	a4 01       	movw	r20, r8
    14b4:	93 01       	movw	r18, r6
    14b6:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    14ba:	ca 01       	movw	r24, r20
    14bc:	b9 01       	movw	r22, r18
    14be:	29 96       	adiw	r28, 0x09	; 9
    14c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    14c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    14c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    14c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    14c8:	29 97       	sbiw	r28, 0x09	; 9
    14ca:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    14ce:	9b 01       	movw	r18, r22
    14d0:	ac 01       	movw	r20, r24
    14d2:	87 01       	movw	r16, r14
    14d4:	ff 24       	eor	r15, r15
    14d6:	ee 24       	eor	r14, r14
    14d8:	a9 a8       	ldd	r10, Y+49	; 0x31
    14da:	ba a8       	ldd	r11, Y+50	; 0x32
    14dc:	cb a8       	ldd	r12, Y+51	; 0x33
    14de:	dc a8       	ldd	r13, Y+52	; 0x34
    14e0:	c6 01       	movw	r24, r12
    14e2:	aa 27       	eor	r26, r26
    14e4:	bb 27       	eor	r27, r27
    14e6:	57 01       	movw	r10, r14
    14e8:	68 01       	movw	r12, r16
    14ea:	a8 2a       	or	r10, r24
    14ec:	b9 2a       	or	r11, r25
    14ee:	ca 2a       	or	r12, r26
    14f0:	db 2a       	or	r13, r27
    14f2:	a2 16       	cp	r10, r18
    14f4:	b3 06       	cpc	r11, r19
    14f6:	c4 06       	cpc	r12, r20
    14f8:	d5 06       	cpc	r13, r21
    14fa:	90 f4       	brcc	.+36     	; 0x1520 <__umoddi3+0x5fc>
    14fc:	a2 0c       	add	r10, r2
    14fe:	b3 1c       	adc	r11, r3
    1500:	c4 1c       	adc	r12, r4
    1502:	d5 1c       	adc	r13, r5
    1504:	a2 14       	cp	r10, r2
    1506:	b3 04       	cpc	r11, r3
    1508:	c4 04       	cpc	r12, r4
    150a:	d5 04       	cpc	r13, r5
    150c:	48 f0       	brcs	.+18     	; 0x1520 <__umoddi3+0x5fc>
    150e:	a2 16       	cp	r10, r18
    1510:	b3 06       	cpc	r11, r19
    1512:	c4 06       	cpc	r12, r20
    1514:	d5 06       	cpc	r13, r21
    1516:	20 f4       	brcc	.+8      	; 0x1520 <__umoddi3+0x5fc>
    1518:	a2 0c       	add	r10, r2
    151a:	b3 1c       	adc	r11, r3
    151c:	c4 1c       	adc	r12, r4
    151e:	d5 1c       	adc	r13, r5
    1520:	a2 1a       	sub	r10, r18
    1522:	b3 0a       	sbc	r11, r19
    1524:	c4 0a       	sbc	r12, r20
    1526:	d5 0a       	sbc	r13, r21
    1528:	c6 01       	movw	r24, r12
    152a:	b5 01       	movw	r22, r10
    152c:	a4 01       	movw	r20, r8
    152e:	93 01       	movw	r18, r6
    1530:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    1534:	7b 01       	movw	r14, r22
    1536:	8c 01       	movw	r16, r24
    1538:	c6 01       	movw	r24, r12
    153a:	b5 01       	movw	r22, r10
    153c:	a4 01       	movw	r20, r8
    153e:	93 01       	movw	r18, r6
    1540:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    1544:	ca 01       	movw	r24, r20
    1546:	b9 01       	movw	r22, r18
    1548:	29 96       	adiw	r28, 0x09	; 9
    154a:	2c ad       	ldd	r18, Y+60	; 0x3c
    154c:	3d ad       	ldd	r19, Y+61	; 0x3d
    154e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1550:	5f ad       	ldd	r21, Y+63	; 0x3f
    1552:	29 97       	sbiw	r28, 0x09	; 9
    1554:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    1558:	9b 01       	movw	r18, r22
    155a:	ac 01       	movw	r20, r24
    155c:	87 01       	movw	r16, r14
    155e:	ff 24       	eor	r15, r15
    1560:	ee 24       	eor	r14, r14
    1562:	89 a9       	ldd	r24, Y+49	; 0x31
    1564:	9a a9       	ldd	r25, Y+50	; 0x32
    1566:	ab a9       	ldd	r26, Y+51	; 0x33
    1568:	bc a9       	ldd	r27, Y+52	; 0x34
    156a:	a0 70       	andi	r26, 0x00	; 0
    156c:	b0 70       	andi	r27, 0x00	; 0
    156e:	e8 2a       	or	r14, r24
    1570:	f9 2a       	or	r15, r25
    1572:	0a 2b       	or	r16, r26
    1574:	1b 2b       	or	r17, r27
    1576:	e2 16       	cp	r14, r18
    1578:	f3 06       	cpc	r15, r19
    157a:	04 07       	cpc	r16, r20
    157c:	15 07       	cpc	r17, r21
    157e:	90 f4       	brcc	.+36     	; 0x15a4 <__umoddi3+0x680>
    1580:	e2 0c       	add	r14, r2
    1582:	f3 1c       	adc	r15, r3
    1584:	04 1d       	adc	r16, r4
    1586:	15 1d       	adc	r17, r5
    1588:	e2 14       	cp	r14, r2
    158a:	f3 04       	cpc	r15, r3
    158c:	04 05       	cpc	r16, r4
    158e:	15 05       	cpc	r17, r5
    1590:	48 f0       	brcs	.+18     	; 0x15a4 <__umoddi3+0x680>
    1592:	e2 16       	cp	r14, r18
    1594:	f3 06       	cpc	r15, r19
    1596:	04 07       	cpc	r16, r20
    1598:	15 07       	cpc	r17, r21
    159a:	20 f4       	brcc	.+8      	; 0x15a4 <__umoddi3+0x680>
    159c:	e2 0c       	add	r14, r2
    159e:	f3 1c       	adc	r15, r3
    15a0:	04 1d       	adc	r16, r4
    15a2:	15 1d       	adc	r17, r5
    15a4:	e2 1a       	sub	r14, r18
    15a6:	f3 0a       	sbc	r15, r19
    15a8:	04 0b       	sbc	r16, r20
    15aa:	15 0b       	sbc	r17, r21
    15ac:	d8 01       	movw	r26, r16
    15ae:	c7 01       	movw	r24, r14
    15b0:	09 ac       	ldd	r0, Y+57	; 0x39
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <__umoddi3+0x698>
    15b4:	b6 95       	lsr	r27
    15b6:	a7 95       	ror	r26
    15b8:	97 95       	ror	r25
    15ba:	87 95       	ror	r24
    15bc:	0a 94       	dec	r0
    15be:	d2 f7       	brpl	.-12     	; 0x15b4 <__umoddi3+0x690>
    15c0:	89 8b       	std	Y+17, r24	; 0x11
    15c2:	9a 8b       	std	Y+18, r25	; 0x12
    15c4:	ab 8b       	std	Y+19, r26	; 0x13
    15c6:	bc 8b       	std	Y+20, r27	; 0x14
    15c8:	1d 8a       	std	Y+21, r1	; 0x15
    15ca:	1e 8a       	std	Y+22, r1	; 0x16
    15cc:	1f 8a       	std	Y+23, r1	; 0x17
    15ce:	18 8e       	std	Y+24, r1	; 0x18
    15d0:	28 2f       	mov	r18, r24
    15d2:	3a 89       	ldd	r19, Y+18	; 0x12
    15d4:	4b 89       	ldd	r20, Y+19	; 0x13
    15d6:	5c 89       	ldd	r21, Y+20	; 0x14
    15d8:	6d 89       	ldd	r22, Y+21	; 0x15
    15da:	0c c3       	rjmp	.+1560   	; 0x1bf4 <__umoddi3+0xcd0>
    15dc:	6a 14       	cp	r6, r10
    15de:	7b 04       	cpc	r7, r11
    15e0:	8c 04       	cpc	r8, r12
    15e2:	9d 04       	cpc	r9, r13
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <__umoddi3+0x6c4>
    15e6:	09 c3       	rjmp	.+1554   	; 0x1bfa <__umoddi3+0xcd6>
    15e8:	00 e0       	ldi	r16, 0x00	; 0
    15ea:	a0 16       	cp	r10, r16
    15ec:	00 e0       	ldi	r16, 0x00	; 0
    15ee:	b0 06       	cpc	r11, r16
    15f0:	01 e0       	ldi	r16, 0x01	; 1
    15f2:	c0 06       	cpc	r12, r16
    15f4:	00 e0       	ldi	r16, 0x00	; 0
    15f6:	d0 06       	cpc	r13, r16
    15f8:	88 f4       	brcc	.+34     	; 0x161c <__umoddi3+0x6f8>
    15fa:	1f ef       	ldi	r17, 0xFF	; 255
    15fc:	a1 16       	cp	r10, r17
    15fe:	b1 04       	cpc	r11, r1
    1600:	c1 04       	cpc	r12, r1
    1602:	d1 04       	cpc	r13, r1
    1604:	39 f0       	breq	.+14     	; 0x1614 <__umoddi3+0x6f0>
    1606:	30 f0       	brcs	.+12     	; 0x1614 <__umoddi3+0x6f0>
    1608:	28 e0       	ldi	r18, 0x08	; 8
    160a:	e2 2e       	mov	r14, r18
    160c:	f1 2c       	mov	r15, r1
    160e:	01 2d       	mov	r16, r1
    1610:	11 2d       	mov	r17, r1
    1612:	18 c0       	rjmp	.+48     	; 0x1644 <__umoddi3+0x720>
    1614:	ee 24       	eor	r14, r14
    1616:	ff 24       	eor	r15, r15
    1618:	87 01       	movw	r16, r14
    161a:	14 c0       	rjmp	.+40     	; 0x1644 <__umoddi3+0x720>
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	a4 16       	cp	r10, r20
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	b4 06       	cpc	r11, r20
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	c4 06       	cpc	r12, r20
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	d4 06       	cpc	r13, r20
    162c:	30 f0       	brcs	.+12     	; 0x163a <__umoddi3+0x716>
    162e:	98 e1       	ldi	r25, 0x18	; 24
    1630:	e9 2e       	mov	r14, r25
    1632:	f1 2c       	mov	r15, r1
    1634:	01 2d       	mov	r16, r1
    1636:	11 2d       	mov	r17, r1
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <__umoddi3+0x720>
    163a:	80 e1       	ldi	r24, 0x10	; 16
    163c:	e8 2e       	mov	r14, r24
    163e:	f1 2c       	mov	r15, r1
    1640:	01 2d       	mov	r16, r1
    1642:	11 2d       	mov	r17, r1
    1644:	d6 01       	movw	r26, r12
    1646:	c5 01       	movw	r24, r10
    1648:	0e 2c       	mov	r0, r14
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <__umoddi3+0x730>
    164c:	b6 95       	lsr	r27
    164e:	a7 95       	ror	r26
    1650:	97 95       	ror	r25
    1652:	87 95       	ror	r24
    1654:	0a 94       	dec	r0
    1656:	d2 f7       	brpl	.-12     	; 0x164c <__umoddi3+0x728>
    1658:	8a 58       	subi	r24, 0x8A	; 138
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	dc 01       	movw	r26, r24
    165e:	2c 91       	ld	r18, X
    1660:	80 e2       	ldi	r24, 0x20	; 32
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	8e 19       	sub	r24, r14
    166a:	9f 09       	sbc	r25, r15
    166c:	a0 0b       	sbc	r26, r16
    166e:	b1 0b       	sbc	r27, r17
    1670:	82 1b       	sub	r24, r18
    1672:	91 09       	sbc	r25, r1
    1674:	a1 09       	sbc	r26, r1
    1676:	b1 09       	sbc	r27, r1
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	a1 05       	cpc	r26, r1
    167c:	b1 05       	cpc	r27, r1
    167e:	09 f0       	breq	.+2      	; 0x1682 <__umoddi3+0x75e>
    1680:	4f c0       	rjmp	.+158    	; 0x1720 <__umoddi3+0x7fc>
    1682:	a6 14       	cp	r10, r6
    1684:	b7 04       	cpc	r11, r7
    1686:	c8 04       	cpc	r12, r8
    1688:	d9 04       	cpc	r13, r9
    168a:	58 f0       	brcs	.+22     	; 0x16a2 <__umoddi3+0x77e>
    168c:	6c 96       	adiw	r28, 0x1c	; 28
    168e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1690:	fd ac       	ldd	r15, Y+61	; 0x3d
    1692:	0e ad       	ldd	r16, Y+62	; 0x3e
    1694:	1f ad       	ldd	r17, Y+63	; 0x3f
    1696:	6c 97       	sbiw	r28, 0x1c	; 28
    1698:	e2 14       	cp	r14, r2
    169a:	f3 04       	cpc	r15, r3
    169c:	04 05       	cpc	r16, r4
    169e:	15 05       	cpc	r17, r5
    16a0:	68 f1       	brcs	.+90     	; 0x16fc <__umoddi3+0x7d8>
    16a2:	6c 96       	adiw	r28, 0x1c	; 28
    16a4:	ec ac       	ldd	r14, Y+60	; 0x3c
    16a6:	fd ac       	ldd	r15, Y+61	; 0x3d
    16a8:	0e ad       	ldd	r16, Y+62	; 0x3e
    16aa:	1f ad       	ldd	r17, Y+63	; 0x3f
    16ac:	6c 97       	sbiw	r28, 0x1c	; 28
    16ae:	e2 18       	sub	r14, r2
    16b0:	f3 08       	sbc	r15, r3
    16b2:	04 09       	sbc	r16, r4
    16b4:	15 09       	sbc	r17, r5
    16b6:	a4 01       	movw	r20, r8
    16b8:	93 01       	movw	r18, r6
    16ba:	2a 19       	sub	r18, r10
    16bc:	3b 09       	sbc	r19, r11
    16be:	4c 09       	sbc	r20, r12
    16c0:	5d 09       	sbc	r21, r13
    16c2:	aa 24       	eor	r10, r10
    16c4:	bb 24       	eor	r11, r11
    16c6:	65 01       	movw	r12, r10
    16c8:	6c 96       	adiw	r28, 0x1c	; 28
    16ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    16cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    16ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    16d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    16d2:	6c 97       	sbiw	r28, 0x1c	; 28
    16d4:	6e 15       	cp	r22, r14
    16d6:	7f 05       	cpc	r23, r15
    16d8:	80 07       	cpc	r24, r16
    16da:	91 07       	cpc	r25, r17
    16dc:	28 f4       	brcc	.+10     	; 0x16e8 <__umoddi3+0x7c4>
    16de:	b1 e0       	ldi	r27, 0x01	; 1
    16e0:	ab 2e       	mov	r10, r27
    16e2:	b1 2c       	mov	r11, r1
    16e4:	c1 2c       	mov	r12, r1
    16e6:	d1 2c       	mov	r13, r1
    16e8:	da 01       	movw	r26, r20
    16ea:	c9 01       	movw	r24, r18
    16ec:	8a 19       	sub	r24, r10
    16ee:	9b 09       	sbc	r25, r11
    16f0:	ac 09       	sbc	r26, r12
    16f2:	bd 09       	sbc	r27, r13
    16f4:	8d ab       	std	Y+53, r24	; 0x35
    16f6:	9e ab       	std	Y+54, r25	; 0x36
    16f8:	af ab       	std	Y+55, r26	; 0x37
    16fa:	b8 af       	std	Y+56, r27	; 0x38
    16fc:	e9 8a       	std	Y+17, r14	; 0x11
    16fe:	fa 8a       	std	Y+18, r15	; 0x12
    1700:	0b 8b       	std	Y+19, r16	; 0x13
    1702:	1c 8b       	std	Y+20, r17	; 0x14
    1704:	6d a8       	ldd	r6, Y+53	; 0x35
    1706:	7e a8       	ldd	r7, Y+54	; 0x36
    1708:	8f a8       	ldd	r8, Y+55	; 0x37
    170a:	98 ac       	ldd	r9, Y+56	; 0x38
    170c:	6d 8a       	std	Y+21, r6	; 0x15
    170e:	7e 8a       	std	Y+22, r7	; 0x16
    1710:	8f 8a       	std	Y+23, r8	; 0x17
    1712:	98 8e       	std	Y+24, r9	; 0x18
    1714:	2e 2d       	mov	r18, r14
    1716:	3a 89       	ldd	r19, Y+18	; 0x12
    1718:	4b 89       	ldd	r20, Y+19	; 0x13
    171a:	5c 89       	ldd	r21, Y+20	; 0x14
    171c:	6d a9       	ldd	r22, Y+53	; 0x35
    171e:	6a c2       	rjmp	.+1236   	; 0x1bf4 <__umoddi3+0xcd0>
    1720:	67 96       	adiw	r28, 0x17	; 23
    1722:	8f af       	std	Y+63, r24	; 0x3f
    1724:	67 97       	sbiw	r28, 0x17	; 23
    1726:	a6 01       	movw	r20, r12
    1728:	95 01       	movw	r18, r10
    172a:	08 2e       	mov	r0, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <__umoddi3+0x812>
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	44 1f       	adc	r20, r20
    1734:	55 1f       	adc	r21, r21
    1736:	0a 94       	dec	r0
    1738:	d2 f7       	brpl	.-12     	; 0x172e <__umoddi3+0x80a>
    173a:	a0 e2       	ldi	r26, 0x20	; 32
    173c:	aa 2e       	mov	r10, r26
    173e:	a8 1a       	sub	r10, r24
    1740:	66 96       	adiw	r28, 0x16	; 22
    1742:	af ae       	std	Y+63, r10	; 0x3f
    1744:	66 97       	sbiw	r28, 0x16	; 22
    1746:	d2 01       	movw	r26, r4
    1748:	c1 01       	movw	r24, r2
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <__umoddi3+0x830>
    174c:	b6 95       	lsr	r27
    174e:	a7 95       	ror	r26
    1750:	97 95       	ror	r25
    1752:	87 95       	ror	r24
    1754:	aa 94       	dec	r10
    1756:	d2 f7       	brpl	.-12     	; 0x174c <__umoddi3+0x828>
    1758:	6c 01       	movw	r12, r24
    175a:	7d 01       	movw	r14, r26
    175c:	c2 2a       	or	r12, r18
    175e:	d3 2a       	or	r13, r19
    1760:	e4 2a       	or	r14, r20
    1762:	f5 2a       	or	r15, r21
    1764:	c9 a6       	std	Y+41, r12	; 0x29
    1766:	da a6       	std	Y+42, r13	; 0x2a
    1768:	eb a6       	std	Y+43, r14	; 0x2b
    176a:	fc a6       	std	Y+44, r15	; 0x2c
    176c:	82 01       	movw	r16, r4
    176e:	71 01       	movw	r14, r2
    1770:	67 96       	adiw	r28, 0x17	; 23
    1772:	0f ac       	ldd	r0, Y+63	; 0x3f
    1774:	67 97       	sbiw	r28, 0x17	; 23
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <__umoddi3+0x85c>
    1778:	ee 0c       	add	r14, r14
    177a:	ff 1c       	adc	r15, r15
    177c:	00 1f       	adc	r16, r16
    177e:	11 1f       	adc	r17, r17
    1780:	0a 94       	dec	r0
    1782:	d2 f7       	brpl	.-12     	; 0x1778 <__umoddi3+0x854>
    1784:	ed a2       	std	Y+37, r14	; 0x25
    1786:	fe a2       	std	Y+38, r15	; 0x26
    1788:	0f a3       	std	Y+39, r16	; 0x27
    178a:	18 a7       	std	Y+40, r17	; 0x28
    178c:	64 01       	movw	r12, r8
    178e:	53 01       	movw	r10, r6
    1790:	66 96       	adiw	r28, 0x16	; 22
    1792:	0f ac       	ldd	r0, Y+63	; 0x3f
    1794:	66 97       	sbiw	r28, 0x16	; 22
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <__umoddi3+0x87c>
    1798:	d6 94       	lsr	r13
    179a:	c7 94       	ror	r12
    179c:	b7 94       	ror	r11
    179e:	a7 94       	ror	r10
    17a0:	0a 94       	dec	r0
    17a2:	d2 f7       	brpl	.-12     	; 0x1798 <__umoddi3+0x874>
    17a4:	a4 01       	movw	r20, r8
    17a6:	93 01       	movw	r18, r6
    17a8:	67 96       	adiw	r28, 0x17	; 23
    17aa:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ac:	67 97       	sbiw	r28, 0x17	; 23
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <__umoddi3+0x894>
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	44 1f       	adc	r20, r20
    17b6:	55 1f       	adc	r21, r21
    17b8:	0a 94       	dec	r0
    17ba:	d2 f7       	brpl	.-12     	; 0x17b0 <__umoddi3+0x88c>
    17bc:	6c 96       	adiw	r28, 0x1c	; 28
    17be:	8c ad       	ldd	r24, Y+60	; 0x3c
    17c0:	9d ad       	ldd	r25, Y+61	; 0x3d
    17c2:	ae ad       	ldd	r26, Y+62	; 0x3e
    17c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    17c6:	6c 97       	sbiw	r28, 0x1c	; 28
    17c8:	66 96       	adiw	r28, 0x16	; 22
    17ca:	0f ac       	ldd	r0, Y+63	; 0x3f
    17cc:	66 97       	sbiw	r28, 0x16	; 22
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <__umoddi3+0x8b4>
    17d0:	b6 95       	lsr	r27
    17d2:	a7 95       	ror	r26
    17d4:	97 95       	ror	r25
    17d6:	87 95       	ror	r24
    17d8:	0a 94       	dec	r0
    17da:	d2 f7       	brpl	.-12     	; 0x17d0 <__umoddi3+0x8ac>
    17dc:	3c 01       	movw	r6, r24
    17de:	4d 01       	movw	r8, r26
    17e0:	62 2a       	or	r6, r18
    17e2:	73 2a       	or	r7, r19
    17e4:	84 2a       	or	r8, r20
    17e6:	95 2a       	or	r9, r21
    17e8:	69 a2       	std	Y+33, r6	; 0x21
    17ea:	7a a2       	std	Y+34, r7	; 0x22
    17ec:	8b a2       	std	Y+35, r8	; 0x23
    17ee:	9c a2       	std	Y+36, r9	; 0x24
    17f0:	6c 96       	adiw	r28, 0x1c	; 28
    17f2:	ec ac       	ldd	r14, Y+60	; 0x3c
    17f4:	fd ac       	ldd	r15, Y+61	; 0x3d
    17f6:	0e ad       	ldd	r16, Y+62	; 0x3e
    17f8:	1f ad       	ldd	r17, Y+63	; 0x3f
    17fa:	6c 97       	sbiw	r28, 0x1c	; 28
    17fc:	67 96       	adiw	r28, 0x17	; 23
    17fe:	0f ac       	ldd	r0, Y+63	; 0x3f
    1800:	67 97       	sbiw	r28, 0x17	; 23
    1802:	04 c0       	rjmp	.+8      	; 0x180c <__umoddi3+0x8e8>
    1804:	ee 0c       	add	r14, r14
    1806:	ff 1c       	adc	r15, r15
    1808:	00 1f       	adc	r16, r16
    180a:	11 1f       	adc	r17, r17
    180c:	0a 94       	dec	r0
    180e:	d2 f7       	brpl	.-12     	; 0x1804 <__umoddi3+0x8e0>
    1810:	ed 8e       	std	Y+29, r14	; 0x1d
    1812:	fe 8e       	std	Y+30, r15	; 0x1e
    1814:	0f 8f       	std	Y+31, r16	; 0x1f
    1816:	18 a3       	std	Y+32, r17	; 0x20
    1818:	49 a5       	ldd	r20, Y+41	; 0x29
    181a:	5a a5       	ldd	r21, Y+42	; 0x2a
    181c:	6b a5       	ldd	r22, Y+43	; 0x2b
    181e:	7c a5       	ldd	r23, Y+44	; 0x2c
    1820:	3b 01       	movw	r6, r22
    1822:	88 24       	eor	r8, r8
    1824:	99 24       	eor	r9, r9
    1826:	60 70       	andi	r22, 0x00	; 0
    1828:	70 70       	andi	r23, 0x00	; 0
    182a:	2d 96       	adiw	r28, 0x0d	; 13
    182c:	4c af       	std	Y+60, r20	; 0x3c
    182e:	5d af       	std	Y+61, r21	; 0x3d
    1830:	6e af       	std	Y+62, r22	; 0x3e
    1832:	7f af       	std	Y+63, r23	; 0x3f
    1834:	2d 97       	sbiw	r28, 0x0d	; 13
    1836:	c6 01       	movw	r24, r12
    1838:	b5 01       	movw	r22, r10
    183a:	a4 01       	movw	r20, r8
    183c:	93 01       	movw	r18, r6
    183e:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    1842:	7b 01       	movw	r14, r22
    1844:	8c 01       	movw	r16, r24
    1846:	c6 01       	movw	r24, r12
    1848:	b5 01       	movw	r22, r10
    184a:	a4 01       	movw	r20, r8
    184c:	93 01       	movw	r18, r6
    184e:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    1852:	c9 01       	movw	r24, r18
    1854:	da 01       	movw	r26, r20
    1856:	1c 01       	movw	r2, r24
    1858:	2d 01       	movw	r4, r26
    185a:	c2 01       	movw	r24, r4
    185c:	b1 01       	movw	r22, r2
    185e:	2d 96       	adiw	r28, 0x0d	; 13
    1860:	2c ad       	ldd	r18, Y+60	; 0x3c
    1862:	3d ad       	ldd	r19, Y+61	; 0x3d
    1864:	4e ad       	ldd	r20, Y+62	; 0x3e
    1866:	5f ad       	ldd	r21, Y+63	; 0x3f
    1868:	2d 97       	sbiw	r28, 0x0d	; 13
    186a:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
    1872:	87 01       	movw	r16, r14
    1874:	ff 24       	eor	r15, r15
    1876:	ee 24       	eor	r14, r14
    1878:	a9 a0       	ldd	r10, Y+33	; 0x21
    187a:	ba a0       	ldd	r11, Y+34	; 0x22
    187c:	cb a0       	ldd	r12, Y+35	; 0x23
    187e:	dc a0       	ldd	r13, Y+36	; 0x24
    1880:	c6 01       	movw	r24, r12
    1882:	aa 27       	eor	r26, r26
    1884:	bb 27       	eor	r27, r27
    1886:	57 01       	movw	r10, r14
    1888:	68 01       	movw	r12, r16
    188a:	a8 2a       	or	r10, r24
    188c:	b9 2a       	or	r11, r25
    188e:	ca 2a       	or	r12, r26
    1890:	db 2a       	or	r13, r27
    1892:	a2 16       	cp	r10, r18
    1894:	b3 06       	cpc	r11, r19
    1896:	c4 06       	cpc	r12, r20
    1898:	d5 06       	cpc	r13, r21
    189a:	00 f5       	brcc	.+64     	; 0x18dc <__umoddi3+0x9b8>
    189c:	08 94       	sec
    189e:	21 08       	sbc	r2, r1
    18a0:	31 08       	sbc	r3, r1
    18a2:	41 08       	sbc	r4, r1
    18a4:	51 08       	sbc	r5, r1
    18a6:	e9 a4       	ldd	r14, Y+41	; 0x29
    18a8:	fa a4       	ldd	r15, Y+42	; 0x2a
    18aa:	0b a5       	ldd	r16, Y+43	; 0x2b
    18ac:	1c a5       	ldd	r17, Y+44	; 0x2c
    18ae:	ae 0c       	add	r10, r14
    18b0:	bf 1c       	adc	r11, r15
    18b2:	c0 1e       	adc	r12, r16
    18b4:	d1 1e       	adc	r13, r17
    18b6:	ae 14       	cp	r10, r14
    18b8:	bf 04       	cpc	r11, r15
    18ba:	c0 06       	cpc	r12, r16
    18bc:	d1 06       	cpc	r13, r17
    18be:	70 f0       	brcs	.+28     	; 0x18dc <__umoddi3+0x9b8>
    18c0:	a2 16       	cp	r10, r18
    18c2:	b3 06       	cpc	r11, r19
    18c4:	c4 06       	cpc	r12, r20
    18c6:	d5 06       	cpc	r13, r21
    18c8:	48 f4       	brcc	.+18     	; 0x18dc <__umoddi3+0x9b8>
    18ca:	08 94       	sec
    18cc:	21 08       	sbc	r2, r1
    18ce:	31 08       	sbc	r3, r1
    18d0:	41 08       	sbc	r4, r1
    18d2:	51 08       	sbc	r5, r1
    18d4:	ae 0c       	add	r10, r14
    18d6:	bf 1c       	adc	r11, r15
    18d8:	c0 1e       	adc	r12, r16
    18da:	d1 1e       	adc	r13, r17
    18dc:	a2 1a       	sub	r10, r18
    18de:	b3 0a       	sbc	r11, r19
    18e0:	c4 0a       	sbc	r12, r20
    18e2:	d5 0a       	sbc	r13, r21
    18e4:	c6 01       	movw	r24, r12
    18e6:	b5 01       	movw	r22, r10
    18e8:	a4 01       	movw	r20, r8
    18ea:	93 01       	movw	r18, r6
    18ec:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    18f0:	7b 01       	movw	r14, r22
    18f2:	8c 01       	movw	r16, r24
    18f4:	c6 01       	movw	r24, r12
    18f6:	b5 01       	movw	r22, r10
    18f8:	a4 01       	movw	r20, r8
    18fa:	93 01       	movw	r18, r6
    18fc:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodsi4>
    1900:	c9 01       	movw	r24, r18
    1902:	da 01       	movw	r26, r20
    1904:	3c 01       	movw	r6, r24
    1906:	4d 01       	movw	r8, r26
    1908:	c4 01       	movw	r24, r8
    190a:	b3 01       	movw	r22, r6
    190c:	2d 96       	adiw	r28, 0x0d	; 13
    190e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1910:	3d ad       	ldd	r19, Y+61	; 0x3d
    1912:	4e ad       	ldd	r20, Y+62	; 0x3e
    1914:	5f ad       	ldd	r21, Y+63	; 0x3f
    1916:	2d 97       	sbiw	r28, 0x0d	; 13
    1918:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    191c:	9b 01       	movw	r18, r22
    191e:	ac 01       	movw	r20, r24
    1920:	87 01       	movw	r16, r14
    1922:	ff 24       	eor	r15, r15
    1924:	ee 24       	eor	r14, r14
    1926:	89 a1       	ldd	r24, Y+33	; 0x21
    1928:	9a a1       	ldd	r25, Y+34	; 0x22
    192a:	ab a1       	ldd	r26, Y+35	; 0x23
    192c:	bc a1       	ldd	r27, Y+36	; 0x24
    192e:	a0 70       	andi	r26, 0x00	; 0
    1930:	b0 70       	andi	r27, 0x00	; 0
    1932:	57 01       	movw	r10, r14
    1934:	68 01       	movw	r12, r16
    1936:	a8 2a       	or	r10, r24
    1938:	b9 2a       	or	r11, r25
    193a:	ca 2a       	or	r12, r26
    193c:	db 2a       	or	r13, r27
    193e:	a2 16       	cp	r10, r18
    1940:	b3 06       	cpc	r11, r19
    1942:	c4 06       	cpc	r12, r20
    1944:	d5 06       	cpc	r13, r21
    1946:	00 f5       	brcc	.+64     	; 0x1988 <__umoddi3+0xa64>
    1948:	08 94       	sec
    194a:	61 08       	sbc	r6, r1
    194c:	71 08       	sbc	r7, r1
    194e:	81 08       	sbc	r8, r1
    1950:	91 08       	sbc	r9, r1
    1952:	69 a5       	ldd	r22, Y+41	; 0x29
    1954:	7a a5       	ldd	r23, Y+42	; 0x2a
    1956:	8b a5       	ldd	r24, Y+43	; 0x2b
    1958:	9c a5       	ldd	r25, Y+44	; 0x2c
    195a:	a6 0e       	add	r10, r22
    195c:	b7 1e       	adc	r11, r23
    195e:	c8 1e       	adc	r12, r24
    1960:	d9 1e       	adc	r13, r25
    1962:	a6 16       	cp	r10, r22
    1964:	b7 06       	cpc	r11, r23
    1966:	c8 06       	cpc	r12, r24
    1968:	d9 06       	cpc	r13, r25
    196a:	70 f0       	brcs	.+28     	; 0x1988 <__umoddi3+0xa64>
    196c:	a2 16       	cp	r10, r18
    196e:	b3 06       	cpc	r11, r19
    1970:	c4 06       	cpc	r12, r20
    1972:	d5 06       	cpc	r13, r21
    1974:	48 f4       	brcc	.+18     	; 0x1988 <__umoddi3+0xa64>
    1976:	08 94       	sec
    1978:	61 08       	sbc	r6, r1
    197a:	71 08       	sbc	r7, r1
    197c:	81 08       	sbc	r8, r1
    197e:	91 08       	sbc	r9, r1
    1980:	a6 0e       	add	r10, r22
    1982:	b7 1e       	adc	r11, r23
    1984:	c8 1e       	adc	r12, r24
    1986:	d9 1e       	adc	r13, r25
    1988:	d6 01       	movw	r26, r12
    198a:	c5 01       	movw	r24, r10
    198c:	82 1b       	sub	r24, r18
    198e:	93 0b       	sbc	r25, r19
    1990:	a4 0b       	sbc	r26, r20
    1992:	b5 0b       	sbc	r27, r21
    1994:	89 8f       	std	Y+25, r24	; 0x19
    1996:	9a 8f       	std	Y+26, r25	; 0x1a
    1998:	ab 8f       	std	Y+27, r26	; 0x1b
    199a:	bc 8f       	std	Y+28, r27	; 0x1c
    199c:	d1 01       	movw	r26, r2
    199e:	99 27       	eor	r25, r25
    19a0:	88 27       	eor	r24, r24
    19a2:	84 01       	movw	r16, r8
    19a4:	73 01       	movw	r14, r6
    19a6:	e8 2a       	or	r14, r24
    19a8:	f9 2a       	or	r15, r25
    19aa:	0a 2b       	or	r16, r26
    19ac:	1b 2b       	or	r17, r27
    19ae:	4f ef       	ldi	r20, 0xFF	; 255
    19b0:	a4 2e       	mov	r10, r20
    19b2:	4f ef       	ldi	r20, 0xFF	; 255
    19b4:	b4 2e       	mov	r11, r20
    19b6:	c1 2c       	mov	r12, r1
    19b8:	d1 2c       	mov	r13, r1
    19ba:	ae 20       	and	r10, r14
    19bc:	bf 20       	and	r11, r15
    19be:	c0 22       	and	r12, r16
    19c0:	d1 22       	and	r13, r17
    19c2:	78 01       	movw	r14, r16
    19c4:	00 27       	eor	r16, r16
    19c6:	11 27       	eor	r17, r17
    19c8:	6d a0       	ldd	r6, Y+37	; 0x25
    19ca:	7e a0       	ldd	r7, Y+38	; 0x26
    19cc:	8f a0       	ldd	r8, Y+39	; 0x27
    19ce:	98 a4       	ldd	r9, Y+40	; 0x28
    19d0:	4f ef       	ldi	r20, 0xFF	; 255
    19d2:	5f ef       	ldi	r21, 0xFF	; 255
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	64 22       	and	r6, r20
    19da:	75 22       	and	r7, r21
    19dc:	86 22       	and	r8, r22
    19de:	97 22       	and	r9, r23
    19e0:	8d a1       	ldd	r24, Y+37	; 0x25
    19e2:	9e a1       	ldd	r25, Y+38	; 0x26
    19e4:	af a1       	ldd	r26, Y+39	; 0x27
    19e6:	b8 a5       	ldd	r27, Y+40	; 0x28
    19e8:	bd 01       	movw	r22, r26
    19ea:	88 27       	eor	r24, r24
    19ec:	99 27       	eor	r25, r25
    19ee:	65 96       	adiw	r28, 0x15	; 21
    19f0:	6c af       	std	Y+60, r22	; 0x3c
    19f2:	7d af       	std	Y+61, r23	; 0x3d
    19f4:	8e af       	std	Y+62, r24	; 0x3e
    19f6:	9f af       	std	Y+63, r25	; 0x3f
    19f8:	65 97       	sbiw	r28, 0x15	; 21
    19fa:	c6 01       	movw	r24, r12
    19fc:	b5 01       	movw	r22, r10
    19fe:	a4 01       	movw	r20, r8
    1a00:	93 01       	movw	r18, r6
    1a02:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    1a06:	61 96       	adiw	r28, 0x11	; 17
    1a08:	6c af       	std	Y+60, r22	; 0x3c
    1a0a:	7d af       	std	Y+61, r23	; 0x3d
    1a0c:	8e af       	std	Y+62, r24	; 0x3e
    1a0e:	9f af       	std	Y+63, r25	; 0x3f
    1a10:	61 97       	sbiw	r28, 0x11	; 17
    1a12:	c6 01       	movw	r24, r12
    1a14:	b5 01       	movw	r22, r10
    1a16:	65 96       	adiw	r28, 0x15	; 21
    1a18:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a1a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a1c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a1e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a20:	65 97       	sbiw	r28, 0x15	; 21
    1a22:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    1a26:	1b 01       	movw	r2, r22
    1a28:	2c 01       	movw	r4, r24
    1a2a:	c8 01       	movw	r24, r16
    1a2c:	b7 01       	movw	r22, r14
    1a2e:	a4 01       	movw	r20, r8
    1a30:	93 01       	movw	r18, r6
    1a32:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    1a36:	5b 01       	movw	r10, r22
    1a38:	6c 01       	movw	r12, r24
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	b7 01       	movw	r22, r14
    1a3e:	65 96       	adiw	r28, 0x15	; 21
    1a40:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a42:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a44:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a46:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a48:	65 97       	sbiw	r28, 0x15	; 21
    1a4a:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    1a4e:	7b 01       	movw	r14, r22
    1a50:	8c 01       	movw	r16, r24
    1a52:	a6 01       	movw	r20, r12
    1a54:	95 01       	movw	r18, r10
    1a56:	22 0d       	add	r18, r2
    1a58:	33 1d       	adc	r19, r3
    1a5a:	44 1d       	adc	r20, r4
    1a5c:	55 1d       	adc	r21, r5
    1a5e:	61 96       	adiw	r28, 0x11	; 17
    1a60:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a62:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a64:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a66:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a68:	61 97       	sbiw	r28, 0x11	; 17
    1a6a:	c4 01       	movw	r24, r8
    1a6c:	aa 27       	eor	r26, r26
    1a6e:	bb 27       	eor	r27, r27
    1a70:	28 0f       	add	r18, r24
    1a72:	39 1f       	adc	r19, r25
    1a74:	4a 1f       	adc	r20, r26
    1a76:	5b 1f       	adc	r21, r27
    1a78:	2a 15       	cp	r18, r10
    1a7a:	3b 05       	cpc	r19, r11
    1a7c:	4c 05       	cpc	r20, r12
    1a7e:	5d 05       	cpc	r21, r13
    1a80:	48 f4       	brcc	.+18     	; 0x1a94 <__umoddi3+0xb70>
    1a82:	81 2c       	mov	r8, r1
    1a84:	91 2c       	mov	r9, r1
    1a86:	e1 e0       	ldi	r30, 0x01	; 1
    1a88:	ae 2e       	mov	r10, r30
    1a8a:	b1 2c       	mov	r11, r1
    1a8c:	e8 0c       	add	r14, r8
    1a8e:	f9 1c       	adc	r15, r9
    1a90:	0a 1d       	adc	r16, r10
    1a92:	1b 1d       	adc	r17, r11
    1a94:	ca 01       	movw	r24, r20
    1a96:	aa 27       	eor	r26, r26
    1a98:	bb 27       	eor	r27, r27
    1a9a:	57 01       	movw	r10, r14
    1a9c:	68 01       	movw	r12, r16
    1a9e:	a8 0e       	add	r10, r24
    1aa0:	b9 1e       	adc	r11, r25
    1aa2:	ca 1e       	adc	r12, r26
    1aa4:	db 1e       	adc	r13, r27
    1aa6:	a9 01       	movw	r20, r18
    1aa8:	33 27       	eor	r19, r19
    1aaa:	22 27       	eor	r18, r18
    1aac:	61 96       	adiw	r28, 0x11	; 17
    1aae:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ab0:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ab2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ab4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ab6:	61 97       	sbiw	r28, 0x11	; 17
    1ab8:	a0 70       	andi	r26, 0x00	; 0
    1aba:	b0 70       	andi	r27, 0x00	; 0
    1abc:	28 0f       	add	r18, r24
    1abe:	39 1f       	adc	r19, r25
    1ac0:	4a 1f       	adc	r20, r26
    1ac2:	5b 1f       	adc	r21, r27
    1ac4:	e9 8c       	ldd	r14, Y+25	; 0x19
    1ac6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1ac8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1aca:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1acc:	ea 14       	cp	r14, r10
    1ace:	fb 04       	cpc	r15, r11
    1ad0:	0c 05       	cpc	r16, r12
    1ad2:	1d 05       	cpc	r17, r13
    1ad4:	70 f0       	brcs	.+28     	; 0x1af2 <__umoddi3+0xbce>
    1ad6:	ae 14       	cp	r10, r14
    1ad8:	bf 04       	cpc	r11, r15
    1ada:	c0 06       	cpc	r12, r16
    1adc:	d1 06       	cpc	r13, r17
    1ade:	69 f5       	brne	.+90     	; 0x1b3a <__umoddi3+0xc16>
    1ae0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ae2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ae4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ae6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ae8:	62 17       	cp	r22, r18
    1aea:	73 07       	cpc	r23, r19
    1aec:	84 07       	cpc	r24, r20
    1aee:	95 07       	cpc	r25, r21
    1af0:	20 f5       	brcc	.+72     	; 0x1b3a <__umoddi3+0xc16>
    1af2:	da 01       	movw	r26, r20
    1af4:	c9 01       	movw	r24, r18
    1af6:	6d a0       	ldd	r6, Y+37	; 0x25
    1af8:	7e a0       	ldd	r7, Y+38	; 0x26
    1afa:	8f a0       	ldd	r8, Y+39	; 0x27
    1afc:	98 a4       	ldd	r9, Y+40	; 0x28
    1afe:	86 19       	sub	r24, r6
    1b00:	97 09       	sbc	r25, r7
    1b02:	a8 09       	sbc	r26, r8
    1b04:	b9 09       	sbc	r27, r9
    1b06:	e9 a4       	ldd	r14, Y+41	; 0x29
    1b08:	fa a4       	ldd	r15, Y+42	; 0x2a
    1b0a:	0b a5       	ldd	r16, Y+43	; 0x2b
    1b0c:	1c a5       	ldd	r17, Y+44	; 0x2c
    1b0e:	ae 18       	sub	r10, r14
    1b10:	bf 08       	sbc	r11, r15
    1b12:	c0 0a       	sbc	r12, r16
    1b14:	d1 0a       	sbc	r13, r17
    1b16:	ee 24       	eor	r14, r14
    1b18:	ff 24       	eor	r15, r15
    1b1a:	87 01       	movw	r16, r14
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	4a 07       	cpc	r20, r26
    1b22:	5b 07       	cpc	r21, r27
    1b24:	28 f4       	brcc	.+10     	; 0x1b30 <__umoddi3+0xc0c>
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	e2 2e       	mov	r14, r18
    1b2a:	f1 2c       	mov	r15, r1
    1b2c:	01 2d       	mov	r16, r1
    1b2e:	11 2d       	mov	r17, r1
    1b30:	ae 18       	sub	r10, r14
    1b32:	bf 08       	sbc	r11, r15
    1b34:	c0 0a       	sbc	r12, r16
    1b36:	d1 0a       	sbc	r13, r17
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <__umoddi3+0xc1a>
    1b3a:	da 01       	movw	r26, r20
    1b3c:	c9 01       	movw	r24, r18
    1b3e:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1b40:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1b42:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1b44:	98 a0       	ldd	r9, Y+32	; 0x20
    1b46:	68 1a       	sub	r6, r24
    1b48:	79 0a       	sbc	r7, r25
    1b4a:	8a 0a       	sbc	r8, r26
    1b4c:	9b 0a       	sbc	r9, r27
    1b4e:	49 8d       	ldd	r20, Y+25	; 0x19
    1b50:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b52:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b54:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b56:	4a 19       	sub	r20, r10
    1b58:	5b 09       	sbc	r21, r11
    1b5a:	6c 09       	sbc	r22, r12
    1b5c:	7d 09       	sbc	r23, r13
    1b5e:	5a 01       	movw	r10, r20
    1b60:	6b 01       	movw	r12, r22
    1b62:	22 24       	eor	r2, r2
    1b64:	33 24       	eor	r3, r3
    1b66:	21 01       	movw	r4, r2
    1b68:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b6a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b70:	66 15       	cp	r22, r6
    1b72:	77 05       	cpc	r23, r7
    1b74:	88 05       	cpc	r24, r8
    1b76:	99 05       	cpc	r25, r9
    1b78:	28 f4       	brcc	.+10     	; 0x1b84 <__umoddi3+0xc60>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	28 2e       	mov	r2, r24
    1b7e:	31 2c       	mov	r3, r1
    1b80:	41 2c       	mov	r4, r1
    1b82:	51 2c       	mov	r5, r1
    1b84:	86 01       	movw	r16, r12
    1b86:	75 01       	movw	r14, r10
    1b88:	e2 18       	sub	r14, r2
    1b8a:	f3 08       	sbc	r15, r3
    1b8c:	04 09       	sbc	r16, r4
    1b8e:	15 09       	sbc	r17, r5
    1b90:	a8 01       	movw	r20, r16
    1b92:	97 01       	movw	r18, r14
    1b94:	66 96       	adiw	r28, 0x16	; 22
    1b96:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b98:	66 97       	sbiw	r28, 0x16	; 22
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <__umoddi3+0xc80>
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	44 1f       	adc	r20, r20
    1ba2:	55 1f       	adc	r21, r21
    1ba4:	0a 94       	dec	r0
    1ba6:	d2 f7       	brpl	.-12     	; 0x1b9c <__umoddi3+0xc78>
    1ba8:	d4 01       	movw	r26, r8
    1baa:	c3 01       	movw	r24, r6
    1bac:	67 96       	adiw	r28, 0x17	; 23
    1bae:	0f ac       	ldd	r0, Y+63	; 0x3f
    1bb0:	67 97       	sbiw	r28, 0x17	; 23
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <__umoddi3+0xc98>
    1bb4:	b6 95       	lsr	r27
    1bb6:	a7 95       	ror	r26
    1bb8:	97 95       	ror	r25
    1bba:	87 95       	ror	r24
    1bbc:	0a 94       	dec	r0
    1bbe:	d2 f7       	brpl	.-12     	; 0x1bb4 <__umoddi3+0xc90>
    1bc0:	28 2b       	or	r18, r24
    1bc2:	39 2b       	or	r19, r25
    1bc4:	4a 2b       	or	r20, r26
    1bc6:	5b 2b       	or	r21, r27
    1bc8:	29 8b       	std	Y+17, r18	; 0x11
    1bca:	3a 8b       	std	Y+18, r19	; 0x12
    1bcc:	4b 8b       	std	Y+19, r20	; 0x13
    1bce:	5c 8b       	std	Y+20, r21	; 0x14
    1bd0:	67 96       	adiw	r28, 0x17	; 23
    1bd2:	0f ac       	ldd	r0, Y+63	; 0x3f
    1bd4:	67 97       	sbiw	r28, 0x17	; 23
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <__umoddi3+0xcbc>
    1bd8:	16 95       	lsr	r17
    1bda:	07 95       	ror	r16
    1bdc:	f7 94       	ror	r15
    1bde:	e7 94       	ror	r14
    1be0:	0a 94       	dec	r0
    1be2:	d2 f7       	brpl	.-12     	; 0x1bd8 <__umoddi3+0xcb4>
    1be4:	ed 8a       	std	Y+21, r14	; 0x15
    1be6:	fe 8a       	std	Y+22, r15	; 0x16
    1be8:	0f 8b       	std	Y+23, r16	; 0x17
    1bea:	18 8f       	std	Y+24, r17	; 0x18
    1bec:	3a 89       	ldd	r19, Y+18	; 0x12
    1bee:	4b 89       	ldd	r20, Y+19	; 0x13
    1bf0:	5c 89       	ldd	r21, Y+20	; 0x14
    1bf2:	6e 2d       	mov	r22, r14
    1bf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfa:	c5 5a       	subi	r28, 0xA5	; 165
    1bfc:	df 4f       	sbci	r29, 0xFF	; 255
    1bfe:	e2 e1       	ldi	r30, 0x12	; 18
    1c00:	0c 94 b2 36 	jmp	0x6d64	; 0x6d64 <__epilogue_restores__>

00001c04 <_fpadd_parts>:
    1c04:	a0 e0       	ldi	r26, 0x00	; 0
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e0       	ldi	r30, 0x08	; 8
    1c0a:	fe e0       	ldi	r31, 0x0E	; 14
    1c0c:	0c 94 96 36 	jmp	0x6d2c	; 0x6d2c <__prologue_saves__>
    1c10:	dc 01       	movw	r26, r24
    1c12:	2b 01       	movw	r4, r22
    1c14:	fa 01       	movw	r30, r20
    1c16:	9c 91       	ld	r25, X
    1c18:	92 30       	cpi	r25, 0x02	; 2
    1c1a:	08 f4       	brcc	.+2      	; 0x1c1e <_fpadd_parts+0x1a>
    1c1c:	39 c1       	rjmp	.+626    	; 0x1e90 <_fpadd_parts+0x28c>
    1c1e:	eb 01       	movw	r28, r22
    1c20:	88 81       	ld	r24, Y
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	08 f4       	brcc	.+2      	; 0x1c28 <_fpadd_parts+0x24>
    1c26:	33 c1       	rjmp	.+614    	; 0x1e8e <_fpadd_parts+0x28a>
    1c28:	94 30       	cpi	r25, 0x04	; 4
    1c2a:	69 f4       	brne	.+26     	; 0x1c46 <_fpadd_parts+0x42>
    1c2c:	84 30       	cpi	r24, 0x04	; 4
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <_fpadd_parts+0x2e>
    1c30:	2f c1       	rjmp	.+606    	; 0x1e90 <_fpadd_parts+0x28c>
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	9c 91       	ld	r25, X
    1c36:	11 97       	sbiw	r26, 0x01	; 1
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	98 17       	cp	r25, r24
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <_fpadd_parts+0x3c>
    1c3e:	28 c1       	rjmp	.+592    	; 0x1e90 <_fpadd_parts+0x28c>
    1c40:	ae e6       	ldi	r26, 0x6E	; 110
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	25 c1       	rjmp	.+586    	; 0x1e90 <_fpadd_parts+0x28c>
    1c46:	84 30       	cpi	r24, 0x04	; 4
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <_fpadd_parts+0x48>
    1c4a:	21 c1       	rjmp	.+578    	; 0x1e8e <_fpadd_parts+0x28a>
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	a9 f4       	brne	.+42     	; 0x1c7a <_fpadd_parts+0x76>
    1c50:	92 30       	cpi	r25, 0x02	; 2
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <_fpadd_parts+0x52>
    1c54:	1d c1       	rjmp	.+570    	; 0x1e90 <_fpadd_parts+0x28c>
    1c56:	9a 01       	movw	r18, r20
    1c58:	ad 01       	movw	r20, r26
    1c5a:	88 e0       	ldi	r24, 0x08	; 8
    1c5c:	ea 01       	movw	r28, r20
    1c5e:	09 90       	ld	r0, Y+
    1c60:	ae 01       	movw	r20, r28
    1c62:	e9 01       	movw	r28, r18
    1c64:	09 92       	st	Y+, r0
    1c66:	9e 01       	movw	r18, r28
    1c68:	81 50       	subi	r24, 0x01	; 1
    1c6a:	c1 f7       	brne	.-16     	; 0x1c5c <_fpadd_parts+0x58>
    1c6c:	e2 01       	movw	r28, r4
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	11 96       	adiw	r26, 0x01	; 1
    1c72:	9c 91       	ld	r25, X
    1c74:	89 23       	and	r24, r25
    1c76:	81 83       	std	Z+1, r24	; 0x01
    1c78:	08 c1       	rjmp	.+528    	; 0x1e8a <_fpadd_parts+0x286>
    1c7a:	92 30       	cpi	r25, 0x02	; 2
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <_fpadd_parts+0x7c>
    1c7e:	07 c1       	rjmp	.+526    	; 0x1e8e <_fpadd_parts+0x28a>
    1c80:	12 96       	adiw	r26, 0x02	; 2
    1c82:	2d 90       	ld	r2, X+
    1c84:	3c 90       	ld	r3, X
    1c86:	13 97       	sbiw	r26, 0x03	; 3
    1c88:	eb 01       	movw	r28, r22
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	14 96       	adiw	r26, 0x04	; 4
    1c90:	ad 90       	ld	r10, X+
    1c92:	bd 90       	ld	r11, X+
    1c94:	cd 90       	ld	r12, X+
    1c96:	dc 90       	ld	r13, X
    1c98:	17 97       	sbiw	r26, 0x07	; 7
    1c9a:	ec 80       	ldd	r14, Y+4	; 0x04
    1c9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1c9e:	0e 81       	ldd	r16, Y+6	; 0x06
    1ca0:	1f 81       	ldd	r17, Y+7	; 0x07
    1ca2:	91 01       	movw	r18, r2
    1ca4:	28 1b       	sub	r18, r24
    1ca6:	39 0b       	sbc	r19, r25
    1ca8:	b9 01       	movw	r22, r18
    1caa:	37 ff       	sbrs	r19, 7
    1cac:	04 c0       	rjmp	.+8      	; 0x1cb6 <_fpadd_parts+0xb2>
    1cae:	66 27       	eor	r22, r22
    1cb0:	77 27       	eor	r23, r23
    1cb2:	62 1b       	sub	r22, r18
    1cb4:	73 0b       	sbc	r23, r19
    1cb6:	60 32       	cpi	r22, 0x20	; 32
    1cb8:	71 05       	cpc	r23, r1
    1cba:	0c f0       	brlt	.+2      	; 0x1cbe <_fpadd_parts+0xba>
    1cbc:	61 c0       	rjmp	.+194    	; 0x1d80 <_fpadd_parts+0x17c>
    1cbe:	12 16       	cp	r1, r18
    1cc0:	13 06       	cpc	r1, r19
    1cc2:	6c f5       	brge	.+90     	; 0x1d1e <_fpadd_parts+0x11a>
    1cc4:	37 01       	movw	r6, r14
    1cc6:	48 01       	movw	r8, r16
    1cc8:	06 2e       	mov	r0, r22
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <_fpadd_parts+0xd0>
    1ccc:	96 94       	lsr	r9
    1cce:	87 94       	ror	r8
    1cd0:	77 94       	ror	r7
    1cd2:	67 94       	ror	r6
    1cd4:	0a 94       	dec	r0
    1cd6:	d2 f7       	brpl	.-12     	; 0x1ccc <_fpadd_parts+0xc8>
    1cd8:	21 e0       	ldi	r18, 0x01	; 1
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <_fpadd_parts+0xe6>
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	44 1f       	adc	r20, r20
    1ce8:	55 1f       	adc	r21, r21
    1cea:	6a 95       	dec	r22
    1cec:	d2 f7       	brpl	.-12     	; 0x1ce2 <_fpadd_parts+0xde>
    1cee:	21 50       	subi	r18, 0x01	; 1
    1cf0:	30 40       	sbci	r19, 0x00	; 0
    1cf2:	40 40       	sbci	r20, 0x00	; 0
    1cf4:	50 40       	sbci	r21, 0x00	; 0
    1cf6:	2e 21       	and	r18, r14
    1cf8:	3f 21       	and	r19, r15
    1cfa:	40 23       	and	r20, r16
    1cfc:	51 23       	and	r21, r17
    1cfe:	21 15       	cp	r18, r1
    1d00:	31 05       	cpc	r19, r1
    1d02:	41 05       	cpc	r20, r1
    1d04:	51 05       	cpc	r21, r1
    1d06:	21 f0       	breq	.+8      	; 0x1d10 <_fpadd_parts+0x10c>
    1d08:	21 e0       	ldi	r18, 0x01	; 1
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	79 01       	movw	r14, r18
    1d12:	8a 01       	movw	r16, r20
    1d14:	e6 28       	or	r14, r6
    1d16:	f7 28       	or	r15, r7
    1d18:	08 29       	or	r16, r8
    1d1a:	19 29       	or	r17, r9
    1d1c:	3c c0       	rjmp	.+120    	; 0x1d96 <_fpadd_parts+0x192>
    1d1e:	23 2b       	or	r18, r19
    1d20:	d1 f1       	breq	.+116    	; 0x1d96 <_fpadd_parts+0x192>
    1d22:	26 0e       	add	r2, r22
    1d24:	37 1e       	adc	r3, r23
    1d26:	35 01       	movw	r6, r10
    1d28:	46 01       	movw	r8, r12
    1d2a:	06 2e       	mov	r0, r22
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <_fpadd_parts+0x132>
    1d2e:	96 94       	lsr	r9
    1d30:	87 94       	ror	r8
    1d32:	77 94       	ror	r7
    1d34:	67 94       	ror	r6
    1d36:	0a 94       	dec	r0
    1d38:	d2 f7       	brpl	.-12     	; 0x1d2e <_fpadd_parts+0x12a>
    1d3a:	21 e0       	ldi	r18, 0x01	; 1
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <_fpadd_parts+0x148>
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	44 1f       	adc	r20, r20
    1d4a:	55 1f       	adc	r21, r21
    1d4c:	6a 95       	dec	r22
    1d4e:	d2 f7       	brpl	.-12     	; 0x1d44 <_fpadd_parts+0x140>
    1d50:	21 50       	subi	r18, 0x01	; 1
    1d52:	30 40       	sbci	r19, 0x00	; 0
    1d54:	40 40       	sbci	r20, 0x00	; 0
    1d56:	50 40       	sbci	r21, 0x00	; 0
    1d58:	2a 21       	and	r18, r10
    1d5a:	3b 21       	and	r19, r11
    1d5c:	4c 21       	and	r20, r12
    1d5e:	5d 21       	and	r21, r13
    1d60:	21 15       	cp	r18, r1
    1d62:	31 05       	cpc	r19, r1
    1d64:	41 05       	cpc	r20, r1
    1d66:	51 05       	cpc	r21, r1
    1d68:	21 f0       	breq	.+8      	; 0x1d72 <_fpadd_parts+0x16e>
    1d6a:	21 e0       	ldi	r18, 0x01	; 1
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	59 01       	movw	r10, r18
    1d74:	6a 01       	movw	r12, r20
    1d76:	a6 28       	or	r10, r6
    1d78:	b7 28       	or	r11, r7
    1d7a:	c8 28       	or	r12, r8
    1d7c:	d9 28       	or	r13, r9
    1d7e:	0b c0       	rjmp	.+22     	; 0x1d96 <_fpadd_parts+0x192>
    1d80:	82 15       	cp	r24, r2
    1d82:	93 05       	cpc	r25, r3
    1d84:	2c f0       	brlt	.+10     	; 0x1d90 <_fpadd_parts+0x18c>
    1d86:	1c 01       	movw	r2, r24
    1d88:	aa 24       	eor	r10, r10
    1d8a:	bb 24       	eor	r11, r11
    1d8c:	65 01       	movw	r12, r10
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <_fpadd_parts+0x192>
    1d90:	ee 24       	eor	r14, r14
    1d92:	ff 24       	eor	r15, r15
    1d94:	87 01       	movw	r16, r14
    1d96:	11 96       	adiw	r26, 0x01	; 1
    1d98:	9c 91       	ld	r25, X
    1d9a:	d2 01       	movw	r26, r4
    1d9c:	11 96       	adiw	r26, 0x01	; 1
    1d9e:	8c 91       	ld	r24, X
    1da0:	98 17       	cp	r25, r24
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <_fpadd_parts+0x1a2>
    1da4:	45 c0       	rjmp	.+138    	; 0x1e30 <_fpadd_parts+0x22c>
    1da6:	99 23       	and	r25, r25
    1da8:	39 f0       	breq	.+14     	; 0x1db8 <_fpadd_parts+0x1b4>
    1daa:	a8 01       	movw	r20, r16
    1dac:	97 01       	movw	r18, r14
    1dae:	2a 19       	sub	r18, r10
    1db0:	3b 09       	sbc	r19, r11
    1db2:	4c 09       	sbc	r20, r12
    1db4:	5d 09       	sbc	r21, r13
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <_fpadd_parts+0x1c0>
    1db8:	a6 01       	movw	r20, r12
    1dba:	95 01       	movw	r18, r10
    1dbc:	2e 19       	sub	r18, r14
    1dbe:	3f 09       	sbc	r19, r15
    1dc0:	40 0b       	sbc	r20, r16
    1dc2:	51 0b       	sbc	r21, r17
    1dc4:	57 fd       	sbrc	r21, 7
    1dc6:	08 c0       	rjmp	.+16     	; 0x1dd8 <_fpadd_parts+0x1d4>
    1dc8:	11 82       	std	Z+1, r1	; 0x01
    1dca:	33 82       	std	Z+3, r3	; 0x03
    1dcc:	22 82       	std	Z+2, r2	; 0x02
    1dce:	24 83       	std	Z+4, r18	; 0x04
    1dd0:	35 83       	std	Z+5, r19	; 0x05
    1dd2:	46 83       	std	Z+6, r20	; 0x06
    1dd4:	57 83       	std	Z+7, r21	; 0x07
    1dd6:	1d c0       	rjmp	.+58     	; 0x1e12 <_fpadd_parts+0x20e>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	81 83       	std	Z+1, r24	; 0x01
    1ddc:	33 82       	std	Z+3, r3	; 0x03
    1dde:	22 82       	std	Z+2, r2	; 0x02
    1de0:	88 27       	eor	r24, r24
    1de2:	99 27       	eor	r25, r25
    1de4:	dc 01       	movw	r26, r24
    1de6:	82 1b       	sub	r24, r18
    1de8:	93 0b       	sbc	r25, r19
    1dea:	a4 0b       	sbc	r26, r20
    1dec:	b5 0b       	sbc	r27, r21
    1dee:	84 83       	std	Z+4, r24	; 0x04
    1df0:	95 83       	std	Z+5, r25	; 0x05
    1df2:	a6 83       	std	Z+6, r26	; 0x06
    1df4:	b7 83       	std	Z+7, r27	; 0x07
    1df6:	0d c0       	rjmp	.+26     	; 0x1e12 <_fpadd_parts+0x20e>
    1df8:	22 0f       	add	r18, r18
    1dfa:	33 1f       	adc	r19, r19
    1dfc:	44 1f       	adc	r20, r20
    1dfe:	55 1f       	adc	r21, r21
    1e00:	24 83       	std	Z+4, r18	; 0x04
    1e02:	35 83       	std	Z+5, r19	; 0x05
    1e04:	46 83       	std	Z+6, r20	; 0x06
    1e06:	57 83       	std	Z+7, r21	; 0x07
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	93 83       	std	Z+3, r25	; 0x03
    1e10:	82 83       	std	Z+2, r24	; 0x02
    1e12:	24 81       	ldd	r18, Z+4	; 0x04
    1e14:	35 81       	ldd	r19, Z+5	; 0x05
    1e16:	46 81       	ldd	r20, Z+6	; 0x06
    1e18:	57 81       	ldd	r21, Z+7	; 0x07
    1e1a:	da 01       	movw	r26, r20
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	a1 09       	sbc	r26, r1
    1e22:	b1 09       	sbc	r27, r1
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	af 4f       	sbci	r26, 0xFF	; 255
    1e2a:	bf 43       	sbci	r27, 0x3F	; 63
    1e2c:	28 f3       	brcs	.-54     	; 0x1df8 <_fpadd_parts+0x1f4>
    1e2e:	0b c0       	rjmp	.+22     	; 0x1e46 <_fpadd_parts+0x242>
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	33 82       	std	Z+3, r3	; 0x03
    1e34:	22 82       	std	Z+2, r2	; 0x02
    1e36:	ea 0c       	add	r14, r10
    1e38:	fb 1c       	adc	r15, r11
    1e3a:	0c 1d       	adc	r16, r12
    1e3c:	1d 1d       	adc	r17, r13
    1e3e:	e4 82       	std	Z+4, r14	; 0x04
    1e40:	f5 82       	std	Z+5, r15	; 0x05
    1e42:	06 83       	std	Z+6, r16	; 0x06
    1e44:	17 83       	std	Z+7, r17	; 0x07
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	80 83       	st	Z, r24
    1e4a:	24 81       	ldd	r18, Z+4	; 0x04
    1e4c:	35 81       	ldd	r19, Z+5	; 0x05
    1e4e:	46 81       	ldd	r20, Z+6	; 0x06
    1e50:	57 81       	ldd	r21, Z+7	; 0x07
    1e52:	57 ff       	sbrs	r21, 7
    1e54:	1a c0       	rjmp	.+52     	; 0x1e8a <_fpadd_parts+0x286>
    1e56:	c9 01       	movw	r24, r18
    1e58:	aa 27       	eor	r26, r26
    1e5a:	97 fd       	sbrc	r25, 7
    1e5c:	a0 95       	com	r26
    1e5e:	ba 2f       	mov	r27, r26
    1e60:	81 70       	andi	r24, 0x01	; 1
    1e62:	90 70       	andi	r25, 0x00	; 0
    1e64:	a0 70       	andi	r26, 0x00	; 0
    1e66:	b0 70       	andi	r27, 0x00	; 0
    1e68:	56 95       	lsr	r21
    1e6a:	47 95       	ror	r20
    1e6c:	37 95       	ror	r19
    1e6e:	27 95       	ror	r18
    1e70:	82 2b       	or	r24, r18
    1e72:	93 2b       	or	r25, r19
    1e74:	a4 2b       	or	r26, r20
    1e76:	b5 2b       	or	r27, r21
    1e78:	84 83       	std	Z+4, r24	; 0x04
    1e7a:	95 83       	std	Z+5, r25	; 0x05
    1e7c:	a6 83       	std	Z+6, r26	; 0x06
    1e7e:	b7 83       	std	Z+7, r27	; 0x07
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	93 83       	std	Z+3, r25	; 0x03
    1e88:	82 83       	std	Z+2, r24	; 0x02
    1e8a:	df 01       	movw	r26, r30
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <_fpadd_parts+0x28c>
    1e8e:	d2 01       	movw	r26, r4
    1e90:	cd 01       	movw	r24, r26
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	e2 e1       	ldi	r30, 0x12	; 18
    1e98:	0c 94 b2 36 	jmp	0x6d64	; 0x6d64 <__epilogue_restores__>

00001e9c <__subsf3>:
    1e9c:	a0 e2       	ldi	r26, 0x20	; 32
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e4 e5       	ldi	r30, 0x54	; 84
    1ea2:	ff e0       	ldi	r31, 0x0F	; 15
    1ea4:	0c 94 a2 36 	jmp	0x6d44	; 0x6d44 <__prologue_saves__+0x18>
    1ea8:	69 83       	std	Y+1, r22	; 0x01
    1eaa:	7a 83       	std	Y+2, r23	; 0x02
    1eac:	8b 83       	std	Y+3, r24	; 0x03
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	2d 83       	std	Y+5, r18	; 0x05
    1eb2:	3e 83       	std	Y+6, r19	; 0x06
    1eb4:	4f 83       	std	Y+7, r20	; 0x07
    1eb6:	58 87       	std	Y+8, r21	; 0x08
    1eb8:	e9 e0       	ldi	r30, 0x09	; 9
    1eba:	ee 2e       	mov	r14, r30
    1ebc:	f1 2c       	mov	r15, r1
    1ebe:	ec 0e       	add	r14, r28
    1ec0:	fd 1e       	adc	r15, r29
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1ecc:	8e 01       	movw	r16, r28
    1ece:	0f 5e       	subi	r16, 0xEF	; 239
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	05 96       	adiw	r24, 0x05	; 5
    1ed6:	b8 01       	movw	r22, r16
    1ed8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1edc:	8a 89       	ldd	r24, Y+18	; 0x12
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	89 27       	eor	r24, r25
    1ee2:	8a 8b       	std	Y+18, r24	; 0x12
    1ee4:	c7 01       	movw	r24, r14
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	ae 01       	movw	r20, r28
    1eea:	47 5e       	subi	r20, 0xE7	; 231
    1eec:	5f 4f       	sbci	r21, 0xFF	; 255
    1eee:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_fpadd_parts>
    1ef2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    1ef6:	a0 96       	adiw	r28, 0x20	; 32
    1ef8:	e6 e0       	ldi	r30, 0x06	; 6
    1efa:	0c 94 be 36 	jmp	0x6d7c	; 0x6d7c <__epilogue_restores__+0x18>

00001efe <__addsf3>:
    1efe:	a0 e2       	ldi	r26, 0x20	; 32
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e5 e8       	ldi	r30, 0x85	; 133
    1f04:	ff e0       	ldi	r31, 0x0F	; 15
    1f06:	0c 94 a2 36 	jmp	0x6d44	; 0x6d44 <__prologue_saves__+0x18>
    1f0a:	69 83       	std	Y+1, r22	; 0x01
    1f0c:	7a 83       	std	Y+2, r23	; 0x02
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
    1f10:	9c 83       	std	Y+4, r25	; 0x04
    1f12:	2d 83       	std	Y+5, r18	; 0x05
    1f14:	3e 83       	std	Y+6, r19	; 0x06
    1f16:	4f 83       	std	Y+7, r20	; 0x07
    1f18:	58 87       	std	Y+8, r21	; 0x08
    1f1a:	f9 e0       	ldi	r31, 0x09	; 9
    1f1c:	ef 2e       	mov	r14, r31
    1f1e:	f1 2c       	mov	r15, r1
    1f20:	ec 0e       	add	r14, r28
    1f22:	fd 1e       	adc	r15, r29
    1f24:	ce 01       	movw	r24, r28
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	b7 01       	movw	r22, r14
    1f2a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1f2e:	8e 01       	movw	r16, r28
    1f30:	0f 5e       	subi	r16, 0xEF	; 239
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	ce 01       	movw	r24, r28
    1f36:	05 96       	adiw	r24, 0x05	; 5
    1f38:	b8 01       	movw	r22, r16
    1f3a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1f3e:	c7 01       	movw	r24, r14
    1f40:	b8 01       	movw	r22, r16
    1f42:	ae 01       	movw	r20, r28
    1f44:	47 5e       	subi	r20, 0xE7	; 231
    1f46:	5f 4f       	sbci	r21, 0xFF	; 255
    1f48:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_fpadd_parts>
    1f4c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    1f50:	a0 96       	adiw	r28, 0x20	; 32
    1f52:	e6 e0       	ldi	r30, 0x06	; 6
    1f54:	0c 94 be 36 	jmp	0x6d7c	; 0x6d7c <__epilogue_restores__+0x18>

00001f58 <__mulsf3>:
    1f58:	a0 e2       	ldi	r26, 0x20	; 32
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e2 eb       	ldi	r30, 0xB2	; 178
    1f5e:	ff e0       	ldi	r31, 0x0F	; 15
    1f60:	0c 94 96 36 	jmp	0x6d2c	; 0x6d2c <__prologue_saves__>
    1f64:	69 83       	std	Y+1, r22	; 0x01
    1f66:	7a 83       	std	Y+2, r23	; 0x02
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	2d 83       	std	Y+5, r18	; 0x05
    1f6e:	3e 83       	std	Y+6, r19	; 0x06
    1f70:	4f 83       	std	Y+7, r20	; 0x07
    1f72:	58 87       	std	Y+8, r21	; 0x08
    1f74:	ce 01       	movw	r24, r28
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	be 01       	movw	r22, r28
    1f7a:	67 5f       	subi	r22, 0xF7	; 247
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1f82:	ce 01       	movw	r24, r28
    1f84:	05 96       	adiw	r24, 0x05	; 5
    1f86:	be 01       	movw	r22, r28
    1f88:	6f 5e       	subi	r22, 0xEF	; 239
    1f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    1f90:	99 85       	ldd	r25, Y+9	; 0x09
    1f92:	92 30       	cpi	r25, 0x02	; 2
    1f94:	88 f0       	brcs	.+34     	; 0x1fb8 <__mulsf3+0x60>
    1f96:	89 89       	ldd	r24, Y+17	; 0x11
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	c8 f0       	brcs	.+50     	; 0x1fce <__mulsf3+0x76>
    1f9c:	94 30       	cpi	r25, 0x04	; 4
    1f9e:	19 f4       	brne	.+6      	; 0x1fa6 <__mulsf3+0x4e>
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	51 f4       	brne	.+20     	; 0x1fb8 <__mulsf3+0x60>
    1fa4:	04 c0       	rjmp	.+8      	; 0x1fae <__mulsf3+0x56>
    1fa6:	84 30       	cpi	r24, 0x04	; 4
    1fa8:	29 f4       	brne	.+10     	; 0x1fb4 <__mulsf3+0x5c>
    1faa:	92 30       	cpi	r25, 0x02	; 2
    1fac:	81 f4       	brne	.+32     	; 0x1fce <__mulsf3+0x76>
    1fae:	8e e6       	ldi	r24, 0x6E	; 110
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	c6 c0       	rjmp	.+396    	; 0x2140 <__mulsf3+0x1e8>
    1fb4:	92 30       	cpi	r25, 0x02	; 2
    1fb6:	49 f4       	brne	.+18     	; 0x1fca <__mulsf3+0x72>
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	8a 89       	ldd	r24, Y+18	; 0x12
    1fbe:	98 13       	cpse	r25, r24
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	2a 87       	std	Y+10, r18	; 0x0a
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	09 96       	adiw	r24, 0x09	; 9
    1fc8:	bb c0       	rjmp	.+374    	; 0x2140 <__mulsf3+0x1e8>
    1fca:	82 30       	cpi	r24, 0x02	; 2
    1fcc:	49 f4       	brne	.+18     	; 0x1fe0 <__mulsf3+0x88>
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	8a 89       	ldd	r24, Y+18	; 0x12
    1fd4:	98 13       	cpse	r25, r24
    1fd6:	21 e0       	ldi	r18, 0x01	; 1
    1fd8:	2a 8b       	std	Y+18, r18	; 0x12
    1fda:	ce 01       	movw	r24, r28
    1fdc:	41 96       	adiw	r24, 0x11	; 17
    1fde:	b0 c0       	rjmp	.+352    	; 0x2140 <__mulsf3+0x1e8>
    1fe0:	2d 84       	ldd	r2, Y+13	; 0x0d
    1fe2:	3e 84       	ldd	r3, Y+14	; 0x0e
    1fe4:	4f 84       	ldd	r4, Y+15	; 0x0f
    1fe6:	58 88       	ldd	r5, Y+16	; 0x10
    1fe8:	6d 88       	ldd	r6, Y+21	; 0x15
    1fea:	7e 88       	ldd	r7, Y+22	; 0x16
    1fec:	8f 88       	ldd	r8, Y+23	; 0x17
    1fee:	98 8c       	ldd	r9, Y+24	; 0x18
    1ff0:	ee 24       	eor	r14, r14
    1ff2:	ff 24       	eor	r15, r15
    1ff4:	87 01       	movw	r16, r14
    1ff6:	aa 24       	eor	r10, r10
    1ff8:	bb 24       	eor	r11, r11
    1ffa:	65 01       	movw	r12, r10
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	e0 e0       	ldi	r30, 0x00	; 0
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	c1 01       	movw	r24, r2
    200a:	81 70       	andi	r24, 0x01	; 1
    200c:	90 70       	andi	r25, 0x00	; 0
    200e:	89 2b       	or	r24, r25
    2010:	e9 f0       	breq	.+58     	; 0x204c <__mulsf3+0xf4>
    2012:	e6 0c       	add	r14, r6
    2014:	f7 1c       	adc	r15, r7
    2016:	08 1d       	adc	r16, r8
    2018:	19 1d       	adc	r17, r9
    201a:	9a 01       	movw	r18, r20
    201c:	ab 01       	movw	r20, r22
    201e:	2a 0d       	add	r18, r10
    2020:	3b 1d       	adc	r19, r11
    2022:	4c 1d       	adc	r20, r12
    2024:	5d 1d       	adc	r21, r13
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e6 14       	cp	r14, r6
    2030:	f7 04       	cpc	r15, r7
    2032:	08 05       	cpc	r16, r8
    2034:	19 05       	cpc	r17, r9
    2036:	20 f4       	brcc	.+8      	; 0x2040 <__mulsf3+0xe8>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 e0       	ldi	r26, 0x00	; 0
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	ba 01       	movw	r22, r20
    2042:	a9 01       	movw	r20, r18
    2044:	48 0f       	add	r20, r24
    2046:	59 1f       	adc	r21, r25
    2048:	6a 1f       	adc	r22, r26
    204a:	7b 1f       	adc	r23, r27
    204c:	aa 0c       	add	r10, r10
    204e:	bb 1c       	adc	r11, r11
    2050:	cc 1c       	adc	r12, r12
    2052:	dd 1c       	adc	r13, r13
    2054:	97 fe       	sbrs	r9, 7
    2056:	08 c0       	rjmp	.+16     	; 0x2068 <__mulsf3+0x110>
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	a8 2a       	or	r10, r24
    2062:	b9 2a       	or	r11, r25
    2064:	ca 2a       	or	r12, r26
    2066:	db 2a       	or	r13, r27
    2068:	31 96       	adiw	r30, 0x01	; 1
    206a:	e0 32       	cpi	r30, 0x20	; 32
    206c:	f1 05       	cpc	r31, r1
    206e:	49 f0       	breq	.+18     	; 0x2082 <__mulsf3+0x12a>
    2070:	66 0c       	add	r6, r6
    2072:	77 1c       	adc	r7, r7
    2074:	88 1c       	adc	r8, r8
    2076:	99 1c       	adc	r9, r9
    2078:	56 94       	lsr	r5
    207a:	47 94       	ror	r4
    207c:	37 94       	ror	r3
    207e:	27 94       	ror	r2
    2080:	c3 cf       	rjmp	.-122    	; 0x2008 <__mulsf3+0xb0>
    2082:	fa 85       	ldd	r31, Y+10	; 0x0a
    2084:	ea 89       	ldd	r30, Y+18	; 0x12
    2086:	2b 89       	ldd	r18, Y+19	; 0x13
    2088:	3c 89       	ldd	r19, Y+20	; 0x14
    208a:	8b 85       	ldd	r24, Y+11	; 0x0b
    208c:	9c 85       	ldd	r25, Y+12	; 0x0c
    208e:	28 0f       	add	r18, r24
    2090:	39 1f       	adc	r19, r25
    2092:	2e 5f       	subi	r18, 0xFE	; 254
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	17 c0       	rjmp	.+46     	; 0x20c6 <__mulsf3+0x16e>
    2098:	ca 01       	movw	r24, r20
    209a:	81 70       	andi	r24, 0x01	; 1
    209c:	90 70       	andi	r25, 0x00	; 0
    209e:	89 2b       	or	r24, r25
    20a0:	61 f0       	breq	.+24     	; 0x20ba <__mulsf3+0x162>
    20a2:	16 95       	lsr	r17
    20a4:	07 95       	ror	r16
    20a6:	f7 94       	ror	r15
    20a8:	e7 94       	ror	r14
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e0       	ldi	r26, 0x00	; 0
    20b0:	b0 e8       	ldi	r27, 0x80	; 128
    20b2:	e8 2a       	or	r14, r24
    20b4:	f9 2a       	or	r15, r25
    20b6:	0a 2b       	or	r16, r26
    20b8:	1b 2b       	or	r17, r27
    20ba:	76 95       	lsr	r23
    20bc:	67 95       	ror	r22
    20be:	57 95       	ror	r21
    20c0:	47 95       	ror	r20
    20c2:	2f 5f       	subi	r18, 0xFF	; 255
    20c4:	3f 4f       	sbci	r19, 0xFF	; 255
    20c6:	77 fd       	sbrc	r23, 7
    20c8:	e7 cf       	rjmp	.-50     	; 0x2098 <__mulsf3+0x140>
    20ca:	0c c0       	rjmp	.+24     	; 0x20e4 <__mulsf3+0x18c>
    20cc:	44 0f       	add	r20, r20
    20ce:	55 1f       	adc	r21, r21
    20d0:	66 1f       	adc	r22, r22
    20d2:	77 1f       	adc	r23, r23
    20d4:	17 fd       	sbrc	r17, 7
    20d6:	41 60       	ori	r20, 0x01	; 1
    20d8:	ee 0c       	add	r14, r14
    20da:	ff 1c       	adc	r15, r15
    20dc:	00 1f       	adc	r16, r16
    20de:	11 1f       	adc	r17, r17
    20e0:	21 50       	subi	r18, 0x01	; 1
    20e2:	30 40       	sbci	r19, 0x00	; 0
    20e4:	40 30       	cpi	r20, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	59 07       	cpc	r21, r25
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	69 07       	cpc	r22, r25
    20ee:	90 e4       	ldi	r25, 0x40	; 64
    20f0:	79 07       	cpc	r23, r25
    20f2:	60 f3       	brcs	.-40     	; 0x20cc <__mulsf3+0x174>
    20f4:	2b 8f       	std	Y+27, r18	; 0x1b
    20f6:	3c 8f       	std	Y+28, r19	; 0x1c
    20f8:	db 01       	movw	r26, r22
    20fa:	ca 01       	movw	r24, r20
    20fc:	8f 77       	andi	r24, 0x7F	; 127
    20fe:	90 70       	andi	r25, 0x00	; 0
    2100:	a0 70       	andi	r26, 0x00	; 0
    2102:	b0 70       	andi	r27, 0x00	; 0
    2104:	80 34       	cpi	r24, 0x40	; 64
    2106:	91 05       	cpc	r25, r1
    2108:	a1 05       	cpc	r26, r1
    210a:	b1 05       	cpc	r27, r1
    210c:	61 f4       	brne	.+24     	; 0x2126 <__mulsf3+0x1ce>
    210e:	47 fd       	sbrc	r20, 7
    2110:	0a c0       	rjmp	.+20     	; 0x2126 <__mulsf3+0x1ce>
    2112:	e1 14       	cp	r14, r1
    2114:	f1 04       	cpc	r15, r1
    2116:	01 05       	cpc	r16, r1
    2118:	11 05       	cpc	r17, r1
    211a:	29 f0       	breq	.+10     	; 0x2126 <__mulsf3+0x1ce>
    211c:	40 5c       	subi	r20, 0xC0	; 192
    211e:	5f 4f       	sbci	r21, 0xFF	; 255
    2120:	6f 4f       	sbci	r22, 0xFF	; 255
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	40 78       	andi	r20, 0x80	; 128
    2126:	1a 8e       	std	Y+26, r1	; 0x1a
    2128:	fe 17       	cp	r31, r30
    212a:	11 f0       	breq	.+4      	; 0x2130 <__mulsf3+0x1d8>
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	8a 8f       	std	Y+26, r24	; 0x1a
    2130:	4d 8f       	std	Y+29, r20	; 0x1d
    2132:	5e 8f       	std	Y+30, r21	; 0x1e
    2134:	6f 8f       	std	Y+31, r22	; 0x1f
    2136:	78 a3       	std	Y+32, r23	; 0x20
    2138:	83 e0       	ldi	r24, 0x03	; 3
    213a:	89 8f       	std	Y+25, r24	; 0x19
    213c:	ce 01       	movw	r24, r28
    213e:	49 96       	adiw	r24, 0x19	; 25
    2140:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    2144:	a0 96       	adiw	r28, 0x20	; 32
    2146:	e2 e1       	ldi	r30, 0x12	; 18
    2148:	0c 94 b2 36 	jmp	0x6d64	; 0x6d64 <__epilogue_restores__>

0000214c <__divsf3>:
    214c:	a8 e1       	ldi	r26, 0x18	; 24
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ec ea       	ldi	r30, 0xAC	; 172
    2152:	f0 e1       	ldi	r31, 0x10	; 16
    2154:	0c 94 9e 36 	jmp	0x6d3c	; 0x6d3c <__prologue_saves__+0x10>
    2158:	69 83       	std	Y+1, r22	; 0x01
    215a:	7a 83       	std	Y+2, r23	; 0x02
    215c:	8b 83       	std	Y+3, r24	; 0x03
    215e:	9c 83       	std	Y+4, r25	; 0x04
    2160:	2d 83       	std	Y+5, r18	; 0x05
    2162:	3e 83       	std	Y+6, r19	; 0x06
    2164:	4f 83       	std	Y+7, r20	; 0x07
    2166:	58 87       	std	Y+8, r21	; 0x08
    2168:	b9 e0       	ldi	r27, 0x09	; 9
    216a:	eb 2e       	mov	r14, r27
    216c:	f1 2c       	mov	r15, r1
    216e:	ec 0e       	add	r14, r28
    2170:	fd 1e       	adc	r15, r29
    2172:	ce 01       	movw	r24, r28
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	b7 01       	movw	r22, r14
    2178:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    217c:	8e 01       	movw	r16, r28
    217e:	0f 5e       	subi	r16, 0xEF	; 239
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	ce 01       	movw	r24, r28
    2184:	05 96       	adiw	r24, 0x05	; 5
    2186:	b8 01       	movw	r22, r16
    2188:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    218c:	29 85       	ldd	r18, Y+9	; 0x09
    218e:	22 30       	cpi	r18, 0x02	; 2
    2190:	08 f4       	brcc	.+2      	; 0x2194 <__divsf3+0x48>
    2192:	7e c0       	rjmp	.+252    	; 0x2290 <__divsf3+0x144>
    2194:	39 89       	ldd	r19, Y+17	; 0x11
    2196:	32 30       	cpi	r19, 0x02	; 2
    2198:	10 f4       	brcc	.+4      	; 0x219e <__divsf3+0x52>
    219a:	b8 01       	movw	r22, r16
    219c:	7c c0       	rjmp	.+248    	; 0x2296 <__divsf3+0x14a>
    219e:	8a 85       	ldd	r24, Y+10	; 0x0a
    21a0:	9a 89       	ldd	r25, Y+18	; 0x12
    21a2:	89 27       	eor	r24, r25
    21a4:	8a 87       	std	Y+10, r24	; 0x0a
    21a6:	24 30       	cpi	r18, 0x04	; 4
    21a8:	11 f0       	breq	.+4      	; 0x21ae <__divsf3+0x62>
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 f4       	brne	.+12     	; 0x21ba <__divsf3+0x6e>
    21ae:	23 17       	cp	r18, r19
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <__divsf3+0x68>
    21b2:	6e c0       	rjmp	.+220    	; 0x2290 <__divsf3+0x144>
    21b4:	6e e6       	ldi	r22, 0x6E	; 110
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	6e c0       	rjmp	.+220    	; 0x2296 <__divsf3+0x14a>
    21ba:	34 30       	cpi	r19, 0x04	; 4
    21bc:	39 f4       	brne	.+14     	; 0x21cc <__divsf3+0x80>
    21be:	1d 86       	std	Y+13, r1	; 0x0d
    21c0:	1e 86       	std	Y+14, r1	; 0x0e
    21c2:	1f 86       	std	Y+15, r1	; 0x0f
    21c4:	18 8a       	std	Y+16, r1	; 0x10
    21c6:	1c 86       	std	Y+12, r1	; 0x0c
    21c8:	1b 86       	std	Y+11, r1	; 0x0b
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <__divsf3+0x88>
    21cc:	32 30       	cpi	r19, 0x02	; 2
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <__divsf3+0x8c>
    21d0:	84 e0       	ldi	r24, 0x04	; 4
    21d2:	89 87       	std	Y+9, r24	; 0x09
    21d4:	b7 01       	movw	r22, r14
    21d6:	5f c0       	rjmp	.+190    	; 0x2296 <__divsf3+0x14a>
    21d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    21da:	3c 85       	ldd	r19, Y+12	; 0x0c
    21dc:	8b 89       	ldd	r24, Y+19	; 0x13
    21de:	9c 89       	ldd	r25, Y+20	; 0x14
    21e0:	28 1b       	sub	r18, r24
    21e2:	39 0b       	sbc	r19, r25
    21e4:	3c 87       	std	Y+12, r19	; 0x0c
    21e6:	2b 87       	std	Y+11, r18	; 0x0b
    21e8:	ed 84       	ldd	r14, Y+13	; 0x0d
    21ea:	fe 84       	ldd	r15, Y+14	; 0x0e
    21ec:	0f 85       	ldd	r16, Y+15	; 0x0f
    21ee:	18 89       	ldd	r17, Y+16	; 0x10
    21f0:	ad 88       	ldd	r10, Y+21	; 0x15
    21f2:	be 88       	ldd	r11, Y+22	; 0x16
    21f4:	cf 88       	ldd	r12, Y+23	; 0x17
    21f6:	d8 8c       	ldd	r13, Y+24	; 0x18
    21f8:	ea 14       	cp	r14, r10
    21fa:	fb 04       	cpc	r15, r11
    21fc:	0c 05       	cpc	r16, r12
    21fe:	1d 05       	cpc	r17, r13
    2200:	40 f4       	brcc	.+16     	; 0x2212 <__divsf3+0xc6>
    2202:	ee 0c       	add	r14, r14
    2204:	ff 1c       	adc	r15, r15
    2206:	00 1f       	adc	r16, r16
    2208:	11 1f       	adc	r17, r17
    220a:	21 50       	subi	r18, 0x01	; 1
    220c:	30 40       	sbci	r19, 0x00	; 0
    220e:	3c 87       	std	Y+12, r19	; 0x0c
    2210:	2b 87       	std	Y+11, r18	; 0x0b
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a0 e0       	ldi	r26, 0x00	; 0
    2220:	b0 e4       	ldi	r27, 0x40	; 64
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	ea 14       	cp	r14, r10
    2228:	fb 04       	cpc	r15, r11
    222a:	0c 05       	cpc	r16, r12
    222c:	1d 05       	cpc	r17, r13
    222e:	40 f0       	brcs	.+16     	; 0x2240 <__divsf3+0xf4>
    2230:	28 2b       	or	r18, r24
    2232:	39 2b       	or	r19, r25
    2234:	4a 2b       	or	r20, r26
    2236:	5b 2b       	or	r21, r27
    2238:	ea 18       	sub	r14, r10
    223a:	fb 08       	sbc	r15, r11
    223c:	0c 09       	sbc	r16, r12
    223e:	1d 09       	sbc	r17, r13
    2240:	b6 95       	lsr	r27
    2242:	a7 95       	ror	r26
    2244:	97 95       	ror	r25
    2246:	87 95       	ror	r24
    2248:	ee 0c       	add	r14, r14
    224a:	ff 1c       	adc	r15, r15
    224c:	00 1f       	adc	r16, r16
    224e:	11 1f       	adc	r17, r17
    2250:	6f 5f       	subi	r22, 0xFF	; 255
    2252:	7f 4f       	sbci	r23, 0xFF	; 255
    2254:	6f 31       	cpi	r22, 0x1F	; 31
    2256:	71 05       	cpc	r23, r1
    2258:	31 f7       	brne	.-52     	; 0x2226 <__divsf3+0xda>
    225a:	da 01       	movw	r26, r20
    225c:	c9 01       	movw	r24, r18
    225e:	8f 77       	andi	r24, 0x7F	; 127
    2260:	90 70       	andi	r25, 0x00	; 0
    2262:	a0 70       	andi	r26, 0x00	; 0
    2264:	b0 70       	andi	r27, 0x00	; 0
    2266:	80 34       	cpi	r24, 0x40	; 64
    2268:	91 05       	cpc	r25, r1
    226a:	a1 05       	cpc	r26, r1
    226c:	b1 05       	cpc	r27, r1
    226e:	61 f4       	brne	.+24     	; 0x2288 <__divsf3+0x13c>
    2270:	27 fd       	sbrc	r18, 7
    2272:	0a c0       	rjmp	.+20     	; 0x2288 <__divsf3+0x13c>
    2274:	e1 14       	cp	r14, r1
    2276:	f1 04       	cpc	r15, r1
    2278:	01 05       	cpc	r16, r1
    227a:	11 05       	cpc	r17, r1
    227c:	29 f0       	breq	.+10     	; 0x2288 <__divsf3+0x13c>
    227e:	20 5c       	subi	r18, 0xC0	; 192
    2280:	3f 4f       	sbci	r19, 0xFF	; 255
    2282:	4f 4f       	sbci	r20, 0xFF	; 255
    2284:	5f 4f       	sbci	r21, 0xFF	; 255
    2286:	20 78       	andi	r18, 0x80	; 128
    2288:	2d 87       	std	Y+13, r18	; 0x0d
    228a:	3e 87       	std	Y+14, r19	; 0x0e
    228c:	4f 87       	std	Y+15, r20	; 0x0f
    228e:	58 8b       	std	Y+16, r21	; 0x10
    2290:	be 01       	movw	r22, r28
    2292:	67 5f       	subi	r22, 0xF7	; 247
    2294:	7f 4f       	sbci	r23, 0xFF	; 255
    2296:	cb 01       	movw	r24, r22
    2298:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    229c:	68 96       	adiw	r28, 0x18	; 24
    229e:	ea e0       	ldi	r30, 0x0A	; 10
    22a0:	0c 94 ba 36 	jmp	0x6d74	; 0x6d74 <__epilogue_restores__+0x10>

000022a4 <__gtsf2>:
    22a4:	a8 e1       	ldi	r26, 0x18	; 24
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e8 e5       	ldi	r30, 0x58	; 88
    22aa:	f1 e1       	ldi	r31, 0x11	; 17
    22ac:	0c 94 a2 36 	jmp	0x6d44	; 0x6d44 <__prologue_saves__+0x18>
    22b0:	69 83       	std	Y+1, r22	; 0x01
    22b2:	7a 83       	std	Y+2, r23	; 0x02
    22b4:	8b 83       	std	Y+3, r24	; 0x03
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	2d 83       	std	Y+5, r18	; 0x05
    22ba:	3e 83       	std	Y+6, r19	; 0x06
    22bc:	4f 83       	std	Y+7, r20	; 0x07
    22be:	58 87       	std	Y+8, r21	; 0x08
    22c0:	89 e0       	ldi	r24, 0x09	; 9
    22c2:	e8 2e       	mov	r14, r24
    22c4:	f1 2c       	mov	r15, r1
    22c6:	ec 0e       	add	r14, r28
    22c8:	fd 1e       	adc	r15, r29
    22ca:	ce 01       	movw	r24, r28
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	b7 01       	movw	r22, r14
    22d0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    22d4:	8e 01       	movw	r16, r28
    22d6:	0f 5e       	subi	r16, 0xEF	; 239
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	ce 01       	movw	r24, r28
    22dc:	05 96       	adiw	r24, 0x05	; 5
    22de:	b8 01       	movw	r22, r16
    22e0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	82 30       	cpi	r24, 0x02	; 2
    22e8:	40 f0       	brcs	.+16     	; 0x22fa <__gtsf2+0x56>
    22ea:	89 89       	ldd	r24, Y+17	; 0x11
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	28 f0       	brcs	.+10     	; 0x22fa <__gtsf2+0x56>
    22f0:	c7 01       	movw	r24, r14
    22f2:	b8 01       	movw	r22, r16
    22f4:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fpcmp_parts_f>
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <__gtsf2+0x58>
    22fa:	8f ef       	ldi	r24, 0xFF	; 255
    22fc:	68 96       	adiw	r28, 0x18	; 24
    22fe:	e6 e0       	ldi	r30, 0x06	; 6
    2300:	0c 94 be 36 	jmp	0x6d7c	; 0x6d7c <__epilogue_restores__+0x18>

00002304 <__gesf2>:
    2304:	a8 e1       	ldi	r26, 0x18	; 24
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e8 e8       	ldi	r30, 0x88	; 136
    230a:	f1 e1       	ldi	r31, 0x11	; 17
    230c:	0c 94 a2 36 	jmp	0x6d44	; 0x6d44 <__prologue_saves__+0x18>
    2310:	69 83       	std	Y+1, r22	; 0x01
    2312:	7a 83       	std	Y+2, r23	; 0x02
    2314:	8b 83       	std	Y+3, r24	; 0x03
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	2d 83       	std	Y+5, r18	; 0x05
    231a:	3e 83       	std	Y+6, r19	; 0x06
    231c:	4f 83       	std	Y+7, r20	; 0x07
    231e:	58 87       	std	Y+8, r21	; 0x08
    2320:	89 e0       	ldi	r24, 0x09	; 9
    2322:	e8 2e       	mov	r14, r24
    2324:	f1 2c       	mov	r15, r1
    2326:	ec 0e       	add	r14, r28
    2328:	fd 1e       	adc	r15, r29
    232a:	ce 01       	movw	r24, r28
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	b7 01       	movw	r22, r14
    2330:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2334:	8e 01       	movw	r16, r28
    2336:	0f 5e       	subi	r16, 0xEF	; 239
    2338:	1f 4f       	sbci	r17, 0xFF	; 255
    233a:	ce 01       	movw	r24, r28
    233c:	05 96       	adiw	r24, 0x05	; 5
    233e:	b8 01       	movw	r22, r16
    2340:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	82 30       	cpi	r24, 0x02	; 2
    2348:	40 f0       	brcs	.+16     	; 0x235a <__gesf2+0x56>
    234a:	89 89       	ldd	r24, Y+17	; 0x11
    234c:	82 30       	cpi	r24, 0x02	; 2
    234e:	28 f0       	brcs	.+10     	; 0x235a <__gesf2+0x56>
    2350:	c7 01       	movw	r24, r14
    2352:	b8 01       	movw	r22, r16
    2354:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fpcmp_parts_f>
    2358:	01 c0       	rjmp	.+2      	; 0x235c <__gesf2+0x58>
    235a:	8f ef       	ldi	r24, 0xFF	; 255
    235c:	68 96       	adiw	r28, 0x18	; 24
    235e:	e6 e0       	ldi	r30, 0x06	; 6
    2360:	0c 94 be 36 	jmp	0x6d7c	; 0x6d7c <__epilogue_restores__+0x18>

00002364 <__ltsf2>:
    2364:	a8 e1       	ldi	r26, 0x18	; 24
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e8 eb       	ldi	r30, 0xB8	; 184
    236a:	f1 e1       	ldi	r31, 0x11	; 17
    236c:	0c 94 a2 36 	jmp	0x6d44	; 0x6d44 <__prologue_saves__+0x18>
    2370:	69 83       	std	Y+1, r22	; 0x01
    2372:	7a 83       	std	Y+2, r23	; 0x02
    2374:	8b 83       	std	Y+3, r24	; 0x03
    2376:	9c 83       	std	Y+4, r25	; 0x04
    2378:	2d 83       	std	Y+5, r18	; 0x05
    237a:	3e 83       	std	Y+6, r19	; 0x06
    237c:	4f 83       	std	Y+7, r20	; 0x07
    237e:	58 87       	std	Y+8, r21	; 0x08
    2380:	89 e0       	ldi	r24, 0x09	; 9
    2382:	e8 2e       	mov	r14, r24
    2384:	f1 2c       	mov	r15, r1
    2386:	ec 0e       	add	r14, r28
    2388:	fd 1e       	adc	r15, r29
    238a:	ce 01       	movw	r24, r28
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	b7 01       	movw	r22, r14
    2390:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    2394:	8e 01       	movw	r16, r28
    2396:	0f 5e       	subi	r16, 0xEF	; 239
    2398:	1f 4f       	sbci	r17, 0xFF	; 255
    239a:	ce 01       	movw	r24, r28
    239c:	05 96       	adiw	r24, 0x05	; 5
    239e:	b8 01       	movw	r22, r16
    23a0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	82 30       	cpi	r24, 0x02	; 2
    23a8:	40 f0       	brcs	.+16     	; 0x23ba <__ltsf2+0x56>
    23aa:	89 89       	ldd	r24, Y+17	; 0x11
    23ac:	82 30       	cpi	r24, 0x02	; 2
    23ae:	28 f0       	brcs	.+10     	; 0x23ba <__ltsf2+0x56>
    23b0:	c7 01       	movw	r24, r14
    23b2:	b8 01       	movw	r22, r16
    23b4:	0e 94 ca 14 	call	0x2994	; 0x2994 <__fpcmp_parts_f>
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <__ltsf2+0x58>
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	68 96       	adiw	r28, 0x18	; 24
    23be:	e6 e0       	ldi	r30, 0x06	; 6
    23c0:	0c 94 be 36 	jmp	0x6d7c	; 0x6d7c <__epilogue_restores__+0x18>

000023c4 <__fixsfsi>:
    23c4:	ac e0       	ldi	r26, 0x0C	; 12
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e8 ee       	ldi	r30, 0xE8	; 232
    23ca:	f1 e1       	ldi	r31, 0x11	; 17
    23cc:	0c 94 a6 36 	jmp	0x6d4c	; 0x6d4c <__prologue_saves__+0x20>
    23d0:	69 83       	std	Y+1, r22	; 0x01
    23d2:	7a 83       	std	Y+2, r23	; 0x02
    23d4:	8b 83       	std	Y+3, r24	; 0x03
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	be 01       	movw	r22, r28
    23de:	6b 5f       	subi	r22, 0xFB	; 251
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__unpack_f>
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	82 30       	cpi	r24, 0x02	; 2
    23ea:	61 f1       	breq	.+88     	; 0x2444 <__fixsfsi+0x80>
    23ec:	82 30       	cpi	r24, 0x02	; 2
    23ee:	50 f1       	brcs	.+84     	; 0x2444 <__fixsfsi+0x80>
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	21 f4       	brne	.+8      	; 0x23fc <__fixsfsi+0x38>
    23f4:	8e 81       	ldd	r24, Y+6	; 0x06
    23f6:	88 23       	and	r24, r24
    23f8:	51 f1       	breq	.+84     	; 0x244e <__fixsfsi+0x8a>
    23fa:	2e c0       	rjmp	.+92     	; 0x2458 <__fixsfsi+0x94>
    23fc:	2f 81       	ldd	r18, Y+7	; 0x07
    23fe:	38 85       	ldd	r19, Y+8	; 0x08
    2400:	37 fd       	sbrc	r19, 7
    2402:	20 c0       	rjmp	.+64     	; 0x2444 <__fixsfsi+0x80>
    2404:	6e 81       	ldd	r22, Y+6	; 0x06
    2406:	2f 31       	cpi	r18, 0x1F	; 31
    2408:	31 05       	cpc	r19, r1
    240a:	1c f0       	brlt	.+6      	; 0x2412 <__fixsfsi+0x4e>
    240c:	66 23       	and	r22, r22
    240e:	f9 f0       	breq	.+62     	; 0x244e <__fixsfsi+0x8a>
    2410:	23 c0       	rjmp	.+70     	; 0x2458 <__fixsfsi+0x94>
    2412:	8e e1       	ldi	r24, 0x1E	; 30
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	82 1b       	sub	r24, r18
    2418:	93 0b       	sbc	r25, r19
    241a:	29 85       	ldd	r18, Y+9	; 0x09
    241c:	3a 85       	ldd	r19, Y+10	; 0x0a
    241e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2420:	5c 85       	ldd	r21, Y+12	; 0x0c
    2422:	04 c0       	rjmp	.+8      	; 0x242c <__fixsfsi+0x68>
    2424:	56 95       	lsr	r21
    2426:	47 95       	ror	r20
    2428:	37 95       	ror	r19
    242a:	27 95       	ror	r18
    242c:	8a 95       	dec	r24
    242e:	d2 f7       	brpl	.-12     	; 0x2424 <__fixsfsi+0x60>
    2430:	66 23       	and	r22, r22
    2432:	b1 f0       	breq	.+44     	; 0x2460 <__fixsfsi+0x9c>
    2434:	50 95       	com	r21
    2436:	40 95       	com	r20
    2438:	30 95       	com	r19
    243a:	21 95       	neg	r18
    243c:	3f 4f       	sbci	r19, 0xFF	; 255
    243e:	4f 4f       	sbci	r20, 0xFF	; 255
    2440:	5f 4f       	sbci	r21, 0xFF	; 255
    2442:	0e c0       	rjmp	.+28     	; 0x2460 <__fixsfsi+0x9c>
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	50 e0       	ldi	r21, 0x00	; 0
    244c:	09 c0       	rjmp	.+18     	; 0x2460 <__fixsfsi+0x9c>
    244e:	2f ef       	ldi	r18, 0xFF	; 255
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f ef       	ldi	r20, 0xFF	; 255
    2454:	5f e7       	ldi	r21, 0x7F	; 127
    2456:	04 c0       	rjmp	.+8      	; 0x2460 <__fixsfsi+0x9c>
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	50 e8       	ldi	r21, 0x80	; 128
    2460:	b9 01       	movw	r22, r18
    2462:	ca 01       	movw	r24, r20
    2464:	2c 96       	adiw	r28, 0x0c	; 12
    2466:	e2 e0       	ldi	r30, 0x02	; 2
    2468:	0c 94 c2 36 	jmp	0x6d84	; 0x6d84 <__epilogue_restores__+0x20>

0000246c <__floatunsisf>:
    246c:	a8 e0       	ldi	r26, 0x08	; 8
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	ec e3       	ldi	r30, 0x3C	; 60
    2472:	f2 e1       	ldi	r31, 0x12	; 18
    2474:	0c 94 9e 36 	jmp	0x6d3c	; 0x6d3c <__prologue_saves__+0x10>
    2478:	7b 01       	movw	r14, r22
    247a:	8c 01       	movw	r16, r24
    247c:	61 15       	cp	r22, r1
    247e:	71 05       	cpc	r23, r1
    2480:	81 05       	cpc	r24, r1
    2482:	91 05       	cpc	r25, r1
    2484:	19 f4       	brne	.+6      	; 0x248c <__floatunsisf+0x20>
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	60 c0       	rjmp	.+192    	; 0x254c <__floatunsisf+0xe0>
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	8e e1       	ldi	r24, 0x1E	; 30
    2492:	c8 2e       	mov	r12, r24
    2494:	d1 2c       	mov	r13, r1
    2496:	dc 82       	std	Y+4, r13	; 0x04
    2498:	cb 82       	std	Y+3, r12	; 0x03
    249a:	ed 82       	std	Y+5, r14	; 0x05
    249c:	fe 82       	std	Y+6, r15	; 0x06
    249e:	0f 83       	std	Y+7, r16	; 0x07
    24a0:	18 87       	std	Y+8, r17	; 0x08
    24a2:	c8 01       	movw	r24, r16
    24a4:	b7 01       	movw	r22, r14
    24a6:	0e 94 2e 13 	call	0x265c	; 0x265c <__clzsi2>
    24aa:	fc 01       	movw	r30, r24
    24ac:	31 97       	sbiw	r30, 0x01	; 1
    24ae:	f7 ff       	sbrs	r31, 7
    24b0:	3b c0       	rjmp	.+118    	; 0x2528 <__floatunsisf+0xbc>
    24b2:	22 27       	eor	r18, r18
    24b4:	33 27       	eor	r19, r19
    24b6:	2e 1b       	sub	r18, r30
    24b8:	3f 0b       	sbc	r19, r31
    24ba:	57 01       	movw	r10, r14
    24bc:	68 01       	movw	r12, r16
    24be:	02 2e       	mov	r0, r18
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <__floatunsisf+0x5e>
    24c2:	d6 94       	lsr	r13
    24c4:	c7 94       	ror	r12
    24c6:	b7 94       	ror	r11
    24c8:	a7 94       	ror	r10
    24ca:	0a 94       	dec	r0
    24cc:	d2 f7       	brpl	.-12     	; 0x24c2 <__floatunsisf+0x56>
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a0 e0       	ldi	r26, 0x00	; 0
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	04 c0       	rjmp	.+8      	; 0x24e8 <__floatunsisf+0x7c>
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	aa 1f       	adc	r26, r26
    24e6:	bb 1f       	adc	r27, r27
    24e8:	2a 95       	dec	r18
    24ea:	d2 f7       	brpl	.-12     	; 0x24e0 <__floatunsisf+0x74>
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	a1 09       	sbc	r26, r1
    24f0:	b1 09       	sbc	r27, r1
    24f2:	8e 21       	and	r24, r14
    24f4:	9f 21       	and	r25, r15
    24f6:	a0 23       	and	r26, r16
    24f8:	b1 23       	and	r27, r17
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	a1 05       	cpc	r26, r1
    24fe:	b1 05       	cpc	r27, r1
    2500:	21 f0       	breq	.+8      	; 0x250a <__floatunsisf+0x9e>
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	70 e0       	ldi	r23, 0x00	; 0
    250a:	4a 29       	or	r20, r10
    250c:	5b 29       	or	r21, r11
    250e:	6c 29       	or	r22, r12
    2510:	7d 29       	or	r23, r13
    2512:	4d 83       	std	Y+5, r20	; 0x05
    2514:	5e 83       	std	Y+6, r21	; 0x06
    2516:	6f 83       	std	Y+7, r22	; 0x07
    2518:	78 87       	std	Y+8, r23	; 0x08
    251a:	8e e1       	ldi	r24, 0x1E	; 30
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	8e 1b       	sub	r24, r30
    2520:	9f 0b       	sbc	r25, r31
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	12 c0       	rjmp	.+36     	; 0x254c <__floatunsisf+0xe0>
    2528:	30 97       	sbiw	r30, 0x00	; 0
    252a:	81 f0       	breq	.+32     	; 0x254c <__floatunsisf+0xe0>
    252c:	0e 2e       	mov	r0, r30
    252e:	04 c0       	rjmp	.+8      	; 0x2538 <__floatunsisf+0xcc>
    2530:	ee 0c       	add	r14, r14
    2532:	ff 1c       	adc	r15, r15
    2534:	00 1f       	adc	r16, r16
    2536:	11 1f       	adc	r17, r17
    2538:	0a 94       	dec	r0
    253a:	d2 f7       	brpl	.-12     	; 0x2530 <__floatunsisf+0xc4>
    253c:	ed 82       	std	Y+5, r14	; 0x05
    253e:	fe 82       	std	Y+6, r15	; 0x06
    2540:	0f 83       	std	Y+7, r16	; 0x07
    2542:	18 87       	std	Y+8, r17	; 0x08
    2544:	ce 1a       	sub	r12, r30
    2546:	df 0a       	sbc	r13, r31
    2548:	dc 82       	std	Y+4, r13	; 0x04
    254a:	cb 82       	std	Y+3, r12	; 0x03
    254c:	1a 82       	std	Y+2, r1	; 0x02
    254e:	ce 01       	movw	r24, r28
    2550:	01 96       	adiw	r24, 0x01	; 1
    2552:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__pack_f>
    2556:	28 96       	adiw	r28, 0x08	; 8
    2558:	ea e0       	ldi	r30, 0x0A	; 10
    255a:	0c 94 ba 36 	jmp	0x6d74	; 0x6d74 <__epilogue_restores__+0x10>

0000255e <__ashldi3>:
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	0f 93       	push	r16
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	60 97       	sbiw	r28, 0x10	; 16
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	a8 2f       	mov	r26, r24
    257a:	00 23       	and	r16, r16
    257c:	09 f4       	brne	.+2      	; 0x2580 <__ashldi3+0x22>
    257e:	61 c0       	rjmp	.+194    	; 0x2642 <__ashldi3+0xe4>
    2580:	7e 01       	movw	r14, r28
    2582:	08 94       	sec
    2584:	e1 1c       	adc	r14, r1
    2586:	f1 1c       	adc	r15, r1
    2588:	88 e0       	ldi	r24, 0x08	; 8
    258a:	f7 01       	movw	r30, r14
    258c:	11 92       	st	Z+, r1
    258e:	8a 95       	dec	r24
    2590:	e9 f7       	brne	.-6      	; 0x258c <__ashldi3+0x2e>
    2592:	29 83       	std	Y+1, r18	; 0x01
    2594:	3a 83       	std	Y+2, r19	; 0x02
    2596:	4b 83       	std	Y+3, r20	; 0x03
    2598:	5c 83       	std	Y+4, r21	; 0x04
    259a:	6d 83       	std	Y+5, r22	; 0x05
    259c:	7e 83       	std	Y+6, r23	; 0x06
    259e:	af 83       	std	Y+7, r26	; 0x07
    25a0:	98 87       	std	Y+8, r25	; 0x08
    25a2:	80 e2       	ldi	r24, 0x20	; 32
    25a4:	80 1b       	sub	r24, r16
    25a6:	e8 2f       	mov	r30, r24
    25a8:	ff 27       	eor	r31, r31
    25aa:	e7 fd       	sbrc	r30, 7
    25ac:	f0 95       	com	r31
    25ae:	49 81       	ldd	r20, Y+1	; 0x01
    25b0:	5a 81       	ldd	r21, Y+2	; 0x02
    25b2:	6b 81       	ldd	r22, Y+3	; 0x03
    25b4:	7c 81       	ldd	r23, Y+4	; 0x04
    25b6:	18 16       	cp	r1, r24
    25b8:	84 f0       	brlt	.+32     	; 0x25da <__ashldi3+0x7c>
    25ba:	19 86       	std	Y+9, r1	; 0x09
    25bc:	1a 86       	std	Y+10, r1	; 0x0a
    25be:	1b 86       	std	Y+11, r1	; 0x0b
    25c0:	1c 86       	std	Y+12, r1	; 0x0c
    25c2:	88 27       	eor	r24, r24
    25c4:	99 27       	eor	r25, r25
    25c6:	8e 1b       	sub	r24, r30
    25c8:	9f 0b       	sbc	r25, r31
    25ca:	04 c0       	rjmp	.+8      	; 0x25d4 <__ashldi3+0x76>
    25cc:	44 0f       	add	r20, r20
    25ce:	55 1f       	adc	r21, r21
    25d0:	66 1f       	adc	r22, r22
    25d2:	77 1f       	adc	r23, r23
    25d4:	8a 95       	dec	r24
    25d6:	d2 f7       	brpl	.-12     	; 0x25cc <__ashldi3+0x6e>
    25d8:	28 c0       	rjmp	.+80     	; 0x262a <__ashldi3+0xcc>
    25da:	20 2f       	mov	r18, r16
    25dc:	33 27       	eor	r19, r19
    25de:	27 fd       	sbrc	r18, 7
    25e0:	30 95       	com	r19
    25e2:	db 01       	movw	r26, r22
    25e4:	ca 01       	movw	r24, r20
    25e6:	02 2e       	mov	r0, r18
    25e8:	04 c0       	rjmp	.+8      	; 0x25f2 <__ashldi3+0x94>
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	aa 1f       	adc	r26, r26
    25f0:	bb 1f       	adc	r27, r27
    25f2:	0a 94       	dec	r0
    25f4:	d2 f7       	brpl	.-12     	; 0x25ea <__ashldi3+0x8c>
    25f6:	89 87       	std	Y+9, r24	; 0x09
    25f8:	9a 87       	std	Y+10, r25	; 0x0a
    25fa:	ab 87       	std	Y+11, r26	; 0x0b
    25fc:	bc 87       	std	Y+12, r27	; 0x0c
    25fe:	04 c0       	rjmp	.+8      	; 0x2608 <__ashldi3+0xaa>
    2600:	76 95       	lsr	r23
    2602:	67 95       	ror	r22
    2604:	57 95       	ror	r21
    2606:	47 95       	ror	r20
    2608:	ea 95       	dec	r30
    260a:	d2 f7       	brpl	.-12     	; 0x2600 <__ashldi3+0xa2>
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	af 81       	ldd	r26, Y+7	; 0x07
    2612:	b8 85       	ldd	r27, Y+8	; 0x08
    2614:	04 c0       	rjmp	.+8      	; 0x261e <__ashldi3+0xc0>
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	aa 1f       	adc	r26, r26
    261c:	bb 1f       	adc	r27, r27
    261e:	2a 95       	dec	r18
    2620:	d2 f7       	brpl	.-12     	; 0x2616 <__ashldi3+0xb8>
    2622:	48 2b       	or	r20, r24
    2624:	59 2b       	or	r21, r25
    2626:	6a 2b       	or	r22, r26
    2628:	7b 2b       	or	r23, r27
    262a:	4d 87       	std	Y+13, r20	; 0x0d
    262c:	5e 87       	std	Y+14, r21	; 0x0e
    262e:	6f 87       	std	Y+15, r22	; 0x0f
    2630:	78 8b       	std	Y+16, r23	; 0x10
    2632:	29 85       	ldd	r18, Y+9	; 0x09
    2634:	3a 85       	ldd	r19, Y+10	; 0x0a
    2636:	4b 85       	ldd	r20, Y+11	; 0x0b
    2638:	5c 85       	ldd	r21, Y+12	; 0x0c
    263a:	6d 85       	ldd	r22, Y+13	; 0x0d
    263c:	7e 85       	ldd	r23, Y+14	; 0x0e
    263e:	af 85       	ldd	r26, Y+15	; 0x0f
    2640:	98 89       	ldd	r25, Y+16	; 0x10
    2642:	8a 2f       	mov	r24, r26
    2644:	60 96       	adiw	r28, 0x10	; 16
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	08 95       	ret

0000265c <__clzsi2>:
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	7b 01       	movw	r14, r22
    2666:	8c 01       	movw	r16, r24
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	e8 16       	cp	r14, r24
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	f8 06       	cpc	r15, r24
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	08 07       	cpc	r16, r24
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	18 07       	cpc	r17, r24
    2678:	88 f4       	brcc	.+34     	; 0x269c <__clzsi2+0x40>
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	e8 16       	cp	r14, r24
    267e:	f1 04       	cpc	r15, r1
    2680:	01 05       	cpc	r16, r1
    2682:	11 05       	cpc	r17, r1
    2684:	31 f0       	breq	.+12     	; 0x2692 <__clzsi2+0x36>
    2686:	28 f0       	brcs	.+10     	; 0x2692 <__clzsi2+0x36>
    2688:	88 e0       	ldi	r24, 0x08	; 8
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a0 e0       	ldi	r26, 0x00	; 0
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	17 c0       	rjmp	.+46     	; 0x26c0 <__clzsi2+0x64>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	12 c0       	rjmp	.+36     	; 0x26c0 <__clzsi2+0x64>
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	e8 16       	cp	r14, r24
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	f8 06       	cpc	r15, r24
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	08 07       	cpc	r16, r24
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	18 07       	cpc	r17, r24
    26ac:	28 f0       	brcs	.+10     	; 0x26b8 <__clzsi2+0x5c>
    26ae:	88 e1       	ldi	r24, 0x18	; 24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <__clzsi2+0x64>
    26b8:	80 e1       	ldi	r24, 0x10	; 16
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e0       	ldi	r26, 0x00	; 0
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	20 e2       	ldi	r18, 0x20	; 32
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	28 1b       	sub	r18, r24
    26ca:	39 0b       	sbc	r19, r25
    26cc:	4a 0b       	sbc	r20, r26
    26ce:	5b 0b       	sbc	r21, r27
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <__clzsi2+0x7e>
    26d2:	16 95       	lsr	r17
    26d4:	07 95       	ror	r16
    26d6:	f7 94       	ror	r15
    26d8:	e7 94       	ror	r14
    26da:	8a 95       	dec	r24
    26dc:	d2 f7       	brpl	.-12     	; 0x26d2 <__clzsi2+0x76>
    26de:	f7 01       	movw	r30, r14
    26e0:	ea 58       	subi	r30, 0x8A	; 138
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	28 1b       	sub	r18, r24
    26e8:	31 09       	sbc	r19, r1
    26ea:	41 09       	sbc	r20, r1
    26ec:	51 09       	sbc	r21, r1
    26ee:	c9 01       	movw	r24, r18
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	08 95       	ret

000026fa <__pack_f>:
    26fa:	df 92       	push	r13
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	fc 01       	movw	r30, r24
    2706:	e4 80       	ldd	r14, Z+4	; 0x04
    2708:	f5 80       	ldd	r15, Z+5	; 0x05
    270a:	06 81       	ldd	r16, Z+6	; 0x06
    270c:	17 81       	ldd	r17, Z+7	; 0x07
    270e:	d1 80       	ldd	r13, Z+1	; 0x01
    2710:	80 81       	ld	r24, Z
    2712:	82 30       	cpi	r24, 0x02	; 2
    2714:	48 f4       	brcc	.+18     	; 0x2728 <__pack_f+0x2e>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a0 e1       	ldi	r26, 0x10	; 16
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e8 2a       	or	r14, r24
    2720:	f9 2a       	or	r15, r25
    2722:	0a 2b       	or	r16, r26
    2724:	1b 2b       	or	r17, r27
    2726:	a5 c0       	rjmp	.+330    	; 0x2872 <__pack_f+0x178>
    2728:	84 30       	cpi	r24, 0x04	; 4
    272a:	09 f4       	brne	.+2      	; 0x272e <__pack_f+0x34>
    272c:	9f c0       	rjmp	.+318    	; 0x286c <__pack_f+0x172>
    272e:	82 30       	cpi	r24, 0x02	; 2
    2730:	21 f4       	brne	.+8      	; 0x273a <__pack_f+0x40>
    2732:	ee 24       	eor	r14, r14
    2734:	ff 24       	eor	r15, r15
    2736:	87 01       	movw	r16, r14
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <__pack_f+0x4a>
    273a:	e1 14       	cp	r14, r1
    273c:	f1 04       	cpc	r15, r1
    273e:	01 05       	cpc	r16, r1
    2740:	11 05       	cpc	r17, r1
    2742:	19 f4       	brne	.+6      	; 0x274a <__pack_f+0x50>
    2744:	e0 e0       	ldi	r30, 0x00	; 0
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	96 c0       	rjmp	.+300    	; 0x2876 <__pack_f+0x17c>
    274a:	62 81       	ldd	r22, Z+2	; 0x02
    274c:	73 81       	ldd	r23, Z+3	; 0x03
    274e:	9f ef       	ldi	r25, 0xFF	; 255
    2750:	62 38       	cpi	r22, 0x82	; 130
    2752:	79 07       	cpc	r23, r25
    2754:	0c f0       	brlt	.+2      	; 0x2758 <__pack_f+0x5e>
    2756:	5b c0       	rjmp	.+182    	; 0x280e <__pack_f+0x114>
    2758:	22 e8       	ldi	r18, 0x82	; 130
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	26 1b       	sub	r18, r22
    275e:	37 0b       	sbc	r19, r23
    2760:	2a 31       	cpi	r18, 0x1A	; 26
    2762:	31 05       	cpc	r19, r1
    2764:	2c f0       	brlt	.+10     	; 0x2770 <__pack_f+0x76>
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	2a c0       	rjmp	.+84     	; 0x27c4 <__pack_f+0xca>
    2770:	b8 01       	movw	r22, r16
    2772:	a7 01       	movw	r20, r14
    2774:	02 2e       	mov	r0, r18
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <__pack_f+0x86>
    2778:	76 95       	lsr	r23
    277a:	67 95       	ror	r22
    277c:	57 95       	ror	r21
    277e:	47 95       	ror	r20
    2780:	0a 94       	dec	r0
    2782:	d2 f7       	brpl	.-12     	; 0x2778 <__pack_f+0x7e>
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	a0 e0       	ldi	r26, 0x00	; 0
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	04 c0       	rjmp	.+8      	; 0x2796 <__pack_f+0x9c>
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	aa 1f       	adc	r26, r26
    2794:	bb 1f       	adc	r27, r27
    2796:	2a 95       	dec	r18
    2798:	d2 f7       	brpl	.-12     	; 0x278e <__pack_f+0x94>
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	a1 09       	sbc	r26, r1
    279e:	b1 09       	sbc	r27, r1
    27a0:	8e 21       	and	r24, r14
    27a2:	9f 21       	and	r25, r15
    27a4:	a0 23       	and	r26, r16
    27a6:	b1 23       	and	r27, r17
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	a1 05       	cpc	r26, r1
    27ac:	b1 05       	cpc	r27, r1
    27ae:	21 f0       	breq	.+8      	; 0x27b8 <__pack_f+0xbe>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	9a 01       	movw	r18, r20
    27ba:	ab 01       	movw	r20, r22
    27bc:	28 2b       	or	r18, r24
    27be:	39 2b       	or	r19, r25
    27c0:	4a 2b       	or	r20, r26
    27c2:	5b 2b       	or	r21, r27
    27c4:	da 01       	movw	r26, r20
    27c6:	c9 01       	movw	r24, r18
    27c8:	8f 77       	andi	r24, 0x7F	; 127
    27ca:	90 70       	andi	r25, 0x00	; 0
    27cc:	a0 70       	andi	r26, 0x00	; 0
    27ce:	b0 70       	andi	r27, 0x00	; 0
    27d0:	80 34       	cpi	r24, 0x40	; 64
    27d2:	91 05       	cpc	r25, r1
    27d4:	a1 05       	cpc	r26, r1
    27d6:	b1 05       	cpc	r27, r1
    27d8:	39 f4       	brne	.+14     	; 0x27e8 <__pack_f+0xee>
    27da:	27 ff       	sbrs	r18, 7
    27dc:	09 c0       	rjmp	.+18     	; 0x27f0 <__pack_f+0xf6>
    27de:	20 5c       	subi	r18, 0xC0	; 192
    27e0:	3f 4f       	sbci	r19, 0xFF	; 255
    27e2:	4f 4f       	sbci	r20, 0xFF	; 255
    27e4:	5f 4f       	sbci	r21, 0xFF	; 255
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <__pack_f+0xf6>
    27e8:	21 5c       	subi	r18, 0xC1	; 193
    27ea:	3f 4f       	sbci	r19, 0xFF	; 255
    27ec:	4f 4f       	sbci	r20, 0xFF	; 255
    27ee:	5f 4f       	sbci	r21, 0xFF	; 255
    27f0:	e0 e0       	ldi	r30, 0x00	; 0
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	20 30       	cpi	r18, 0x00	; 0
    27f6:	a0 e0       	ldi	r26, 0x00	; 0
    27f8:	3a 07       	cpc	r19, r26
    27fa:	a0 e0       	ldi	r26, 0x00	; 0
    27fc:	4a 07       	cpc	r20, r26
    27fe:	a0 e4       	ldi	r26, 0x40	; 64
    2800:	5a 07       	cpc	r21, r26
    2802:	10 f0       	brcs	.+4      	; 0x2808 <__pack_f+0x10e>
    2804:	e1 e0       	ldi	r30, 0x01	; 1
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	79 01       	movw	r14, r18
    280a:	8a 01       	movw	r16, r20
    280c:	27 c0       	rjmp	.+78     	; 0x285c <__pack_f+0x162>
    280e:	60 38       	cpi	r22, 0x80	; 128
    2810:	71 05       	cpc	r23, r1
    2812:	64 f5       	brge	.+88     	; 0x286c <__pack_f+0x172>
    2814:	fb 01       	movw	r30, r22
    2816:	e1 58       	subi	r30, 0x81	; 129
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	d8 01       	movw	r26, r16
    281c:	c7 01       	movw	r24, r14
    281e:	8f 77       	andi	r24, 0x7F	; 127
    2820:	90 70       	andi	r25, 0x00	; 0
    2822:	a0 70       	andi	r26, 0x00	; 0
    2824:	b0 70       	andi	r27, 0x00	; 0
    2826:	80 34       	cpi	r24, 0x40	; 64
    2828:	91 05       	cpc	r25, r1
    282a:	a1 05       	cpc	r26, r1
    282c:	b1 05       	cpc	r27, r1
    282e:	39 f4       	brne	.+14     	; 0x283e <__pack_f+0x144>
    2830:	e7 fe       	sbrs	r14, 7
    2832:	0d c0       	rjmp	.+26     	; 0x284e <__pack_f+0x154>
    2834:	80 e4       	ldi	r24, 0x40	; 64
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e0       	ldi	r26, 0x00	; 0
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <__pack_f+0x14c>
    283e:	8f e3       	ldi	r24, 0x3F	; 63
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 e0       	ldi	r26, 0x00	; 0
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e8 0e       	add	r14, r24
    2848:	f9 1e       	adc	r15, r25
    284a:	0a 1f       	adc	r16, r26
    284c:	1b 1f       	adc	r17, r27
    284e:	17 ff       	sbrs	r17, 7
    2850:	05 c0       	rjmp	.+10     	; 0x285c <__pack_f+0x162>
    2852:	16 95       	lsr	r17
    2854:	07 95       	ror	r16
    2856:	f7 94       	ror	r15
    2858:	e7 94       	ror	r14
    285a:	31 96       	adiw	r30, 0x01	; 1
    285c:	87 e0       	ldi	r24, 0x07	; 7
    285e:	16 95       	lsr	r17
    2860:	07 95       	ror	r16
    2862:	f7 94       	ror	r15
    2864:	e7 94       	ror	r14
    2866:	8a 95       	dec	r24
    2868:	d1 f7       	brne	.-12     	; 0x285e <__pack_f+0x164>
    286a:	05 c0       	rjmp	.+10     	; 0x2876 <__pack_f+0x17c>
    286c:	ee 24       	eor	r14, r14
    286e:	ff 24       	eor	r15, r15
    2870:	87 01       	movw	r16, r14
    2872:	ef ef       	ldi	r30, 0xFF	; 255
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	6e 2f       	mov	r22, r30
    2878:	67 95       	ror	r22
    287a:	66 27       	eor	r22, r22
    287c:	67 95       	ror	r22
    287e:	90 2f       	mov	r25, r16
    2880:	9f 77       	andi	r25, 0x7F	; 127
    2882:	d7 94       	ror	r13
    2884:	dd 24       	eor	r13, r13
    2886:	d7 94       	ror	r13
    2888:	8e 2f       	mov	r24, r30
    288a:	86 95       	lsr	r24
    288c:	49 2f       	mov	r20, r25
    288e:	46 2b       	or	r20, r22
    2890:	58 2f       	mov	r21, r24
    2892:	5d 29       	or	r21, r13
    2894:	b7 01       	movw	r22, r14
    2896:	ca 01       	movw	r24, r20
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	ff 90       	pop	r15
    289e:	ef 90       	pop	r14
    28a0:	df 90       	pop	r13
    28a2:	08 95       	ret

000028a4 <__unpack_f>:
    28a4:	fc 01       	movw	r30, r24
    28a6:	db 01       	movw	r26, r22
    28a8:	40 81       	ld	r20, Z
    28aa:	51 81       	ldd	r21, Z+1	; 0x01
    28ac:	22 81       	ldd	r18, Z+2	; 0x02
    28ae:	62 2f       	mov	r22, r18
    28b0:	6f 77       	andi	r22, 0x7F	; 127
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	22 1f       	adc	r18, r18
    28b6:	22 27       	eor	r18, r18
    28b8:	22 1f       	adc	r18, r18
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	89 2f       	mov	r24, r25
    28be:	88 0f       	add	r24, r24
    28c0:	82 2b       	or	r24, r18
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	99 1f       	adc	r25, r25
    28c8:	99 27       	eor	r25, r25
    28ca:	99 1f       	adc	r25, r25
    28cc:	11 96       	adiw	r26, 0x01	; 1
    28ce:	9c 93       	st	X, r25
    28d0:	11 97       	sbiw	r26, 0x01	; 1
    28d2:	21 15       	cp	r18, r1
    28d4:	31 05       	cpc	r19, r1
    28d6:	a9 f5       	brne	.+106    	; 0x2942 <__unpack_f+0x9e>
    28d8:	41 15       	cp	r20, r1
    28da:	51 05       	cpc	r21, r1
    28dc:	61 05       	cpc	r22, r1
    28de:	71 05       	cpc	r23, r1
    28e0:	11 f4       	brne	.+4      	; 0x28e6 <__unpack_f+0x42>
    28e2:	82 e0       	ldi	r24, 0x02	; 2
    28e4:	37 c0       	rjmp	.+110    	; 0x2954 <__unpack_f+0xb0>
    28e6:	82 e8       	ldi	r24, 0x82	; 130
    28e8:	9f ef       	ldi	r25, 0xFF	; 255
    28ea:	13 96       	adiw	r26, 0x03	; 3
    28ec:	9c 93       	st	X, r25
    28ee:	8e 93       	st	-X, r24
    28f0:	12 97       	sbiw	r26, 0x02	; 2
    28f2:	9a 01       	movw	r18, r20
    28f4:	ab 01       	movw	r20, r22
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	44 1f       	adc	r20, r20
    28fe:	55 1f       	adc	r21, r21
    2900:	6a 95       	dec	r22
    2902:	d1 f7       	brne	.-12     	; 0x28f8 <__unpack_f+0x54>
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	8c 93       	st	X, r24
    2908:	0d c0       	rjmp	.+26     	; 0x2924 <__unpack_f+0x80>
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	44 1f       	adc	r20, r20
    2910:	55 1f       	adc	r21, r21
    2912:	12 96       	adiw	r26, 0x02	; 2
    2914:	8d 91       	ld	r24, X+
    2916:	9c 91       	ld	r25, X
    2918:	13 97       	sbiw	r26, 0x03	; 3
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	13 96       	adiw	r26, 0x03	; 3
    291e:	9c 93       	st	X, r25
    2920:	8e 93       	st	-X, r24
    2922:	12 97       	sbiw	r26, 0x02	; 2
    2924:	20 30       	cpi	r18, 0x00	; 0
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	38 07       	cpc	r19, r24
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	48 07       	cpc	r20, r24
    292e:	80 e4       	ldi	r24, 0x40	; 64
    2930:	58 07       	cpc	r21, r24
    2932:	58 f3       	brcs	.-42     	; 0x290a <__unpack_f+0x66>
    2934:	14 96       	adiw	r26, 0x04	; 4
    2936:	2d 93       	st	X+, r18
    2938:	3d 93       	st	X+, r19
    293a:	4d 93       	st	X+, r20
    293c:	5c 93       	st	X, r21
    293e:	17 97       	sbiw	r26, 0x07	; 7
    2940:	08 95       	ret
    2942:	2f 3f       	cpi	r18, 0xFF	; 255
    2944:	31 05       	cpc	r19, r1
    2946:	79 f4       	brne	.+30     	; 0x2966 <__unpack_f+0xc2>
    2948:	41 15       	cp	r20, r1
    294a:	51 05       	cpc	r21, r1
    294c:	61 05       	cpc	r22, r1
    294e:	71 05       	cpc	r23, r1
    2950:	19 f4       	brne	.+6      	; 0x2958 <__unpack_f+0xb4>
    2952:	84 e0       	ldi	r24, 0x04	; 4
    2954:	8c 93       	st	X, r24
    2956:	08 95       	ret
    2958:	64 ff       	sbrs	r22, 4
    295a:	03 c0       	rjmp	.+6      	; 0x2962 <__unpack_f+0xbe>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	8c 93       	st	X, r24
    2960:	12 c0       	rjmp	.+36     	; 0x2986 <__unpack_f+0xe2>
    2962:	1c 92       	st	X, r1
    2964:	10 c0       	rjmp	.+32     	; 0x2986 <__unpack_f+0xe2>
    2966:	2f 57       	subi	r18, 0x7F	; 127
    2968:	30 40       	sbci	r19, 0x00	; 0
    296a:	13 96       	adiw	r26, 0x03	; 3
    296c:	3c 93       	st	X, r19
    296e:	2e 93       	st	-X, r18
    2970:	12 97       	sbiw	r26, 0x02	; 2
    2972:	83 e0       	ldi	r24, 0x03	; 3
    2974:	8c 93       	st	X, r24
    2976:	87 e0       	ldi	r24, 0x07	; 7
    2978:	44 0f       	add	r20, r20
    297a:	55 1f       	adc	r21, r21
    297c:	66 1f       	adc	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	8a 95       	dec	r24
    2982:	d1 f7       	brne	.-12     	; 0x2978 <__unpack_f+0xd4>
    2984:	70 64       	ori	r23, 0x40	; 64
    2986:	14 96       	adiw	r26, 0x04	; 4
    2988:	4d 93       	st	X+, r20
    298a:	5d 93       	st	X+, r21
    298c:	6d 93       	st	X+, r22
    298e:	7c 93       	st	X, r23
    2990:	17 97       	sbiw	r26, 0x07	; 7
    2992:	08 95       	ret

00002994 <__fpcmp_parts_f>:
    2994:	1f 93       	push	r17
    2996:	dc 01       	movw	r26, r24
    2998:	fb 01       	movw	r30, r22
    299a:	9c 91       	ld	r25, X
    299c:	92 30       	cpi	r25, 0x02	; 2
    299e:	08 f4       	brcc	.+2      	; 0x29a2 <__fpcmp_parts_f+0xe>
    29a0:	47 c0       	rjmp	.+142    	; 0x2a30 <__fpcmp_parts_f+0x9c>
    29a2:	80 81       	ld	r24, Z
    29a4:	82 30       	cpi	r24, 0x02	; 2
    29a6:	08 f4       	brcc	.+2      	; 0x29aa <__fpcmp_parts_f+0x16>
    29a8:	43 c0       	rjmp	.+134    	; 0x2a30 <__fpcmp_parts_f+0x9c>
    29aa:	94 30       	cpi	r25, 0x04	; 4
    29ac:	51 f4       	brne	.+20     	; 0x29c2 <__fpcmp_parts_f+0x2e>
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	1c 91       	ld	r17, X
    29b2:	84 30       	cpi	r24, 0x04	; 4
    29b4:	99 f5       	brne	.+102    	; 0x2a1c <__fpcmp_parts_f+0x88>
    29b6:	81 81       	ldd	r24, Z+1	; 0x01
    29b8:	68 2f       	mov	r22, r24
    29ba:	70 e0       	ldi	r23, 0x00	; 0
    29bc:	61 1b       	sub	r22, r17
    29be:	71 09       	sbc	r23, r1
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <__fpcmp_parts_f+0xac>
    29c2:	84 30       	cpi	r24, 0x04	; 4
    29c4:	21 f0       	breq	.+8      	; 0x29ce <__fpcmp_parts_f+0x3a>
    29c6:	92 30       	cpi	r25, 0x02	; 2
    29c8:	31 f4       	brne	.+12     	; 0x29d6 <__fpcmp_parts_f+0x42>
    29ca:	82 30       	cpi	r24, 0x02	; 2
    29cc:	b9 f1       	breq	.+110    	; 0x2a3c <__fpcmp_parts_f+0xa8>
    29ce:	81 81       	ldd	r24, Z+1	; 0x01
    29d0:	88 23       	and	r24, r24
    29d2:	89 f1       	breq	.+98     	; 0x2a36 <__fpcmp_parts_f+0xa2>
    29d4:	2d c0       	rjmp	.+90     	; 0x2a30 <__fpcmp_parts_f+0x9c>
    29d6:	11 96       	adiw	r26, 0x01	; 1
    29d8:	1c 91       	ld	r17, X
    29da:	11 97       	sbiw	r26, 0x01	; 1
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	f1 f0       	breq	.+60     	; 0x2a1c <__fpcmp_parts_f+0x88>
    29e0:	81 81       	ldd	r24, Z+1	; 0x01
    29e2:	18 17       	cp	r17, r24
    29e4:	d9 f4       	brne	.+54     	; 0x2a1c <__fpcmp_parts_f+0x88>
    29e6:	12 96       	adiw	r26, 0x02	; 2
    29e8:	2d 91       	ld	r18, X+
    29ea:	3c 91       	ld	r19, X
    29ec:	13 97       	sbiw	r26, 0x03	; 3
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	82 17       	cp	r24, r18
    29f4:	93 07       	cpc	r25, r19
    29f6:	94 f0       	brlt	.+36     	; 0x2a1c <__fpcmp_parts_f+0x88>
    29f8:	28 17       	cp	r18, r24
    29fa:	39 07       	cpc	r19, r25
    29fc:	bc f0       	brlt	.+46     	; 0x2a2c <__fpcmp_parts_f+0x98>
    29fe:	14 96       	adiw	r26, 0x04	; 4
    2a00:	8d 91       	ld	r24, X+
    2a02:	9d 91       	ld	r25, X+
    2a04:	0d 90       	ld	r0, X+
    2a06:	bc 91       	ld	r27, X
    2a08:	a0 2d       	mov	r26, r0
    2a0a:	24 81       	ldd	r18, Z+4	; 0x04
    2a0c:	35 81       	ldd	r19, Z+5	; 0x05
    2a0e:	46 81       	ldd	r20, Z+6	; 0x06
    2a10:	57 81       	ldd	r21, Z+7	; 0x07
    2a12:	28 17       	cp	r18, r24
    2a14:	39 07       	cpc	r19, r25
    2a16:	4a 07       	cpc	r20, r26
    2a18:	5b 07       	cpc	r21, r27
    2a1a:	18 f4       	brcc	.+6      	; 0x2a22 <__fpcmp_parts_f+0x8e>
    2a1c:	11 23       	and	r17, r17
    2a1e:	41 f0       	breq	.+16     	; 0x2a30 <__fpcmp_parts_f+0x9c>
    2a20:	0a c0       	rjmp	.+20     	; 0x2a36 <__fpcmp_parts_f+0xa2>
    2a22:	82 17       	cp	r24, r18
    2a24:	93 07       	cpc	r25, r19
    2a26:	a4 07       	cpc	r26, r20
    2a28:	b5 07       	cpc	r27, r21
    2a2a:	40 f4       	brcc	.+16     	; 0x2a3c <__fpcmp_parts_f+0xa8>
    2a2c:	11 23       	and	r17, r17
    2a2e:	19 f0       	breq	.+6      	; 0x2a36 <__fpcmp_parts_f+0xa2>
    2a30:	61 e0       	ldi	r22, 0x01	; 1
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	05 c0       	rjmp	.+10     	; 0x2a40 <__fpcmp_parts_f+0xac>
    2a36:	6f ef       	ldi	r22, 0xFF	; 255
    2a38:	7f ef       	ldi	r23, 0xFF	; 255
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <__fpcmp_parts_f+0xac>
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	cb 01       	movw	r24, r22
    2a42:	1f 91       	pop	r17
    2a44:	08 95       	ret

00002a46 <DIO_vidSetPinDir>:




void DIO_vidSetPinDir(u8 u8PortId , u8 u8PinId , u8 u8PinDir)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	27 97       	sbiw	r28, 0x07	; 7
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	6a 83       	std	Y+2, r22	; 0x02
    2a5e:	4b 83       	std	Y+3, r20	; 0x03
	if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	84 30       	cpi	r24, 0x04	; 4
    2a64:	08 f0       	brcs	.+2      	; 0x2a68 <DIO_vidSetPinDir+0x22>
    2a66:	ee c0       	rjmp	.+476    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	88 30       	cpi	r24, 0x08	; 8
    2a6c:	08 f0       	brcs	.+2      	; 0x2a70 <DIO_vidSetPinDir+0x2a>
    2a6e:	ea c0       	rjmp	.+468    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
		{
			if(u8PinDir == DIO_OUTPUT)
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	8f 3f       	cpi	r24, 0xFF	; 255
    2a74:	09 f0       	breq	.+2      	; 0x2a78 <DIO_vidSetPinDir+0x32>
    2a76:	6f c0       	rjmp	.+222    	; 0x2b56 <DIO_vidSetPinDir+0x110>
			{
				switch(u8PortId)
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	3f 83       	std	Y+7, r19	; 0x07
    2a80:	2e 83       	std	Y+6, r18	; 0x06
    2a82:	8e 81       	ldd	r24, Y+6	; 0x06
    2a84:	9f 81       	ldd	r25, Y+7	; 0x07
    2a86:	81 30       	cpi	r24, 0x01	; 1
    2a88:	91 05       	cpc	r25, r1
    2a8a:	49 f1       	breq	.+82     	; 0x2ade <DIO_vidSetPinDir+0x98>
    2a8c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a8e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a90:	22 30       	cpi	r18, 0x02	; 2
    2a92:	31 05       	cpc	r19, r1
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <DIO_vidSetPinDir+0x5a>
    2a96:	8e 81       	ldd	r24, Y+6	; 0x06
    2a98:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	61 f0       	breq	.+24     	; 0x2ab6 <DIO_vidSetPinDir+0x70>
    2a9e:	d2 c0       	rjmp	.+420    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
    2aa0:	2e 81       	ldd	r18, Y+6	; 0x06
    2aa2:	3f 81       	ldd	r19, Y+7	; 0x07
    2aa4:	22 30       	cpi	r18, 0x02	; 2
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	71 f1       	breq	.+92     	; 0x2b06 <DIO_vidSetPinDir+0xc0>
    2aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    2aac:	9f 81       	ldd	r25, Y+7	; 0x07
    2aae:	83 30       	cpi	r24, 0x03	; 3
    2ab0:	91 05       	cpc	r25, r1
    2ab2:	e9 f1       	breq	.+122    	; 0x2b2e <DIO_vidSetPinDir+0xe8>
    2ab4:	c7 c0       	rjmp	.+398    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
				{
				case (DIO_PORTA) : SET_BIT(DDRA_REG , u8PinId); break;
    2ab6:	aa e3       	ldi	r26, 0x3A	; 58
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	ea e3       	ldi	r30, 0x3A	; 58
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	48 2f       	mov	r20, r24
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	02 2e       	mov	r0, r18
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <DIO_vidSetPinDir+0x8e>
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	0a 94       	dec	r0
    2ad6:	e2 f7       	brpl	.-8      	; 0x2ad0 <DIO_vidSetPinDir+0x8a>
    2ad8:	84 2b       	or	r24, r20
    2ada:	8c 93       	st	X, r24
    2adc:	b3 c0       	rjmp	.+358    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
				case (DIO_PORTB) : SET_BIT(DDRB_REG , u8PinId); break;
    2ade:	a7 e3       	ldi	r26, 0x37	; 55
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e7 e3       	ldi	r30, 0x37	; 55
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	48 2f       	mov	r20, r24
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	02 2e       	mov	r0, r18
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <DIO_vidSetPinDir+0xb6>
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	0a 94       	dec	r0
    2afe:	e2 f7       	brpl	.-8      	; 0x2af8 <DIO_vidSetPinDir+0xb2>
    2b00:	84 2b       	or	r24, r20
    2b02:	8c 93       	st	X, r24
    2b04:	9f c0       	rjmp	.+318    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
				case (DIO_PORTC) : SET_BIT(DDRC_REG , u8PinId); break;
    2b06:	a4 e3       	ldi	r26, 0x34	; 52
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	e4 e3       	ldi	r30, 0x34	; 52
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	48 2f       	mov	r20, r24
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	02 2e       	mov	r0, r18
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <DIO_vidSetPinDir+0xde>
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	0a 94       	dec	r0
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <DIO_vidSetPinDir+0xda>
    2b28:	84 2b       	or	r24, r20
    2b2a:	8c 93       	st	X, r24
    2b2c:	8b c0       	rjmp	.+278    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
				case (DIO_PORTD) : SET_BIT(DDRD_REG , u8PinId); break;
    2b2e:	a1 e3       	ldi	r26, 0x31	; 49
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e1 e3       	ldi	r30, 0x31	; 49
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	48 2f       	mov	r20, r24
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	02 2e       	mov	r0, r18
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <DIO_vidSetPinDir+0x106>
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	0a 94       	dec	r0
    2b4e:	e2 f7       	brpl	.-8      	; 0x2b48 <DIO_vidSetPinDir+0x102>
    2b50:	84 2b       	or	r24, r20
    2b52:	8c 93       	st	X, r24
    2b54:	77 c0       	rjmp	.+238    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
				}
			}
			else if(u8PinDir == DIO_INPUT)
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	88 23       	and	r24, r24
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <DIO_vidSetPinDir+0x118>
    2b5c:	73 c0       	rjmp	.+230    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
			{
				switch(u8PortId)
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	3d 83       	std	Y+5, r19	; 0x05
    2b66:	2c 83       	std	Y+4, r18	; 0x04
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6c:	81 30       	cpi	r24, 0x01	; 1
    2b6e:	91 05       	cpc	r25, r1
    2b70:	59 f1       	breq	.+86     	; 0x2bc8 <DIO_vidSetPinDir+0x182>
    2b72:	2c 81       	ldd	r18, Y+4	; 0x04
    2b74:	3d 81       	ldd	r19, Y+5	; 0x05
    2b76:	22 30       	cpi	r18, 0x02	; 2
    2b78:	31 05       	cpc	r19, r1
    2b7a:	2c f4       	brge	.+10     	; 0x2b86 <DIO_vidSetPinDir+0x140>
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	69 f0       	breq	.+26     	; 0x2b9e <DIO_vidSetPinDir+0x158>
    2b84:	5f c0       	rjmp	.+190    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
    2b86:	2c 81       	ldd	r18, Y+4	; 0x04
    2b88:	3d 81       	ldd	r19, Y+5	; 0x05
    2b8a:	22 30       	cpi	r18, 0x02	; 2
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	89 f1       	breq	.+98     	; 0x2bf2 <DIO_vidSetPinDir+0x1ac>
    2b90:	8c 81       	ldd	r24, Y+4	; 0x04
    2b92:	9d 81       	ldd	r25, Y+5	; 0x05
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	91 05       	cpc	r25, r1
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <DIO_vidSetPinDir+0x156>
    2b9a:	40 c0       	rjmp	.+128    	; 0x2c1c <DIO_vidSetPinDir+0x1d6>
    2b9c:	53 c0       	rjmp	.+166    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
				{
				case (DIO_PORTA) : CLR_BIT(DDRA_REG , u8PinId); break;
    2b9e:	aa e3       	ldi	r26, 0x3A	; 58
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	ea e3       	ldi	r30, 0x3A	; 58
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	48 2f       	mov	r20, r24
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	28 2f       	mov	r18, r24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	02 2e       	mov	r0, r18
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <DIO_vidSetPinDir+0x176>
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	0a 94       	dec	r0
    2bbe:	e2 f7       	brpl	.-8      	; 0x2bb8 <DIO_vidSetPinDir+0x172>
    2bc0:	80 95       	com	r24
    2bc2:	84 23       	and	r24, r20
    2bc4:	8c 93       	st	X, r24
    2bc6:	3e c0       	rjmp	.+124    	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
				case (DIO_PORTB) : CLR_BIT(DDRB_REG , u8PinId); break;
    2bc8:	a7 e3       	ldi	r26, 0x37	; 55
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e7 e3       	ldi	r30, 0x37	; 55
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	48 2f       	mov	r20, r24
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	02 2e       	mov	r0, r18
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <DIO_vidSetPinDir+0x1a0>
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	0a 94       	dec	r0
    2be8:	e2 f7       	brpl	.-8      	; 0x2be2 <DIO_vidSetPinDir+0x19c>
    2bea:	80 95       	com	r24
    2bec:	84 23       	and	r24, r20
    2bee:	8c 93       	st	X, r24
    2bf0:	29 c0       	rjmp	.+82     	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
				case (DIO_PORTC) : CLR_BIT(DDRC_REG , u8PinId); break;
    2bf2:	a4 e3       	ldi	r26, 0x34	; 52
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	e4 e3       	ldi	r30, 0x34	; 52
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	48 2f       	mov	r20, r24
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	02 2e       	mov	r0, r18
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <DIO_vidSetPinDir+0x1ca>
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	0a 94       	dec	r0
    2c12:	e2 f7       	brpl	.-8      	; 0x2c0c <DIO_vidSetPinDir+0x1c6>
    2c14:	80 95       	com	r24
    2c16:	84 23       	and	r24, r20
    2c18:	8c 93       	st	X, r24
    2c1a:	14 c0       	rjmp	.+40     	; 0x2c44 <DIO_vidSetPinDir+0x1fe>
				case (DIO_PORTD) : CLR_BIT(DDRD_REG , u8PinId); break;
    2c1c:	a1 e3       	ldi	r26, 0x31	; 49
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	e1 e3       	ldi	r30, 0x31	; 49
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	48 2f       	mov	r20, r24
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	02 2e       	mov	r0, r18
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <DIO_vidSetPinDir+0x1f4>
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	0a 94       	dec	r0
    2c3c:	e2 f7       	brpl	.-8      	; 0x2c36 <DIO_vidSetPinDir+0x1f0>
    2c3e:	80 95       	com	r24
    2c40:	84 23       	and	r24, r20
    2c42:	8c 93       	st	X, r24
				}
			}
			else{/* wrong Pin Direction */}
		}
		else{/* wrong PortId OR PinId  */}
}
    2c44:	27 96       	adiw	r28, 0x07	; 7
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <DIO_vidSetPinVal>:

void DIO_vidSetPinVal(u8 u8PortId , u8 u8PinId , u8 u8PinVal){
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	27 97       	sbiw	r28, 0x07	; 7
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	6a 83       	std	Y+2, r22	; 0x02
    2c6e:	4b 83       	std	Y+3, r20	; 0x03
	if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	84 30       	cpi	r24, 0x04	; 4
    2c74:	08 f0       	brcs	.+2      	; 0x2c78 <DIO_vidSetPinVal+0x22>
    2c76:	ee c0       	rjmp	.+476    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	88 30       	cpi	r24, 0x08	; 8
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <DIO_vidSetPinVal+0x2a>
    2c7e:	ea c0       	rjmp	.+468    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
	{
		if(u8PinVal == DIO_HIGH)
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	8f 3f       	cpi	r24, 0xFF	; 255
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <DIO_vidSetPinVal+0x32>
    2c86:	6f c0       	rjmp	.+222    	; 0x2d66 <DIO_vidSetPinVal+0x110>
			{
				switch(u8PortId)
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	3f 83       	std	Y+7, r19	; 0x07
    2c90:	2e 83       	std	Y+6, r18	; 0x06
    2c92:	8e 81       	ldd	r24, Y+6	; 0x06
    2c94:	9f 81       	ldd	r25, Y+7	; 0x07
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	91 05       	cpc	r25, r1
    2c9a:	49 f1       	breq	.+82     	; 0x2cee <DIO_vidSetPinVal+0x98>
    2c9c:	2e 81       	ldd	r18, Y+6	; 0x06
    2c9e:	3f 81       	ldd	r19, Y+7	; 0x07
    2ca0:	22 30       	cpi	r18, 0x02	; 2
    2ca2:	31 05       	cpc	r19, r1
    2ca4:	2c f4       	brge	.+10     	; 0x2cb0 <DIO_vidSetPinVal+0x5a>
    2ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	61 f0       	breq	.+24     	; 0x2cc6 <DIO_vidSetPinVal+0x70>
    2cae:	d2 c0       	rjmp	.+420    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
    2cb0:	2e 81       	ldd	r18, Y+6	; 0x06
    2cb2:	3f 81       	ldd	r19, Y+7	; 0x07
    2cb4:	22 30       	cpi	r18, 0x02	; 2
    2cb6:	31 05       	cpc	r19, r1
    2cb8:	71 f1       	breq	.+92     	; 0x2d16 <DIO_vidSetPinVal+0xc0>
    2cba:	8e 81       	ldd	r24, Y+6	; 0x06
    2cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cbe:	83 30       	cpi	r24, 0x03	; 3
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	e9 f1       	breq	.+122    	; 0x2d3e <DIO_vidSetPinVal+0xe8>
    2cc4:	c7 c0       	rjmp	.+398    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
				{
				case (DIO_PORTA) : SET_BIT(PORTA_REG , u8PinId); break;
    2cc6:	ab e3       	ldi	r26, 0x3B	; 59
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	eb e3       	ldi	r30, 0x3B	; 59
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	48 2f       	mov	r20, r24
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	02 2e       	mov	r0, r18
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <DIO_vidSetPinVal+0x8e>
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	0a 94       	dec	r0
    2ce6:	e2 f7       	brpl	.-8      	; 0x2ce0 <DIO_vidSetPinVal+0x8a>
    2ce8:	84 2b       	or	r24, r20
    2cea:	8c 93       	st	X, r24
    2cec:	b3 c0       	rjmp	.+358    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
				case (DIO_PORTB) : SET_BIT(PORTB_REG , u8PinId); break;
    2cee:	a8 e3       	ldi	r26, 0x38	; 56
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	e8 e3       	ldi	r30, 0x38	; 56
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	48 2f       	mov	r20, r24
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	02 2e       	mov	r0, r18
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <DIO_vidSetPinVal+0xb6>
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	0a 94       	dec	r0
    2d0e:	e2 f7       	brpl	.-8      	; 0x2d08 <DIO_vidSetPinVal+0xb2>
    2d10:	84 2b       	or	r24, r20
    2d12:	8c 93       	st	X, r24
    2d14:	9f c0       	rjmp	.+318    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
				case (DIO_PORTC) : SET_BIT(PORTC_REG , u8PinId); break;
    2d16:	a5 e3       	ldi	r26, 0x35	; 53
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e5 e3       	ldi	r30, 0x35	; 53
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	48 2f       	mov	r20, r24
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	02 2e       	mov	r0, r18
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <DIO_vidSetPinVal+0xde>
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	0a 94       	dec	r0
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <DIO_vidSetPinVal+0xda>
    2d38:	84 2b       	or	r24, r20
    2d3a:	8c 93       	st	X, r24
    2d3c:	8b c0       	rjmp	.+278    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
				case (DIO_PORTD) : SET_BIT(PORTD_REG , u8PinId); break;
    2d3e:	a2 e3       	ldi	r26, 0x32	; 50
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e2 e3       	ldi	r30, 0x32	; 50
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	48 2f       	mov	r20, r24
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	02 2e       	mov	r0, r18
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <DIO_vidSetPinVal+0x106>
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	0a 94       	dec	r0
    2d5e:	e2 f7       	brpl	.-8      	; 0x2d58 <DIO_vidSetPinVal+0x102>
    2d60:	84 2b       	or	r24, r20
    2d62:	8c 93       	st	X, r24
    2d64:	77 c0       	rjmp	.+238    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
				}
			}
			else if(u8PinVal == DIO_INPUT)
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	88 23       	and	r24, r24
    2d6a:	09 f0       	breq	.+2      	; 0x2d6e <DIO_vidSetPinVal+0x118>
    2d6c:	73 c0       	rjmp	.+230    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
			{
				switch(u8PortId)
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	3d 83       	std	Y+5, r19	; 0x05
    2d76:	2c 83       	std	Y+4, r18	; 0x04
    2d78:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	91 05       	cpc	r25, r1
    2d80:	59 f1       	breq	.+86     	; 0x2dd8 <DIO_vidSetPinVal+0x182>
    2d82:	2c 81       	ldd	r18, Y+4	; 0x04
    2d84:	3d 81       	ldd	r19, Y+5	; 0x05
    2d86:	22 30       	cpi	r18, 0x02	; 2
    2d88:	31 05       	cpc	r19, r1
    2d8a:	2c f4       	brge	.+10     	; 0x2d96 <DIO_vidSetPinVal+0x140>
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	69 f0       	breq	.+26     	; 0x2dae <DIO_vidSetPinVal+0x158>
    2d94:	5f c0       	rjmp	.+190    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
    2d96:	2c 81       	ldd	r18, Y+4	; 0x04
    2d98:	3d 81       	ldd	r19, Y+5	; 0x05
    2d9a:	22 30       	cpi	r18, 0x02	; 2
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	89 f1       	breq	.+98     	; 0x2e02 <DIO_vidSetPinVal+0x1ac>
    2da0:	8c 81       	ldd	r24, Y+4	; 0x04
    2da2:	9d 81       	ldd	r25, Y+5	; 0x05
    2da4:	83 30       	cpi	r24, 0x03	; 3
    2da6:	91 05       	cpc	r25, r1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <DIO_vidSetPinVal+0x156>
    2daa:	40 c0       	rjmp	.+128    	; 0x2e2c <DIO_vidSetPinVal+0x1d6>
    2dac:	53 c0       	rjmp	.+166    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
				{
				case (DIO_PORTA) : CLR_BIT(PORTA_REG , u8PinId); break;
    2dae:	ab e3       	ldi	r26, 0x3B	; 59
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	eb e3       	ldi	r30, 0x3B	; 59
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	48 2f       	mov	r20, r24
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	02 2e       	mov	r0, r18
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <DIO_vidSetPinVal+0x176>
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	0a 94       	dec	r0
    2dce:	e2 f7       	brpl	.-8      	; 0x2dc8 <DIO_vidSetPinVal+0x172>
    2dd0:	80 95       	com	r24
    2dd2:	84 23       	and	r24, r20
    2dd4:	8c 93       	st	X, r24
    2dd6:	3e c0       	rjmp	.+124    	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
				case (DIO_PORTB) : CLR_BIT(PORTB_REG , u8PinId); break;
    2dd8:	a8 e3       	ldi	r26, 0x38	; 56
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e8 e3       	ldi	r30, 0x38	; 56
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	48 2f       	mov	r20, r24
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
    2de6:	28 2f       	mov	r18, r24
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	02 2e       	mov	r0, r18
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <DIO_vidSetPinVal+0x1a0>
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	0a 94       	dec	r0
    2df8:	e2 f7       	brpl	.-8      	; 0x2df2 <DIO_vidSetPinVal+0x19c>
    2dfa:	80 95       	com	r24
    2dfc:	84 23       	and	r24, r20
    2dfe:	8c 93       	st	X, r24
    2e00:	29 c0       	rjmp	.+82     	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
				case (DIO_PORTC) : CLR_BIT(PORTC_REG , u8PinId); break;
    2e02:	a5 e3       	ldi	r26, 0x35	; 53
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e5 e3       	ldi	r30, 0x35	; 53
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	48 2f       	mov	r20, r24
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	02 2e       	mov	r0, r18
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <DIO_vidSetPinVal+0x1ca>
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	0a 94       	dec	r0
    2e22:	e2 f7       	brpl	.-8      	; 0x2e1c <DIO_vidSetPinVal+0x1c6>
    2e24:	80 95       	com	r24
    2e26:	84 23       	and	r24, r20
    2e28:	8c 93       	st	X, r24
    2e2a:	14 c0       	rjmp	.+40     	; 0x2e54 <DIO_vidSetPinVal+0x1fe>
				case (DIO_PORTD) : CLR_BIT(PORTD_REG , u8PinId); break;
    2e2c:	a2 e3       	ldi	r26, 0x32	; 50
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	e2 e3       	ldi	r30, 0x32	; 50
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	48 2f       	mov	r20, r24
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	02 2e       	mov	r0, r18
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <DIO_vidSetPinVal+0x1f4>
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	0a 94       	dec	r0
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <DIO_vidSetPinVal+0x1f0>
    2e4e:	80 95       	com	r24
    2e50:	84 23       	and	r24, r20
    2e52:	8c 93       	st	X, r24
			else{/* wrong Pin Value */}

	}
	else{/* wrong PortId OR PinId  */}

}
    2e54:	27 96       	adiw	r28, 0x07	; 7
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <DIO_vidTogglePinVal>:

void DIO_vidTogglePinVal(u8 u8PortId , u8 u8PinId)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <DIO_vidTogglePinVal+0x6>
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <DIO_vidTogglePinVal+0x8>
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	6a 83       	std	Y+2, r22	; 0x02
	if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	84 30       	cpi	r24, 0x04	; 4
    2e7a:	08 f0       	brcs	.+2      	; 0x2e7e <DIO_vidTogglePinVal+0x18>
    2e7c:	72 c0       	rjmp	.+228    	; 0x2f62 <DIO_vidTogglePinVal+0xfc>
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	88 30       	cpi	r24, 0x08	; 8
    2e82:	08 f0       	brcs	.+2      	; 0x2e86 <DIO_vidTogglePinVal+0x20>
    2e84:	6e c0       	rjmp	.+220    	; 0x2f62 <DIO_vidTogglePinVal+0xfc>
		{
			switch(u8PortId)
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	3c 83       	std	Y+4, r19	; 0x04
    2e8e:	2b 83       	std	Y+3, r18	; 0x03
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	81 30       	cpi	r24, 0x01	; 1
    2e96:	91 05       	cpc	r25, r1
    2e98:	49 f1       	breq	.+82     	; 0x2eec <DIO_vidTogglePinVal+0x86>
    2e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e9e:	22 30       	cpi	r18, 0x02	; 2
    2ea0:	31 05       	cpc	r19, r1
    2ea2:	2c f4       	brge	.+10     	; 0x2eae <DIO_vidTogglePinVal+0x48>
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	61 f0       	breq	.+24     	; 0x2ec4 <DIO_vidTogglePinVal+0x5e>
    2eac:	5a c0       	rjmp	.+180    	; 0x2f62 <DIO_vidTogglePinVal+0xfc>
    2eae:	2b 81       	ldd	r18, Y+3	; 0x03
    2eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    2eb2:	22 30       	cpi	r18, 0x02	; 2
    2eb4:	31 05       	cpc	r19, r1
    2eb6:	71 f1       	breq	.+92     	; 0x2f14 <DIO_vidTogglePinVal+0xae>
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebc:	83 30       	cpi	r24, 0x03	; 3
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	e9 f1       	breq	.+122    	; 0x2f3c <DIO_vidTogglePinVal+0xd6>
    2ec2:	4f c0       	rjmp	.+158    	; 0x2f62 <DIO_vidTogglePinVal+0xfc>
			{
			case (DIO_PORTA) : TOG_BIT(PORTA_REG , u8PinId); break;
    2ec4:	ab e3       	ldi	r26, 0x3B	; 59
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	eb e3       	ldi	r30, 0x3B	; 59
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	48 2f       	mov	r20, r24
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	02 2e       	mov	r0, r18
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <DIO_vidTogglePinVal+0x7c>
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	0a 94       	dec	r0
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <DIO_vidTogglePinVal+0x78>
    2ee6:	84 27       	eor	r24, r20
    2ee8:	8c 93       	st	X, r24
    2eea:	3b c0       	rjmp	.+118    	; 0x2f62 <DIO_vidTogglePinVal+0xfc>
			case (DIO_PORTB) : TOG_BIT(PORTB_REG , u8PinId); break;
    2eec:	a8 e3       	ldi	r26, 0x38	; 56
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	e8 e3       	ldi	r30, 0x38	; 56
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	48 2f       	mov	r20, r24
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	28 2f       	mov	r18, r24
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	02 2e       	mov	r0, r18
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <DIO_vidTogglePinVal+0xa4>
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	0a 94       	dec	r0
    2f0c:	e2 f7       	brpl	.-8      	; 0x2f06 <DIO_vidTogglePinVal+0xa0>
    2f0e:	84 27       	eor	r24, r20
    2f10:	8c 93       	st	X, r24
    2f12:	27 c0       	rjmp	.+78     	; 0x2f62 <DIO_vidTogglePinVal+0xfc>
			case (DIO_PORTC) : TOG_BIT(PORTC_REG , u8PinId); break;
    2f14:	a5 e3       	ldi	r26, 0x35	; 53
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e5 e3       	ldi	r30, 0x35	; 53
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	48 2f       	mov	r20, r24
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	28 2f       	mov	r18, r24
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	02 2e       	mov	r0, r18
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <DIO_vidTogglePinVal+0xcc>
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	0a 94       	dec	r0
    2f34:	e2 f7       	brpl	.-8      	; 0x2f2e <DIO_vidTogglePinVal+0xc8>
    2f36:	84 27       	eor	r24, r20
    2f38:	8c 93       	st	X, r24
    2f3a:	13 c0       	rjmp	.+38     	; 0x2f62 <DIO_vidTogglePinVal+0xfc>
			case (DIO_PORTD) : TOG_BIT(PORTD_REG , u8PinId); break;
    2f3c:	a2 e3       	ldi	r26, 0x32	; 50
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e2 e3       	ldi	r30, 0x32	; 50
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	48 2f       	mov	r20, r24
    2f48:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4a:	28 2f       	mov	r18, r24
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	02 2e       	mov	r0, r18
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <DIO_vidTogglePinVal+0xf4>
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	0a 94       	dec	r0
    2f5c:	e2 f7       	brpl	.-8      	; 0x2f56 <DIO_vidTogglePinVal+0xf0>
    2f5e:	84 27       	eor	r24, r20
    2f60:	8c 93       	st	X, r24
			}
		}
	else{/* wrong PortId OR PinId  */}
}
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <DIO_vidEnablePullUpRes>:

/*Warning you can't use this function except you are sure that the pin is input*/
void DIO_vidEnablePullUpRes(u8 u8PortId , u8 u8PinId)
{
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <DIO_vidEnablePullUpRes+0x6>
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <DIO_vidEnablePullUpRes+0x8>
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	6a 83       	std	Y+2, r22	; 0x02
	{
		if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	84 30       	cpi	r24, 0x04	; 4
    2f84:	08 f0       	brcs	.+2      	; 0x2f88 <DIO_vidEnablePullUpRes+0x18>
    2f86:	72 c0       	rjmp	.+228    	; 0x306c <DIO_vidEnablePullUpRes+0xfc>
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	88 30       	cpi	r24, 0x08	; 8
    2f8c:	08 f0       	brcs	.+2      	; 0x2f90 <DIO_vidEnablePullUpRes+0x20>
    2f8e:	6e c0       	rjmp	.+220    	; 0x306c <DIO_vidEnablePullUpRes+0xfc>
			{
				switch(u8PortId)
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	28 2f       	mov	r18, r24
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	3c 83       	std	Y+4, r19	; 0x04
    2f98:	2b 83       	std	Y+3, r18	; 0x03
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	81 30       	cpi	r24, 0x01	; 1
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	49 f1       	breq	.+82     	; 0x2ff6 <DIO_vidEnablePullUpRes+0x86>
    2fa4:	2b 81       	ldd	r18, Y+3	; 0x03
    2fa6:	3c 81       	ldd	r19, Y+4	; 0x04
    2fa8:	22 30       	cpi	r18, 0x02	; 2
    2faa:	31 05       	cpc	r19, r1
    2fac:	2c f4       	brge	.+10     	; 0x2fb8 <DIO_vidEnablePullUpRes+0x48>
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	61 f0       	breq	.+24     	; 0x2fce <DIO_vidEnablePullUpRes+0x5e>
    2fb6:	5a c0       	rjmp	.+180    	; 0x306c <DIO_vidEnablePullUpRes+0xfc>
    2fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fba:	3c 81       	ldd	r19, Y+4	; 0x04
    2fbc:	22 30       	cpi	r18, 0x02	; 2
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	71 f1       	breq	.+92     	; 0x301e <DIO_vidEnablePullUpRes+0xae>
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc6:	83 30       	cpi	r24, 0x03	; 3
    2fc8:	91 05       	cpc	r25, r1
    2fca:	e9 f1       	breq	.+122    	; 0x3046 <DIO_vidEnablePullUpRes+0xd6>
    2fcc:	4f c0       	rjmp	.+158    	; 0x306c <DIO_vidEnablePullUpRes+0xfc>
				{
				case (DIO_PORTA) : SET_BIT(PORTA_REG , u8PinId); break;
    2fce:	ab e3       	ldi	r26, 0x3B	; 59
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	eb e3       	ldi	r30, 0x3B	; 59
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	48 2f       	mov	r20, r24
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	28 2f       	mov	r18, r24
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	02 2e       	mov	r0, r18
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <DIO_vidEnablePullUpRes+0x7c>
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	0a 94       	dec	r0
    2fee:	e2 f7       	brpl	.-8      	; 0x2fe8 <DIO_vidEnablePullUpRes+0x78>
    2ff0:	84 2b       	or	r24, r20
    2ff2:	8c 93       	st	X, r24
    2ff4:	3b c0       	rjmp	.+118    	; 0x306c <DIO_vidEnablePullUpRes+0xfc>
				case (DIO_PORTB) : SET_BIT(PORTB_REG , u8PinId); break;
    2ff6:	a8 e3       	ldi	r26, 0x38	; 56
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	e8 e3       	ldi	r30, 0x38	; 56
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	48 2f       	mov	r20, r24
    3002:	8a 81       	ldd	r24, Y+2	; 0x02
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	02 2e       	mov	r0, r18
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <DIO_vidEnablePullUpRes+0xa4>
    3010:	88 0f       	add	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	0a 94       	dec	r0
    3016:	e2 f7       	brpl	.-8      	; 0x3010 <DIO_vidEnablePullUpRes+0xa0>
    3018:	84 2b       	or	r24, r20
    301a:	8c 93       	st	X, r24
    301c:	27 c0       	rjmp	.+78     	; 0x306c <DIO_vidEnablePullUpRes+0xfc>
				case (DIO_PORTC) : SET_BIT(PORTC_REG , u8PinId); break;
    301e:	a5 e3       	ldi	r26, 0x35	; 53
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	e5 e3       	ldi	r30, 0x35	; 53
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	48 2f       	mov	r20, r24
    302a:	8a 81       	ldd	r24, Y+2	; 0x02
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	02 2e       	mov	r0, r18
    3036:	02 c0       	rjmp	.+4      	; 0x303c <DIO_vidEnablePullUpRes+0xcc>
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	0a 94       	dec	r0
    303e:	e2 f7       	brpl	.-8      	; 0x3038 <DIO_vidEnablePullUpRes+0xc8>
    3040:	84 2b       	or	r24, r20
    3042:	8c 93       	st	X, r24
    3044:	13 c0       	rjmp	.+38     	; 0x306c <DIO_vidEnablePullUpRes+0xfc>
				case (DIO_PORTD) : SET_BIT(PORTD_REG , u8PinId); break;
    3046:	a2 e3       	ldi	r26, 0x32	; 50
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	e2 e3       	ldi	r30, 0x32	; 50
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	48 2f       	mov	r20, r24
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	28 2f       	mov	r18, r24
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	02 2e       	mov	r0, r18
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <DIO_vidEnablePullUpRes+0xf4>
    3060:	88 0f       	add	r24, r24
    3062:	99 1f       	adc	r25, r25
    3064:	0a 94       	dec	r0
    3066:	e2 f7       	brpl	.-8      	; 0x3060 <DIO_vidEnablePullUpRes+0xf0>
    3068:	84 2b       	or	r24, r20
    306a:	8c 93       	st	X, r24
				}
			}
		else{/* wrong PortId OR PinId  */}
	}
}
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	08 95       	ret

0000307a <DIO_u8GetPinVal>:

/*this function will return only 0x01 OR 0x00*/
u8 DIO_u8GetPinVal(u8 u8PortId , u8 u8PinId)
{
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	00 d0       	rcall	.+0      	; 0x3080 <DIO_u8GetPinVal+0x6>
    3080:	00 d0       	rcall	.+0      	; 0x3082 <DIO_u8GetPinVal+0x8>
    3082:	0f 92       	push	r0
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	8a 83       	std	Y+2, r24	; 0x02
    308a:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8Result;
	if ((u8PortId <= DIO_PORTD)&&(u8PinId <= DIO_PIN7))
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	84 30       	cpi	r24, 0x04	; 4
    3090:	08 f0       	brcs	.+2      	; 0x3094 <DIO_u8GetPinVal+0x1a>
    3092:	6c c0       	rjmp	.+216    	; 0x316c <DIO_u8GetPinVal+0xf2>
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	88 30       	cpi	r24, 0x08	; 8
    3098:	08 f0       	brcs	.+2      	; 0x309c <DIO_u8GetPinVal+0x22>
    309a:	68 c0       	rjmp	.+208    	; 0x316c <DIO_u8GetPinVal+0xf2>
		{
			switch(u8PortId)
    309c:	8a 81       	ldd	r24, Y+2	; 0x02
    309e:	28 2f       	mov	r18, r24
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	3d 83       	std	Y+5, r19	; 0x05
    30a4:	2c 83       	std	Y+4, r18	; 0x04
    30a6:	4c 81       	ldd	r20, Y+4	; 0x04
    30a8:	5d 81       	ldd	r21, Y+5	; 0x05
    30aa:	41 30       	cpi	r20, 0x01	; 1
    30ac:	51 05       	cpc	r21, r1
    30ae:	41 f1       	breq	.+80     	; 0x3100 <DIO_u8GetPinVal+0x86>
    30b0:	8c 81       	ldd	r24, Y+4	; 0x04
    30b2:	9d 81       	ldd	r25, Y+5	; 0x05
    30b4:	82 30       	cpi	r24, 0x02	; 2
    30b6:	91 05       	cpc	r25, r1
    30b8:	34 f4       	brge	.+12     	; 0x30c6 <DIO_u8GetPinVal+0x4c>
    30ba:	2c 81       	ldd	r18, Y+4	; 0x04
    30bc:	3d 81       	ldd	r19, Y+5	; 0x05
    30be:	21 15       	cp	r18, r1
    30c0:	31 05       	cpc	r19, r1
    30c2:	61 f0       	breq	.+24     	; 0x30dc <DIO_u8GetPinVal+0x62>
    30c4:	55 c0       	rjmp	.+170    	; 0x3170 <DIO_u8GetPinVal+0xf6>
    30c6:	4c 81       	ldd	r20, Y+4	; 0x04
    30c8:	5d 81       	ldd	r21, Y+5	; 0x05
    30ca:	42 30       	cpi	r20, 0x02	; 2
    30cc:	51 05       	cpc	r21, r1
    30ce:	51 f1       	breq	.+84     	; 0x3124 <DIO_u8GetPinVal+0xaa>
    30d0:	8c 81       	ldd	r24, Y+4	; 0x04
    30d2:	9d 81       	ldd	r25, Y+5	; 0x05
    30d4:	83 30       	cpi	r24, 0x03	; 3
    30d6:	91 05       	cpc	r25, r1
    30d8:	b9 f1       	breq	.+110    	; 0x3148 <DIO_u8GetPinVal+0xce>
    30da:	4a c0       	rjmp	.+148    	; 0x3170 <DIO_u8GetPinVal+0xf6>
			{
			case (DIO_PORTA) : u8Result = GET_BIT(PINA_REG , u8PinId); break;
    30dc:	e9 e3       	ldi	r30, 0x39	; 57
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	28 2f       	mov	r18, r24
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	88 2f       	mov	r24, r24
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	a9 01       	movw	r20, r18
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <DIO_u8GetPinVal+0x7a>
    30f0:	55 95       	asr	r21
    30f2:	47 95       	ror	r20
    30f4:	8a 95       	dec	r24
    30f6:	e2 f7       	brpl	.-8      	; 0x30f0 <DIO_u8GetPinVal+0x76>
    30f8:	ca 01       	movw	r24, r20
    30fa:	81 70       	andi	r24, 0x01	; 1
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	38 c0       	rjmp	.+112    	; 0x3170 <DIO_u8GetPinVal+0xf6>
			case (DIO_PORTB) : u8Result = GET_BIT(PINB_REG , u8PinId); break;
    3100:	e6 e3       	ldi	r30, 0x36	; 54
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	88 2f       	mov	r24, r24
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a9 01       	movw	r20, r18
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <DIO_u8GetPinVal+0x9e>
    3114:	55 95       	asr	r21
    3116:	47 95       	ror	r20
    3118:	8a 95       	dec	r24
    311a:	e2 f7       	brpl	.-8      	; 0x3114 <DIO_u8GetPinVal+0x9a>
    311c:	ca 01       	movw	r24, r20
    311e:	81 70       	andi	r24, 0x01	; 1
    3120:	89 83       	std	Y+1, r24	; 0x01
    3122:	26 c0       	rjmp	.+76     	; 0x3170 <DIO_u8GetPinVal+0xf6>
			case (DIO_PORTC) : u8Result = GET_BIT(PINC_REG , u8PinId); break;
    3124:	e3 e3       	ldi	r30, 0x33	; 51
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	88 2f       	mov	r24, r24
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	a9 01       	movw	r20, r18
    3136:	02 c0       	rjmp	.+4      	; 0x313c <DIO_u8GetPinVal+0xc2>
    3138:	55 95       	asr	r21
    313a:	47 95       	ror	r20
    313c:	8a 95       	dec	r24
    313e:	e2 f7       	brpl	.-8      	; 0x3138 <DIO_u8GetPinVal+0xbe>
    3140:	ca 01       	movw	r24, r20
    3142:	81 70       	andi	r24, 0x01	; 1
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <DIO_u8GetPinVal+0xf6>
			case (DIO_PORTD) : u8Result = GET_BIT(PIND_REG , u8PinId); break;
    3148:	e0 e3       	ldi	r30, 0x30	; 48
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	8b 81       	ldd	r24, Y+3	; 0x03
    3154:	88 2f       	mov	r24, r24
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	a9 01       	movw	r20, r18
    315a:	02 c0       	rjmp	.+4      	; 0x3160 <DIO_u8GetPinVal+0xe6>
    315c:	55 95       	asr	r21
    315e:	47 95       	ror	r20
    3160:	8a 95       	dec	r24
    3162:	e2 f7       	brpl	.-8      	; 0x315c <DIO_u8GetPinVal+0xe2>
    3164:	ca 01       	movw	r24, r20
    3166:	81 70       	andi	r24, 0x01	; 1
    3168:	89 83       	std	Y+1, r24	; 0x01
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <DIO_u8GetPinVal+0xf6>
			}
		}
		else
		{/* wrong PortId OR PinId  */
			u8Result = DIO_UNDEFINED_VALUE;
    316c:	8f ef       	ldi	r24, 0xFF	; 255
    316e:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8Result;
    3170:	89 81       	ldd	r24, Y+1	; 0x01
}
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <DIO_u8GetPortVal>:


u8 DIO_u8GetPortVal(u8 u8PortId )
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	00 d0       	rcall	.+0      	; 0x3188 <DIO_u8GetPortVal+0x6>
    3188:	00 d0       	rcall	.+0      	; 0x318a <DIO_u8GetPortVal+0x8>
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8Result;
			switch(u8PortId)
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
    3192:	28 2f       	mov	r18, r24
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	3c 83       	std	Y+4, r19	; 0x04
    3198:	2b 83       	std	Y+3, r18	; 0x03
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	9c 81       	ldd	r25, Y+4	; 0x04
    319e:	81 30       	cpi	r24, 0x01	; 1
    31a0:	91 05       	cpc	r25, r1
    31a2:	d1 f0       	breq	.+52     	; 0x31d8 <DIO_u8GetPortVal+0x56>
    31a4:	2b 81       	ldd	r18, Y+3	; 0x03
    31a6:	3c 81       	ldd	r19, Y+4	; 0x04
    31a8:	22 30       	cpi	r18, 0x02	; 2
    31aa:	31 05       	cpc	r19, r1
    31ac:	2c f4       	brge	.+10     	; 0x31b8 <DIO_u8GetPortVal+0x36>
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	9c 81       	ldd	r25, Y+4	; 0x04
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	61 f0       	breq	.+24     	; 0x31ce <DIO_u8GetPortVal+0x4c>
    31b6:	1f c0       	rjmp	.+62     	; 0x31f6 <DIO_u8GetPortVal+0x74>
    31b8:	2b 81       	ldd	r18, Y+3	; 0x03
    31ba:	3c 81       	ldd	r19, Y+4	; 0x04
    31bc:	22 30       	cpi	r18, 0x02	; 2
    31be:	31 05       	cpc	r19, r1
    31c0:	81 f0       	breq	.+32     	; 0x31e2 <DIO_u8GetPortVal+0x60>
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	9c 81       	ldd	r25, Y+4	; 0x04
    31c6:	83 30       	cpi	r24, 0x03	; 3
    31c8:	91 05       	cpc	r25, r1
    31ca:	81 f0       	breq	.+32     	; 0x31ec <DIO_u8GetPortVal+0x6a>
    31cc:	14 c0       	rjmp	.+40     	; 0x31f6 <DIO_u8GetPortVal+0x74>
			{
			case (DIO_PORTA) : u8Result = PINA_REG ; break;
    31ce:	e9 e3       	ldi	r30, 0x39	; 57
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	11 c0       	rjmp	.+34     	; 0x31fa <DIO_u8GetPortVal+0x78>
			case (DIO_PORTB) : u8Result = PINB_REG ; break;
    31d8:	e6 e3       	ldi	r30, 0x36	; 54
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	89 83       	std	Y+1, r24	; 0x01
    31e0:	0c c0       	rjmp	.+24     	; 0x31fa <DIO_u8GetPortVal+0x78>
			case (DIO_PORTC) : u8Result = PINC_REG ; break;
    31e2:	e3 e3       	ldi	r30, 0x33	; 51
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	07 c0       	rjmp	.+14     	; 0x31fa <DIO_u8GetPortVal+0x78>
			case (DIO_PORTD) : u8Result = PIND_REG ; break;
    31ec:	e0 e3       	ldi	r30, 0x30	; 48
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	89 83       	std	Y+1, r24	; 0x01
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <DIO_u8GetPortVal+0x78>
			default :/* wrong PortId  */
					  u8Result = DIO_UNDEFINED_VALUE;break;
    31f6:	8f ef       	ldi	r24, 0xFF	; 255
    31f8:	89 83       	std	Y+1, r24	; 0x01
			}

	return u8Result;
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(u8 u8PortId , u8 u8PortDir)
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	00 d0       	rcall	.+0      	; 0x3210 <DIO_vidSetPortDir+0x6>
    3210:	00 d0       	rcall	.+0      	; 0x3212 <DIO_vidSetPortDir+0x8>
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortId)
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	3c 83       	std	Y+4, r19	; 0x04
    3222:	2b 83       	std	Y+3, r18	; 0x03
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	81 30       	cpi	r24, 0x01	; 1
    322a:	91 05       	cpc	r25, r1
    322c:	d1 f0       	breq	.+52     	; 0x3262 <DIO_vidSetPortDir+0x58>
    322e:	2b 81       	ldd	r18, Y+3	; 0x03
    3230:	3c 81       	ldd	r19, Y+4	; 0x04
    3232:	22 30       	cpi	r18, 0x02	; 2
    3234:	31 05       	cpc	r19, r1
    3236:	2c f4       	brge	.+10     	; 0x3242 <DIO_vidSetPortDir+0x38>
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	9c 81       	ldd	r25, Y+4	; 0x04
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	61 f0       	breq	.+24     	; 0x3258 <DIO_vidSetPortDir+0x4e>
    3240:	1e c0       	rjmp	.+60     	; 0x327e <DIO_vidSetPortDir+0x74>
    3242:	2b 81       	ldd	r18, Y+3	; 0x03
    3244:	3c 81       	ldd	r19, Y+4	; 0x04
    3246:	22 30       	cpi	r18, 0x02	; 2
    3248:	31 05       	cpc	r19, r1
    324a:	81 f0       	breq	.+32     	; 0x326c <DIO_vidSetPortDir+0x62>
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	9c 81       	ldd	r25, Y+4	; 0x04
    3250:	83 30       	cpi	r24, 0x03	; 3
    3252:	91 05       	cpc	r25, r1
    3254:	81 f0       	breq	.+32     	; 0x3276 <DIO_vidSetPortDir+0x6c>
    3256:	13 c0       	rjmp	.+38     	; 0x327e <DIO_vidSetPortDir+0x74>
	{
	case (DIO_PORTA) : DDRA_REG = u8PortDir; break;
    3258:	ea e3       	ldi	r30, 0x3A	; 58
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	80 83       	st	Z, r24
    3260:	0e c0       	rjmp	.+28     	; 0x327e <DIO_vidSetPortDir+0x74>
	case (DIO_PORTB) : DDRB_REG = u8PortDir; break;
    3262:	e7 e3       	ldi	r30, 0x37	; 55
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	80 83       	st	Z, r24
    326a:	09 c0       	rjmp	.+18     	; 0x327e <DIO_vidSetPortDir+0x74>
	case (DIO_PORTC) : DDRC_REG = u8PortDir; break;
    326c:	e4 e3       	ldi	r30, 0x34	; 52
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	80 83       	st	Z, r24
    3274:	04 c0       	rjmp	.+8      	; 0x327e <DIO_vidSetPortDir+0x74>
	case (DIO_PORTD) : DDRD_REG = u8PortDir; break;
    3276:	e1 e3       	ldi	r30, 0x31	; 49
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	80 83       	st	Z, r24
	default :/* wrong PortId OR PinId  */    break;
	}

}
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <DIO_vidSetPortVal>:

void DIO_vidSetPortVal(u8 u8PortId , u8 u8PortVal)
{
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	00 d0       	rcall	.+0      	; 0x3292 <DIO_vidSetPortVal+0x6>
    3292:	00 d0       	rcall	.+0      	; 0x3294 <DIO_vidSetPortVal+0x8>
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	89 83       	std	Y+1, r24	; 0x01
    329a:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortId)
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	28 2f       	mov	r18, r24
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	3c 83       	std	Y+4, r19	; 0x04
    32a4:	2b 83       	std	Y+3, r18	; 0x03
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	9c 81       	ldd	r25, Y+4	; 0x04
    32aa:	81 30       	cpi	r24, 0x01	; 1
    32ac:	91 05       	cpc	r25, r1
    32ae:	d1 f0       	breq	.+52     	; 0x32e4 <DIO_vidSetPortVal+0x58>
    32b0:	2b 81       	ldd	r18, Y+3	; 0x03
    32b2:	3c 81       	ldd	r19, Y+4	; 0x04
    32b4:	22 30       	cpi	r18, 0x02	; 2
    32b6:	31 05       	cpc	r19, r1
    32b8:	2c f4       	brge	.+10     	; 0x32c4 <DIO_vidSetPortVal+0x38>
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	9c 81       	ldd	r25, Y+4	; 0x04
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	61 f0       	breq	.+24     	; 0x32da <DIO_vidSetPortVal+0x4e>
    32c2:	1e c0       	rjmp	.+60     	; 0x3300 <DIO_vidSetPortVal+0x74>
    32c4:	2b 81       	ldd	r18, Y+3	; 0x03
    32c6:	3c 81       	ldd	r19, Y+4	; 0x04
    32c8:	22 30       	cpi	r18, 0x02	; 2
    32ca:	31 05       	cpc	r19, r1
    32cc:	81 f0       	breq	.+32     	; 0x32ee <DIO_vidSetPortVal+0x62>
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	9c 81       	ldd	r25, Y+4	; 0x04
    32d2:	83 30       	cpi	r24, 0x03	; 3
    32d4:	91 05       	cpc	r25, r1
    32d6:	81 f0       	breq	.+32     	; 0x32f8 <DIO_vidSetPortVal+0x6c>
    32d8:	13 c0       	rjmp	.+38     	; 0x3300 <DIO_vidSetPortVal+0x74>
		{
		case (DIO_PORTA) : PORTA_REG = u8PortVal; break;
    32da:	eb e3       	ldi	r30, 0x3B	; 59
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	80 83       	st	Z, r24
    32e2:	0e c0       	rjmp	.+28     	; 0x3300 <DIO_vidSetPortVal+0x74>
		case (DIO_PORTB) : PORTB_REG = u8PortVal; break;
    32e4:	e8 e3       	ldi	r30, 0x38	; 56
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	80 83       	st	Z, r24
    32ec:	09 c0       	rjmp	.+18     	; 0x3300 <DIO_vidSetPortVal+0x74>
		case (DIO_PORTC) : PORTC_REG = u8PortVal; break;
    32ee:	e5 e3       	ldi	r30, 0x35	; 53
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	8a 81       	ldd	r24, Y+2	; 0x02
    32f4:	80 83       	st	Z, r24
    32f6:	04 c0       	rjmp	.+8      	; 0x3300 <DIO_vidSetPortVal+0x74>
		case (DIO_PORTD) : PORTD_REG = u8PortVal; break;
    32f8:	e2 e3       	ldi	r30, 0x32	; 50
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	80 83       	st	Z, r24
		default :/* wrong PortId OR PinId  */     break;
		}
}
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <DIO_vidEnableIntrupt>:


void DIO_vidEnableIntrupt(u8 u8InterNum, u8 u8InterStat)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	2a 97       	sbiw	r28, 0x0a	; 10
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	89 83       	std	Y+1, r24	; 0x01
    3324:	6a 83       	std	Y+2, r22	; 0x02
	if((u8InterNum<3)&&(u8InterStat<4))
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	83 30       	cpi	r24, 0x03	; 3
    332a:	08 f0       	brcs	.+2      	; 0x332e <DIO_vidEnableIntrupt+0x20>
    332c:	26 c1       	rjmp	.+588    	; 0x357a <DIO_vidEnableIntrupt+0x26c>
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	84 30       	cpi	r24, 0x04	; 4
    3332:	08 f0       	brcs	.+2      	; 0x3336 <DIO_vidEnableIntrupt+0x28>
    3334:	22 c1       	rjmp	.+580    	; 0x357a <DIO_vidEnableIntrupt+0x26c>
	{
		/*Enable All Interrupts*/
		SET_BIT(SR_REG,7);
    3336:	af e5       	ldi	r26, 0x5F	; 95
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	ef e5       	ldi	r30, 0x5F	; 95
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	80 68       	ori	r24, 0x80	; 128
    3342:	8c 93       	st	X, r24

		switch(u8InterNum)
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	3a 87       	std	Y+10, r19	; 0x0a
    334c:	29 87       	std	Y+9, r18	; 0x09
    334e:	89 85       	ldd	r24, Y+9	; 0x09
    3350:	9a 85       	ldd	r25, Y+10	; 0x0a
    3352:	81 30       	cpi	r24, 0x01	; 1
    3354:	91 05       	cpc	r25, r1
    3356:	09 f4       	brne	.+2      	; 0x335a <DIO_vidEnableIntrupt+0x4c>
    3358:	76 c0       	rjmp	.+236    	; 0x3446 <DIO_vidEnableIntrupt+0x138>
    335a:	29 85       	ldd	r18, Y+9	; 0x09
    335c:	3a 85       	ldd	r19, Y+10	; 0x0a
    335e:	22 30       	cpi	r18, 0x02	; 2
    3360:	31 05       	cpc	r19, r1
    3362:	09 f4       	brne	.+2      	; 0x3366 <DIO_vidEnableIntrupt+0x58>
    3364:	db c0       	rjmp	.+438    	; 0x351c <DIO_vidEnableIntrupt+0x20e>
    3366:	89 85       	ldd	r24, Y+9	; 0x09
    3368:	9a 85       	ldd	r25, Y+10	; 0x0a
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	09 f0       	breq	.+2      	; 0x3370 <DIO_vidEnableIntrupt+0x62>
    336e:	05 c1       	rjmp	.+522    	; 0x357a <DIO_vidEnableIntrupt+0x26c>
		{
		/*Interrupt 0(INT0)*/
		case 0:
			/*Make The INT0 Pin As Input	&PullUp Res*/
			DIO_vidSetPinDir(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    3370:	83 e0       	ldi	r24, 0x03	; 3
    3372:	62 e0       	ldi	r22, 0x02	; 2
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
			DIO_vidEnablePullUpRes(DIO_PORTD,DIO_PIN2);
    337a:	83 e0       	ldi	r24, 0x03	; 3
    337c:	62 e0       	ldi	r22, 0x02	; 2
    337e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <DIO_vidEnablePullUpRes>

			switch(u8InterStat)
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	28 2f       	mov	r18, r24
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	38 87       	std	Y+8, r19	; 0x08
    338a:	2f 83       	std	Y+7, r18	; 0x07
    338c:	8f 81       	ldd	r24, Y+7	; 0x07
    338e:	98 85       	ldd	r25, Y+8	; 0x08
    3390:	81 30       	cpi	r24, 0x01	; 1
    3392:	91 05       	cpc	r25, r1
    3394:	21 f1       	breq	.+72     	; 0x33de <DIO_vidEnableIntrupt+0xd0>
    3396:	2f 81       	ldd	r18, Y+7	; 0x07
    3398:	38 85       	ldd	r19, Y+8	; 0x08
    339a:	22 30       	cpi	r18, 0x02	; 2
    339c:	31 05       	cpc	r19, r1
    339e:	2c f4       	brge	.+10     	; 0x33aa <DIO_vidEnableIntrupt+0x9c>
    33a0:	8f 81       	ldd	r24, Y+7	; 0x07
    33a2:	98 85       	ldd	r25, Y+8	; 0x08
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	61 f0       	breq	.+24     	; 0x33c0 <DIO_vidEnableIntrupt+0xb2>
    33a8:	46 c0       	rjmp	.+140    	; 0x3436 <DIO_vidEnableIntrupt+0x128>
    33aa:	2f 81       	ldd	r18, Y+7	; 0x07
    33ac:	38 85       	ldd	r19, Y+8	; 0x08
    33ae:	22 30       	cpi	r18, 0x02	; 2
    33b0:	31 05       	cpc	r19, r1
    33b2:	21 f1       	breq	.+72     	; 0x33fc <DIO_vidEnableIntrupt+0xee>
    33b4:	8f 81       	ldd	r24, Y+7	; 0x07
    33b6:	98 85       	ldd	r25, Y+8	; 0x08
    33b8:	83 30       	cpi	r24, 0x03	; 3
    33ba:	91 05       	cpc	r25, r1
    33bc:	71 f1       	breq	.+92     	; 0x341a <DIO_vidEnableIntrupt+0x10c>
    33be:	3b c0       	rjmp	.+118    	; 0x3436 <DIO_vidEnableIntrupt+0x128>
				{
				/*Low Level Interrupt*/
				case 0:	CLR_BIT(MCUCR_REG,1);CLR_BIT(MCUCR_REG,0);break;
    33c0:	a5 e5       	ldi	r26, 0x55	; 85
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	e5 e5       	ldi	r30, 0x55	; 85
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	8d 7f       	andi	r24, 0xFD	; 253
    33cc:	8c 93       	st	X, r24
    33ce:	a5 e5       	ldi	r26, 0x55	; 85
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	e5 e5       	ldi	r30, 0x55	; 85
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	8e 7f       	andi	r24, 0xFE	; 254
    33da:	8c 93       	st	X, r24
    33dc:	2c c0       	rjmp	.+88     	; 0x3436 <DIO_vidEnableIntrupt+0x128>

				/*Raising Or Falling Edge*/
				case 1:CLR_BIT(MCUCR_REG,1);SET_BIT(MCUCR_REG,0);break;
    33de:	a5 e5       	ldi	r26, 0x55	; 85
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	e5 e5       	ldi	r30, 0x55	; 85
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	8d 7f       	andi	r24, 0xFD	; 253
    33ea:	8c 93       	st	X, r24
    33ec:	a5 e5       	ldi	r26, 0x55	; 85
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	e5 e5       	ldi	r30, 0x55	; 85
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	81 60       	ori	r24, 0x01	; 1
    33f8:	8c 93       	st	X, r24
    33fa:	1d c0       	rjmp	.+58     	; 0x3436 <DIO_vidEnableIntrupt+0x128>

				/*Falling Edge*/
				case 2:SET_BIT(MCUCR_REG,1);CLR_BIT(MCUCR_REG,0);break;
    33fc:	a5 e5       	ldi	r26, 0x55	; 85
    33fe:	b0 e0       	ldi	r27, 0x00	; 0
    3400:	e5 e5       	ldi	r30, 0x55	; 85
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	80 81       	ld	r24, Z
    3406:	82 60       	ori	r24, 0x02	; 2
    3408:	8c 93       	st	X, r24
    340a:	a5 e5       	ldi	r26, 0x55	; 85
    340c:	b0 e0       	ldi	r27, 0x00	; 0
    340e:	e5 e5       	ldi	r30, 0x55	; 85
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	8e 7f       	andi	r24, 0xFE	; 254
    3416:	8c 93       	st	X, r24
    3418:	0e c0       	rjmp	.+28     	; 0x3436 <DIO_vidEnableIntrupt+0x128>

				/*Raising Edge*/
				case 3:SET_BIT(MCUCR_REG,1);SET_BIT(MCUCR_REG,0);break;
    341a:	a5 e5       	ldi	r26, 0x55	; 85
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	e5 e5       	ldi	r30, 0x55	; 85
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	82 60       	ori	r24, 0x02	; 2
    3426:	8c 93       	st	X, r24
    3428:	a5 e5       	ldi	r26, 0x55	; 85
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	e5 e5       	ldi	r30, 0x55	; 85
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	81 60       	ori	r24, 0x01	; 1
    3434:	8c 93       	st	X, r24
				}

				/*Enable Interrupt 0*/
				SET_BIT(GICR_REG,6);
    3436:	ab e5       	ldi	r26, 0x5B	; 91
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	eb e5       	ldi	r30, 0x5B	; 91
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	80 64       	ori	r24, 0x40	; 64
    3442:	8c 93       	st	X, r24
    3444:	9a c0       	rjmp	.+308    	; 0x357a <DIO_vidEnableIntrupt+0x26c>
				break;

		/*Interrupt 1(INT1)*/
		case 1:
			/*Make The INT1 Pin As Input	&PullUp Res*/
			DIO_vidSetPinDir(DIO_PORTD,DIO_PIN3,DIO_INPUT);
    3446:	83 e0       	ldi	r24, 0x03	; 3
    3448:	63 e0       	ldi	r22, 0x03	; 3
    344a:	40 e0       	ldi	r20, 0x00	; 0
    344c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
			DIO_vidEnablePullUpRes(DIO_PORTD,DIO_PIN3);
    3450:	83 e0       	ldi	r24, 0x03	; 3
    3452:	63 e0       	ldi	r22, 0x03	; 3
    3454:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <DIO_vidEnablePullUpRes>

			switch(u8InterStat)
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	28 2f       	mov	r18, r24
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	3e 83       	std	Y+6, r19	; 0x06
    3460:	2d 83       	std	Y+5, r18	; 0x05
    3462:	8d 81       	ldd	r24, Y+5	; 0x05
    3464:	9e 81       	ldd	r25, Y+6	; 0x06
    3466:	81 30       	cpi	r24, 0x01	; 1
    3468:	91 05       	cpc	r25, r1
    346a:	21 f1       	breq	.+72     	; 0x34b4 <DIO_vidEnableIntrupt+0x1a6>
    346c:	2d 81       	ldd	r18, Y+5	; 0x05
    346e:	3e 81       	ldd	r19, Y+6	; 0x06
    3470:	22 30       	cpi	r18, 0x02	; 2
    3472:	31 05       	cpc	r19, r1
    3474:	2c f4       	brge	.+10     	; 0x3480 <DIO_vidEnableIntrupt+0x172>
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	61 f0       	breq	.+24     	; 0x3496 <DIO_vidEnableIntrupt+0x188>
    347e:	46 c0       	rjmp	.+140    	; 0x350c <DIO_vidEnableIntrupt+0x1fe>
    3480:	2d 81       	ldd	r18, Y+5	; 0x05
    3482:	3e 81       	ldd	r19, Y+6	; 0x06
    3484:	22 30       	cpi	r18, 0x02	; 2
    3486:	31 05       	cpc	r19, r1
    3488:	21 f1       	breq	.+72     	; 0x34d2 <DIO_vidEnableIntrupt+0x1c4>
    348a:	8d 81       	ldd	r24, Y+5	; 0x05
    348c:	9e 81       	ldd	r25, Y+6	; 0x06
    348e:	83 30       	cpi	r24, 0x03	; 3
    3490:	91 05       	cpc	r25, r1
    3492:	71 f1       	breq	.+92     	; 0x34f0 <DIO_vidEnableIntrupt+0x1e2>
    3494:	3b c0       	rjmp	.+118    	; 0x350c <DIO_vidEnableIntrupt+0x1fe>
				{
				/*Low Level Interrupt*/
				case 0:	CLR_BIT(MCUCR_REG,3);CLR_BIT(MCUCR_REG,2);break;
    3496:	a5 e5       	ldi	r26, 0x55	; 85
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	e5 e5       	ldi	r30, 0x55	; 85
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	87 7f       	andi	r24, 0xF7	; 247
    34a2:	8c 93       	st	X, r24
    34a4:	a5 e5       	ldi	r26, 0x55	; 85
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e5 e5       	ldi	r30, 0x55	; 85
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	8b 7f       	andi	r24, 0xFB	; 251
    34b0:	8c 93       	st	X, r24
    34b2:	2c c0       	rjmp	.+88     	; 0x350c <DIO_vidEnableIntrupt+0x1fe>

				/*Raising Or Falling Edge*/
				case 1:CLR_BIT(MCUCR_REG,3);SET_BIT(MCUCR_REG,2);break;
    34b4:	a5 e5       	ldi	r26, 0x55	; 85
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	e5 e5       	ldi	r30, 0x55	; 85
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	87 7f       	andi	r24, 0xF7	; 247
    34c0:	8c 93       	st	X, r24
    34c2:	a5 e5       	ldi	r26, 0x55	; 85
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	e5 e5       	ldi	r30, 0x55	; 85
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	80 81       	ld	r24, Z
    34cc:	84 60       	ori	r24, 0x04	; 4
    34ce:	8c 93       	st	X, r24
    34d0:	1d c0       	rjmp	.+58     	; 0x350c <DIO_vidEnableIntrupt+0x1fe>

				/*Falling Edge*/
				case 2:SET_BIT(MCUCR_REG,3);CLR_BIT(MCUCR_REG,2);break;
    34d2:	a5 e5       	ldi	r26, 0x55	; 85
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	e5 e5       	ldi	r30, 0x55	; 85
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	88 60       	ori	r24, 0x08	; 8
    34de:	8c 93       	st	X, r24
    34e0:	a5 e5       	ldi	r26, 0x55	; 85
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e5 e5       	ldi	r30, 0x55	; 85
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	8b 7f       	andi	r24, 0xFB	; 251
    34ec:	8c 93       	st	X, r24
    34ee:	0e c0       	rjmp	.+28     	; 0x350c <DIO_vidEnableIntrupt+0x1fe>

				/*Raising Edge*/
				case 3:SET_BIT(MCUCR_REG,3);SET_BIT(MCUCR_REG,2);break;
    34f0:	a5 e5       	ldi	r26, 0x55	; 85
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	e5 e5       	ldi	r30, 0x55	; 85
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	88 60       	ori	r24, 0x08	; 8
    34fc:	8c 93       	st	X, r24
    34fe:	a5 e5       	ldi	r26, 0x55	; 85
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	e5 e5       	ldi	r30, 0x55	; 85
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	84 60       	ori	r24, 0x04	; 4
    350a:	8c 93       	st	X, r24
				}
				/*Enable Interrupt 1*/
				SET_BIT(GICR_REG,7);
    350c:	ab e5       	ldi	r26, 0x5B	; 91
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	eb e5       	ldi	r30, 0x5B	; 91
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	80 68       	ori	r24, 0x80	; 128
    3518:	8c 93       	st	X, r24
    351a:	2f c0       	rjmp	.+94     	; 0x357a <DIO_vidEnableIntrupt+0x26c>

		/*Interrupt 2(INT2)*/
		case 2:


			switch(u8InterStat)
    351c:	8a 81       	ldd	r24, Y+2	; 0x02
    351e:	28 2f       	mov	r18, r24
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	3c 83       	std	Y+4, r19	; 0x04
    3524:	2b 83       	std	Y+3, r18	; 0x03
    3526:	8b 81       	ldd	r24, Y+3	; 0x03
    3528:	9c 81       	ldd	r25, Y+4	; 0x04
    352a:	82 30       	cpi	r24, 0x02	; 2
    352c:	91 05       	cpc	r25, r1
    352e:	31 f0       	breq	.+12     	; 0x353c <DIO_vidEnableIntrupt+0x22e>
    3530:	2b 81       	ldd	r18, Y+3	; 0x03
    3532:	3c 81       	ldd	r19, Y+4	; 0x04
    3534:	23 30       	cpi	r18, 0x03	; 3
    3536:	31 05       	cpc	r19, r1
    3538:	c9 f0       	breq	.+50     	; 0x356c <DIO_vidEnableIntrupt+0x25e>
    353a:	1f c0       	rjmp	.+62     	; 0x357a <DIO_vidEnableIntrupt+0x26c>
				{
				/*Falling Edge*/
				case 2:CLR_BIT(MCUCSR_REG,6);
    353c:	a4 e5       	ldi	r26, 0x54	; 84
    353e:	b0 e0       	ldi	r27, 0x00	; 0
    3540:	e4 e5       	ldi	r30, 0x54	; 84
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	8f 7b       	andi	r24, 0xBF	; 191
    3548:	8c 93       	st	X, r24

				/*Make The INT2 Pin As Input	&PullUp Res*/
				DIO_vidSetPinDir(DIO_PORTB,DIO_PIN2,DIO_INPUT);
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	62 e0       	ldi	r22, 0x02	; 2
    354e:	40 e0       	ldi	r20, 0x00	; 0
    3550:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
				DIO_vidEnablePullUpRes(DIO_PORTB,DIO_PIN2);
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	62 e0       	ldi	r22, 0x02	; 2
    3558:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <DIO_vidEnablePullUpRes>

				SET_BIT(GICR_REG,5);
    355c:	ab e5       	ldi	r26, 0x5B	; 91
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	eb e5       	ldi	r30, 0x5B	; 91
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	80 62       	ori	r24, 0x20	; 32
    3568:	8c 93       	st	X, r24
    356a:	07 c0       	rjmp	.+14     	; 0x357a <DIO_vidEnableIntrupt+0x26c>
				break;

				/*Raising Edge*/
				case 3:SET_BIT(MCUCSR_REG,6);break;
    356c:	a4 e5       	ldi	r26, 0x54	; 84
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	e4 e5       	ldi	r30, 0x54	; 84
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	80 64       	ori	r24, 0x40	; 64
    3578:	8c 93       	st	X, r24
				break;
				}
				break;
		}
	}
}
    357a:	2a 96       	adiw	r28, 0x0a	; 10
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	de bf       	out	0x3e, r29	; 62
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <__vector_1>:



void __vector_1(void)	__attribute__((signal));
void __vector_1(void)
{
    358c:	1f 92       	push	r1
    358e:	0f 92       	push	r0
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	0f 92       	push	r0
    3594:	11 24       	eor	r1, r1
    3596:	2f 93       	push	r18
    3598:	3f 93       	push	r19
    359a:	4f 93       	push	r20
    359c:	5f 93       	push	r21
    359e:	6f 93       	push	r22
    35a0:	7f 93       	push	r23
    35a2:	8f 93       	push	r24
    35a4:	9f 93       	push	r25
    35a6:	af 93       	push	r26
    35a8:	bf 93       	push	r27
    35aa:	ef 93       	push	r30
    35ac:	ff 93       	push	r31
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
	DIO_INT0_Call_Back();
    35b6:	e0 91 7f 01 	lds	r30, 0x017F
    35ba:	f0 91 80 01 	lds	r31, 0x0180
    35be:	09 95       	icall
}
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	ff 91       	pop	r31
    35c6:	ef 91       	pop	r30
    35c8:	bf 91       	pop	r27
    35ca:	af 91       	pop	r26
    35cc:	9f 91       	pop	r25
    35ce:	8f 91       	pop	r24
    35d0:	7f 91       	pop	r23
    35d2:	6f 91       	pop	r22
    35d4:	5f 91       	pop	r21
    35d6:	4f 91       	pop	r20
    35d8:	3f 91       	pop	r19
    35da:	2f 91       	pop	r18
    35dc:	0f 90       	pop	r0
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	0f 90       	pop	r0
    35e2:	1f 90       	pop	r1
    35e4:	18 95       	reti

000035e6 <LCD_vidSendCommand>:

/******************************************************************************/
static u8 LocalInitFunc =0;

void LCD_vidSendCommand(u8 u8CmdCpy)
{
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	00 d0       	rcall	.+0      	; 0x35ec <LCD_vidSendCommand+0x6>
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	8a 83       	std	Y+2, r24	; 0x02

	/*Set 0 for RS for COMMAND*/
	DIO_vidSetPinVal(CONTROL_PORT,REG_SELC_RS,DIO_LOW);
    35f2:	82 e0       	ldi	r24, 0x02	; 2
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	40 e0       	ldi	r20, 0x00	; 0
    35f8:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	/*Set 0 for W/R for Write*/
	DIO_vidSetPinVal(CONTROL_PORT,Read_Write_SELEC_RW,DIO_LOW);
    35fc:	82 e0       	ldi	r24, 0x02	; 2
    35fe:	61 e0       	ldi	r22, 0x01	; 1
    3600:	40 e0       	ldi	r20, 0x00	; 0
    3602:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	/*copy the command to The Data Port*/
	u8 temp = GET_BIT(u8CmdCpy,7);
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	88 1f       	adc	r24, r24
    360a:	88 27       	eor	r24, r24
    360c:	88 1f       	adc	r24, r24
    360e:	89 83       	std	Y+1, r24	; 0x01
	if(temp == 1)
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	81 30       	cpi	r24, 0x01	; 1
    3614:	11 f4       	brne	.+4      	; 0x361a <LCD_vidSendCommand+0x34>
		temp = 0xff;
    3616:	8f ef       	ldi	r24, 0xFF	; 255
    3618:	89 83       	std	Y+1, r24	; 0x01
	DIO_vidSetPinVal(DATA_PORT,DIO_PIN7,temp);
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	67 e0       	ldi	r22, 0x07	; 7
    361e:	49 81       	ldd	r20, Y+1	; 0x01
    3620:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	temp = GET_BIT(u8CmdCpy,6);
    3624:	8a 81       	ldd	r24, Y+2	; 0x02
    3626:	82 95       	swap	r24
    3628:	86 95       	lsr	r24
    362a:	86 95       	lsr	r24
    362c:	83 70       	andi	r24, 0x03	; 3
    362e:	81 70       	andi	r24, 0x01	; 1
    3630:	89 83       	std	Y+1, r24	; 0x01
		if(temp == 1)
    3632:	89 81       	ldd	r24, Y+1	; 0x01
    3634:	81 30       	cpi	r24, 0x01	; 1
    3636:	11 f4       	brne	.+4      	; 0x363c <LCD_vidSendCommand+0x56>
			temp = 0xff;
    3638:	8f ef       	ldi	r24, 0xFF	; 255
    363a:	89 83       	std	Y+1, r24	; 0x01
	DIO_vidSetPinVal(DATA_PORT,DIO_PIN6,temp);
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	66 e0       	ldi	r22, 0x06	; 6
    3640:	49 81       	ldd	r20, Y+1	; 0x01
    3642:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	temp = GET_BIT(u8CmdCpy,5);
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	82 95       	swap	r24
    364a:	86 95       	lsr	r24
    364c:	87 70       	andi	r24, 0x07	; 7
    364e:	81 70       	andi	r24, 0x01	; 1
    3650:	89 83       	std	Y+1, r24	; 0x01
			if(temp == 1)
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	81 30       	cpi	r24, 0x01	; 1
    3656:	11 f4       	brne	.+4      	; 0x365c <LCD_vidSendCommand+0x76>
				temp = 0xff;
    3658:	8f ef       	ldi	r24, 0xFF	; 255
    365a:	89 83       	std	Y+1, r24	; 0x01
	DIO_vidSetPinVal(DATA_PORT,DIO_PIN5,temp);
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	65 e0       	ldi	r22, 0x05	; 5
    3660:	49 81       	ldd	r20, Y+1	; 0x01
    3662:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	temp = GET_BIT(u8CmdCpy,4);
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	82 95       	swap	r24
    366a:	8f 70       	andi	r24, 0x0F	; 15
    366c:	81 70       	andi	r24, 0x01	; 1
    366e:	89 83       	std	Y+1, r24	; 0x01
			if(temp == 1)
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	81 30       	cpi	r24, 0x01	; 1
    3674:	11 f4       	brne	.+4      	; 0x367a <LCD_vidSendCommand+0x94>
				temp = 0xff;
    3676:	8f ef       	ldi	r24, 0xFF	; 255
    3678:	89 83       	std	Y+1, r24	; 0x01
	DIO_vidSetPinVal(DATA_PORT,DIO_PIN4,temp);
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	64 e0       	ldi	r22, 0x04	; 4
    367e:	49 81       	ldd	r20, Y+1	; 0x01
    3680:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_HIGH);
    3684:	82 e0       	ldi	r24, 0x02	; 2
    3686:	62 e0       	ldi	r22, 0x02	; 2
    3688:	4f ef       	ldi	r20, 0xFF	; 255
    368a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>
	/*Make aPulse 0->1*/
	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_LOW);
    368e:	82 e0       	ldi	r24, 0x02	; 2
    3690:	62 e0       	ldi	r22, 0x02	; 2
    3692:	40 e0       	ldi	r20, 0x00	; 0
    3694:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>


	if(LocalInitFunc)
    3698:	80 91 7a 01 	lds	r24, 0x017A
    369c:	88 23       	and	r24, r24
    369e:	09 f4       	brne	.+2      	; 0x36a2 <LCD_vidSendCommand+0xbc>
    36a0:	44 c0       	rjmp	.+136    	; 0x372a <LCD_vidSendCommand+0x144>
	{
		temp = GET_BIT(u8CmdCpy,3);
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	86 95       	lsr	r24
    36a6:	86 95       	lsr	r24
    36a8:	86 95       	lsr	r24
    36aa:	81 70       	andi	r24, 0x01	; 1
    36ac:	89 83       	std	Y+1, r24	; 0x01
			if(temp == 1)
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	81 30       	cpi	r24, 0x01	; 1
    36b2:	11 f4       	brne	.+4      	; 0x36b8 <LCD_vidSendCommand+0xd2>
				temp = 0xff;
    36b4:	8f ef       	ldi	r24, 0xFF	; 255
    36b6:	89 83       	std	Y+1, r24	; 0x01
			DIO_vidSetPinVal(DATA_PORT,DIO_PIN7,temp);
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	67 e0       	ldi	r22, 0x07	; 7
    36bc:	49 81       	ldd	r20, Y+1	; 0x01
    36be:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

			temp = GET_BIT(u8CmdCpy,2);
    36c2:	8a 81       	ldd	r24, Y+2	; 0x02
    36c4:	86 95       	lsr	r24
    36c6:	86 95       	lsr	r24
    36c8:	81 70       	andi	r24, 0x01	; 1
    36ca:	89 83       	std	Y+1, r24	; 0x01
				if(temp == 1)
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	81 30       	cpi	r24, 0x01	; 1
    36d0:	11 f4       	brne	.+4      	; 0x36d6 <LCD_vidSendCommand+0xf0>
					temp = 0xff;
    36d2:	8f ef       	ldi	r24, 0xFF	; 255
    36d4:	89 83       	std	Y+1, r24	; 0x01
			DIO_vidSetPinVal(DATA_PORT,DIO_PIN6,temp);
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	66 e0       	ldi	r22, 0x06	; 6
    36da:	49 81       	ldd	r20, Y+1	; 0x01
    36dc:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

			temp = GET_BIT(u8CmdCpy,1);
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	86 95       	lsr	r24
    36e4:	81 70       	andi	r24, 0x01	; 1
    36e6:	89 83       	std	Y+1, r24	; 0x01
					if(temp == 1)
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
    36ea:	81 30       	cpi	r24, 0x01	; 1
    36ec:	11 f4       	brne	.+4      	; 0x36f2 <LCD_vidSendCommand+0x10c>
						temp = 0xff;
    36ee:	8f ef       	ldi	r24, 0xFF	; 255
    36f0:	89 83       	std	Y+1, r24	; 0x01
			DIO_vidSetPinVal(DATA_PORT,DIO_PIN5,temp);
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	65 e0       	ldi	r22, 0x05	; 5
    36f6:	49 81       	ldd	r20, Y+1	; 0x01
    36f8:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

			temp = GET_BIT(u8CmdCpy,0);
    36fc:	8a 81       	ldd	r24, Y+2	; 0x02
    36fe:	81 70       	andi	r24, 0x01	; 1
    3700:	89 83       	std	Y+1, r24	; 0x01
					if(temp == 1)
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	81 30       	cpi	r24, 0x01	; 1
    3706:	11 f4       	brne	.+4      	; 0x370c <LCD_vidSendCommand+0x126>
						temp = 0xff;
    3708:	8f ef       	ldi	r24, 0xFF	; 255
    370a:	89 83       	std	Y+1, r24	; 0x01
			DIO_vidSetPinVal(DATA_PORT,DIO_PIN4,temp);
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	64 e0       	ldi	r22, 0x04	; 4
    3710:	49 81       	ldd	r20, Y+1	; 0x01
    3712:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

		DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_HIGH);
    3716:	82 e0       	ldi	r24, 0x02	; 2
    3718:	62 e0       	ldi	r22, 0x02	; 2
    371a:	4f ef       	ldi	r20, 0xFF	; 255
    371c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>
		/*Make aPulse 0->1*/
		DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_LOW);
    3720:	82 e0       	ldi	r24, 0x02	; 2
    3722:	62 e0       	ldi	r22, 0x02	; 2
    3724:	40 e0       	ldi	r20, 0x00	; 0
    3726:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	}
}
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	cf 91       	pop	r28
    3730:	df 91       	pop	r29
    3732:	08 95       	ret

00003734 <LCD_vidTurnOn>:

void LCD_vidTurnOn(void)
{
    3734:	df 93       	push	r29
    3736:	cf 93       	push	r28
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	68 97       	sbiw	r28, 0x18	; 24
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
LCD_vidSendCommand(0x0f);
    3748:	8f e0       	ldi	r24, 0x0F	; 15
    374a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	a8 e4       	ldi	r26, 0x48	; 72
    3754:	b2 e4       	ldi	r27, 0x42	; 66
    3756:	8d 8b       	std	Y+21, r24	; 0x15
    3758:	9e 8b       	std	Y+22, r25	; 0x16
    375a:	af 8b       	std	Y+23, r26	; 0x17
    375c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    375e:	6d 89       	ldd	r22, Y+21	; 0x15
    3760:	7e 89       	ldd	r23, Y+22	; 0x16
    3762:	8f 89       	ldd	r24, Y+23	; 0x17
    3764:	98 8d       	ldd	r25, Y+24	; 0x18
    3766:	2b ea       	ldi	r18, 0xAB	; 171
    3768:	3a ea       	ldi	r19, 0xAA	; 170
    376a:	4a ea       	ldi	r20, 0xAA	; 170
    376c:	5e e3       	ldi	r21, 0x3E	; 62
    376e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	89 8b       	std	Y+17, r24	; 0x11
    3778:	9a 8b       	std	Y+18, r25	; 0x12
    377a:	ab 8b       	std	Y+19, r26	; 0x13
    377c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    377e:	69 89       	ldd	r22, Y+17	; 0x11
    3780:	7a 89       	ldd	r23, Y+18	; 0x12
    3782:	8b 89       	ldd	r24, Y+19	; 0x13
    3784:	9c 89       	ldd	r25, Y+20	; 0x14
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e8       	ldi	r20, 0x80	; 128
    378c:	5f e3       	ldi	r21, 0x3F	; 63
    378e:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    3792:	88 23       	and	r24, r24
    3794:	1c f4       	brge	.+6      	; 0x379c <LCD_vidTurnOn+0x68>
		__ticks = 1;
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	88 8b       	std	Y+16, r24	; 0x10
    379a:	91 c0       	rjmp	.+290    	; 0x38be <LCD_vidTurnOn+0x18a>
	else if (__tmp > 255)
    379c:	69 89       	ldd	r22, Y+17	; 0x11
    379e:	7a 89       	ldd	r23, Y+18	; 0x12
    37a0:	8b 89       	ldd	r24, Y+19	; 0x13
    37a2:	9c 89       	ldd	r25, Y+20	; 0x14
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	4f e7       	ldi	r20, 0x7F	; 127
    37aa:	53 e4       	ldi	r21, 0x43	; 67
    37ac:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    37b0:	18 16       	cp	r1, r24
    37b2:	0c f0       	brlt	.+2      	; 0x37b6 <LCD_vidTurnOn+0x82>
    37b4:	7b c0       	rjmp	.+246    	; 0x38ac <LCD_vidTurnOn+0x178>
	{
		_delay_ms(__us / 1000.0);
    37b6:	6d 89       	ldd	r22, Y+21	; 0x15
    37b8:	7e 89       	ldd	r23, Y+22	; 0x16
    37ba:	8f 89       	ldd	r24, Y+23	; 0x17
    37bc:	98 8d       	ldd	r25, Y+24	; 0x18
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	4a e7       	ldi	r20, 0x7A	; 122
    37c4:	54 e4       	ldi	r21, 0x44	; 68
    37c6:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	8c 87       	std	Y+12, r24	; 0x0c
    37d0:	9d 87       	std	Y+13, r25	; 0x0d
    37d2:	ae 87       	std	Y+14, r26	; 0x0e
    37d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    37d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    37da:	8e 85       	ldd	r24, Y+14	; 0x0e
    37dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a e7       	ldi	r20, 0x7A	; 122
    37e4:	53 e4       	ldi	r21, 0x43	; 67
    37e6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	88 87       	std	Y+8, r24	; 0x08
    37f0:	99 87       	std	Y+9, r25	; 0x09
    37f2:	aa 87       	std	Y+10, r26	; 0x0a
    37f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    37f6:	68 85       	ldd	r22, Y+8	; 0x08
    37f8:	79 85       	ldd	r23, Y+9	; 0x09
    37fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    37fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <LCD_vidTurnOn+0xe4>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9f 83       	std	Y+7, r25	; 0x07
    3814:	8e 83       	std	Y+6, r24	; 0x06
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <LCD_vidTurnOn+0x162>
	else if (__tmp > 65535)
    3818:	68 85       	ldd	r22, Y+8	; 0x08
    381a:	79 85       	ldd	r23, Y+9	; 0x09
    381c:	8a 85       	ldd	r24, Y+10	; 0x0a
    381e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <LCD_vidTurnOn+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	6c 85       	ldd	r22, Y+12	; 0x0c
    3832:	7d 85       	ldd	r23, Y+13	; 0x0d
    3834:	8e 85       	ldd	r24, Y+14	; 0x0e
    3836:	9f 85       	ldd	r25, Y+15	; 0x0f
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9f 83       	std	Y+7, r25	; 0x07
    3856:	8e 83       	std	Y+6, r24	; 0x06
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <LCD_vidTurnOn+0x144>
    385a:	89 e1       	ldi	r24, 0x19	; 25
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9d 83       	std	Y+5, r25	; 0x05
    3860:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3862:	8c 81       	ldd	r24, Y+4	; 0x04
    3864:	9d 81       	ldd	r25, Y+5	; 0x05
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <LCD_vidTurnOn+0x132>
    386a:	9d 83       	std	Y+5, r25	; 0x05
    386c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	8e 81       	ldd	r24, Y+6	; 0x06
    3870:	9f 81       	ldd	r25, Y+7	; 0x07
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9f 83       	std	Y+7, r25	; 0x07
    3876:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	8e 81       	ldd	r24, Y+6	; 0x06
    387a:	9f 81       	ldd	r25, Y+7	; 0x07
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <LCD_vidTurnOn+0x126>
    3880:	24 c0       	rjmp	.+72     	; 0x38ca <LCD_vidTurnOn+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	68 85       	ldd	r22, Y+8	; 0x08
    3884:	79 85       	ldd	r23, Y+9	; 0x09
    3886:	8a 85       	ldd	r24, Y+10	; 0x0a
    3888:	9b 85       	ldd	r25, Y+11	; 0x0b
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9f 83       	std	Y+7, r25	; 0x07
    3894:	8e 83       	std	Y+6, r24	; 0x06
    3896:	8e 81       	ldd	r24, Y+6	; 0x06
    3898:	9f 81       	ldd	r25, Y+7	; 0x07
    389a:	9b 83       	std	Y+3, r25	; 0x03
    389c:	8a 83       	std	Y+2, r24	; 0x02
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	9b 81       	ldd	r25, Y+3	; 0x03
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <LCD_vidTurnOn+0x16e>
    38a6:	9b 83       	std	Y+3, r25	; 0x03
    38a8:	8a 83       	std	Y+2, r24	; 0x02
    38aa:	0f c0       	rjmp	.+30     	; 0x38ca <LCD_vidTurnOn+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38ac:	69 89       	ldd	r22, Y+17	; 0x11
    38ae:	7a 89       	ldd	r23, Y+18	; 0x12
    38b0:	8b 89       	ldd	r24, Y+19	; 0x13
    38b2:	9c 89       	ldd	r25, Y+20	; 0x14
    38b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	88 8b       	std	Y+16, r24	; 0x10
    38be:	88 89       	ldd	r24, Y+16	; 0x10
    38c0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	8a 95       	dec	r24
    38c6:	f1 f7       	brne	.-4      	; 0x38c4 <LCD_vidTurnOn+0x190>
    38c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    38ca:	68 96       	adiw	r28, 0x18	; 24
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret

000038dc <LCD_vidTurnOff>:

void LCD_vidTurnOff(void)
{
    38dc:	df 93       	push	r29
    38de:	cf 93       	push	r28
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
    38e4:	68 97       	sbiw	r28, 0x18	; 24
    38e6:	0f b6       	in	r0, 0x3f	; 63
    38e8:	f8 94       	cli
    38ea:	de bf       	out	0x3e, r29	; 62
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	cd bf       	out	0x3d, r28	; 61
	LCD_vidSendCommand(0x08);//00001000
    38f0:	88 e0       	ldi	r24, 0x08	; 8
    38f2:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	a8 e4       	ldi	r26, 0x48	; 72
    38fc:	b2 e4       	ldi	r27, 0x42	; 66
    38fe:	8d 8b       	std	Y+21, r24	; 0x15
    3900:	9e 8b       	std	Y+22, r25	; 0x16
    3902:	af 8b       	std	Y+23, r26	; 0x17
    3904:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3906:	6d 89       	ldd	r22, Y+21	; 0x15
    3908:	7e 89       	ldd	r23, Y+22	; 0x16
    390a:	8f 89       	ldd	r24, Y+23	; 0x17
    390c:	98 8d       	ldd	r25, Y+24	; 0x18
    390e:	2b ea       	ldi	r18, 0xAB	; 171
    3910:	3a ea       	ldi	r19, 0xAA	; 170
    3912:	4a ea       	ldi	r20, 0xAA	; 170
    3914:	5e e3       	ldi	r21, 0x3E	; 62
    3916:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	89 8b       	std	Y+17, r24	; 0x11
    3920:	9a 8b       	std	Y+18, r25	; 0x12
    3922:	ab 8b       	std	Y+19, r26	; 0x13
    3924:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3926:	69 89       	ldd	r22, Y+17	; 0x11
    3928:	7a 89       	ldd	r23, Y+18	; 0x12
    392a:	8b 89       	ldd	r24, Y+19	; 0x13
    392c:	9c 89       	ldd	r25, Y+20	; 0x14
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	40 e8       	ldi	r20, 0x80	; 128
    3934:	5f e3       	ldi	r21, 0x3F	; 63
    3936:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    393a:	88 23       	and	r24, r24
    393c:	1c f4       	brge	.+6      	; 0x3944 <LCD_vidTurnOff+0x68>
		__ticks = 1;
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	88 8b       	std	Y+16, r24	; 0x10
    3942:	91 c0       	rjmp	.+290    	; 0x3a66 <LCD_vidTurnOff+0x18a>
	else if (__tmp > 255)
    3944:	69 89       	ldd	r22, Y+17	; 0x11
    3946:	7a 89       	ldd	r23, Y+18	; 0x12
    3948:	8b 89       	ldd	r24, Y+19	; 0x13
    394a:	9c 89       	ldd	r25, Y+20	; 0x14
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	4f e7       	ldi	r20, 0x7F	; 127
    3952:	53 e4       	ldi	r21, 0x43	; 67
    3954:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    3958:	18 16       	cp	r1, r24
    395a:	0c f0       	brlt	.+2      	; 0x395e <LCD_vidTurnOff+0x82>
    395c:	7b c0       	rjmp	.+246    	; 0x3a54 <LCD_vidTurnOff+0x178>
	{
		_delay_ms(__us / 1000.0);
    395e:	6d 89       	ldd	r22, Y+21	; 0x15
    3960:	7e 89       	ldd	r23, Y+22	; 0x16
    3962:	8f 89       	ldd	r24, Y+23	; 0x17
    3964:	98 8d       	ldd	r25, Y+24	; 0x18
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	4a e7       	ldi	r20, 0x7A	; 122
    396c:	54 e4       	ldi	r21, 0x44	; 68
    396e:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	8c 87       	std	Y+12, r24	; 0x0c
    3978:	9d 87       	std	Y+13, r25	; 0x0d
    397a:	ae 87       	std	Y+14, r26	; 0x0e
    397c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    397e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3980:	7d 85       	ldd	r23, Y+13	; 0x0d
    3982:	8e 85       	ldd	r24, Y+14	; 0x0e
    3984:	9f 85       	ldd	r25, Y+15	; 0x0f
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	4a e7       	ldi	r20, 0x7A	; 122
    398c:	53 e4       	ldi	r21, 0x43	; 67
    398e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	88 87       	std	Y+8, r24	; 0x08
    3998:	99 87       	std	Y+9, r25	; 0x09
    399a:	aa 87       	std	Y+10, r26	; 0x0a
    399c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    399e:	68 85       	ldd	r22, Y+8	; 0x08
    39a0:	79 85       	ldd	r23, Y+9	; 0x09
    39a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e8       	ldi	r20, 0x80	; 128
    39ac:	5f e3       	ldi	r21, 0x3F	; 63
    39ae:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    39b2:	88 23       	and	r24, r24
    39b4:	2c f4       	brge	.+10     	; 0x39c0 <LCD_vidTurnOff+0xe4>
		__ticks = 1;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	9f 83       	std	Y+7, r25	; 0x07
    39bc:	8e 83       	std	Y+6, r24	; 0x06
    39be:	3f c0       	rjmp	.+126    	; 0x3a3e <LCD_vidTurnOff+0x162>
	else if (__tmp > 65535)
    39c0:	68 85       	ldd	r22, Y+8	; 0x08
    39c2:	79 85       	ldd	r23, Y+9	; 0x09
    39c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    39c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	3f ef       	ldi	r19, 0xFF	; 255
    39cc:	4f e7       	ldi	r20, 0x7F	; 127
    39ce:	57 e4       	ldi	r21, 0x47	; 71
    39d0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    39d4:	18 16       	cp	r1, r24
    39d6:	4c f5       	brge	.+82     	; 0x3a2a <LCD_vidTurnOff+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    39da:	7d 85       	ldd	r23, Y+13	; 0x0d
    39dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    39de:	9f 85       	ldd	r25, Y+15	; 0x0f
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	40 e2       	ldi	r20, 0x20	; 32
    39e6:	51 e4       	ldi	r21, 0x41	; 65
    39e8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	bc 01       	movw	r22, r24
    39f2:	cd 01       	movw	r24, r26
    39f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	9f 83       	std	Y+7, r25	; 0x07
    39fe:	8e 83       	std	Y+6, r24	; 0x06
    3a00:	0f c0       	rjmp	.+30     	; 0x3a20 <LCD_vidTurnOff+0x144>
    3a02:	89 e1       	ldi	r24, 0x19	; 25
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	9d 83       	std	Y+5, r25	; 0x05
    3a08:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	f1 f7       	brne	.-4      	; 0x3a0e <LCD_vidTurnOff+0x132>
    3a12:	9d 83       	std	Y+5, r25	; 0x05
    3a14:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a16:	8e 81       	ldd	r24, Y+6	; 0x06
    3a18:	9f 81       	ldd	r25, Y+7	; 0x07
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	9f 83       	std	Y+7, r25	; 0x07
    3a1e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a20:	8e 81       	ldd	r24, Y+6	; 0x06
    3a22:	9f 81       	ldd	r25, Y+7	; 0x07
    3a24:	00 97       	sbiw	r24, 0x00	; 0
    3a26:	69 f7       	brne	.-38     	; 0x3a02 <LCD_vidTurnOff+0x126>
    3a28:	24 c0       	rjmp	.+72     	; 0x3a72 <LCD_vidTurnOff+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a2a:	68 85       	ldd	r22, Y+8	; 0x08
    3a2c:	79 85       	ldd	r23, Y+9	; 0x09
    3a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a30:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	9f 83       	std	Y+7, r25	; 0x07
    3a3c:	8e 83       	std	Y+6, r24	; 0x06
    3a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a40:	9f 81       	ldd	r25, Y+7	; 0x07
    3a42:	9b 83       	std	Y+3, r25	; 0x03
    3a44:	8a 83       	std	Y+2, r24	; 0x02
    3a46:	8a 81       	ldd	r24, Y+2	; 0x02
    3a48:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	f1 f7       	brne	.-4      	; 0x3a4a <LCD_vidTurnOff+0x16e>
    3a4e:	9b 83       	std	Y+3, r25	; 0x03
    3a50:	8a 83       	std	Y+2, r24	; 0x02
    3a52:	0f c0       	rjmp	.+30     	; 0x3a72 <LCD_vidTurnOff+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a54:	69 89       	ldd	r22, Y+17	; 0x11
    3a56:	7a 89       	ldd	r23, Y+18	; 0x12
    3a58:	8b 89       	ldd	r24, Y+19	; 0x13
    3a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	88 8b       	std	Y+16, r24	; 0x10
    3a66:	88 89       	ldd	r24, Y+16	; 0x10
    3a68:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	8a 95       	dec	r24
    3a6e:	f1 f7       	brne	.-4      	; 0x3a6c <LCD_vidTurnOff+0x190>
    3a70:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    3a72:	68 96       	adiw	r28, 0x18	; 24
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	de bf       	out	0x3e, r29	; 62
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	cd bf       	out	0x3d, r28	; 61
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <LCD_vidInit>:

void LCD_vidInit(void)
{
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	ca 55       	subi	r28, 0x5A	; 90
    3a92:	d0 40       	sbci	r29, 0x00	; 0
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	f8 94       	cli
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	cd bf       	out	0x3d, r28	; 61
	/*Define The Port Of the Data And The 3 Pins of Control */
	DIO_vidSetPinDir(DATA_PORT,DIO_PIN7,DIO_OUTPUT);
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	67 e0       	ldi	r22, 0x07	; 7
    3aa2:	4f ef       	ldi	r20, 0xFF	; 255
    3aa4:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DATA_PORT,DIO_PIN6,DIO_OUTPUT);
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	66 e0       	ldi	r22, 0x06	; 6
    3aac:	4f ef       	ldi	r20, 0xFF	; 255
    3aae:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DATA_PORT,DIO_PIN5,DIO_OUTPUT);
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	65 e0       	ldi	r22, 0x05	; 5
    3ab6:	4f ef       	ldi	r20, 0xFF	; 255
    3ab8:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DATA_PORT,DIO_PIN4,DIO_OUTPUT);
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	64 e0       	ldi	r22, 0x04	; 4
    3ac0:	4f ef       	ldi	r20, 0xFF	; 255
    3ac2:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>

	DIO_vidSetPinDir(CONTROL_PORT,REG_SELC_RS,DIO_OUTPUT);
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	60 e0       	ldi	r22, 0x00	; 0
    3aca:	4f ef       	ldi	r20, 0xFF	; 255
    3acc:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(CONTROL_PORT,Read_Write_SELEC_RW,DIO_OUTPUT);
    3ad0:	82 e0       	ldi	r24, 0x02	; 2
    3ad2:	61 e0       	ldi	r22, 0x01	; 1
    3ad4:	4f ef       	ldi	r20, 0xFF	; 255
    3ad6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(CONTROL_PORT,ENABLE_SIG,DIO_OUTPUT);
    3ada:	82 e0       	ldi	r24, 0x02	; 2
    3adc:	62 e0       	ldi	r22, 0x02	; 2
    3ade:	4f ef       	ldi	r20, 0xFF	; 255
    3ae0:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e9 5a       	subi	r30, 0xA9	; 169
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	a0 ef       	ldi	r26, 0xF0	; 240
    3af0:	b1 e4       	ldi	r27, 0x41	; 65
    3af2:	80 83       	st	Z, r24
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	a2 83       	std	Z+2, r26	; 0x02
    3af8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afa:	8e 01       	movw	r16, r28
    3afc:	0d 5a       	subi	r16, 0xAD	; 173
    3afe:	1f 4f       	sbci	r17, 0xFF	; 255
    3b00:	fe 01       	movw	r30, r28
    3b02:	e9 5a       	subi	r30, 0xA9	; 169
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	60 81       	ld	r22, Z
    3b08:	71 81       	ldd	r23, Z+1	; 0x01
    3b0a:	82 81       	ldd	r24, Z+2	; 0x02
    3b0c:	93 81       	ldd	r25, Z+3	; 0x03
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	4a e7       	ldi	r20, 0x7A	; 122
    3b14:	53 e4       	ldi	r21, 0x43	; 67
    3b16:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	f8 01       	movw	r30, r16
    3b20:	80 83       	st	Z, r24
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	a2 83       	std	Z+2, r26	; 0x02
    3b26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b28:	fe 01       	movw	r30, r28
    3b2a:	ed 5a       	subi	r30, 0xAD	; 173
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	60 81       	ld	r22, Z
    3b30:	71 81       	ldd	r23, Z+1	; 0x01
    3b32:	82 81       	ldd	r24, Z+2	; 0x02
    3b34:	93 81       	ldd	r25, Z+3	; 0x03
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	40 e8       	ldi	r20, 0x80	; 128
    3b3c:	5f e3       	ldi	r21, 0x3F	; 63
    3b3e:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    3b42:	88 23       	and	r24, r24
    3b44:	44 f4       	brge	.+16     	; 0x3b56 <LCD_vidInit+0xd2>
		__ticks = 1;
    3b46:	fe 01       	movw	r30, r28
    3b48:	ef 5a       	subi	r30, 0xAF	; 175
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	80 83       	st	Z, r24
    3b54:	64 c0       	rjmp	.+200    	; 0x3c1e <LCD_vidInit+0x19a>
	else if (__tmp > 65535)
    3b56:	fe 01       	movw	r30, r28
    3b58:	ed 5a       	subi	r30, 0xAD	; 173
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	93 81       	ldd	r25, Z+3	; 0x03
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	3f ef       	ldi	r19, 0xFF	; 255
    3b68:	4f e7       	ldi	r20, 0x7F	; 127
    3b6a:	57 e4       	ldi	r21, 0x47	; 71
    3b6c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    3b70:	18 16       	cp	r1, r24
    3b72:	0c f0       	brlt	.+2      	; 0x3b76 <LCD_vidInit+0xf2>
    3b74:	43 c0       	rjmp	.+134    	; 0x3bfc <LCD_vidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b76:	fe 01       	movw	r30, r28
    3b78:	e9 5a       	subi	r30, 0xA9	; 169
    3b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7c:	60 81       	ld	r22, Z
    3b7e:	71 81       	ldd	r23, Z+1	; 0x01
    3b80:	82 81       	ldd	r24, Z+2	; 0x02
    3b82:	93 81       	ldd	r25, Z+3	; 0x03
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e2       	ldi	r20, 0x20	; 32
    3b8a:	51 e4       	ldi	r21, 0x41	; 65
    3b8c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	8e 01       	movw	r16, r28
    3b96:	0f 5a       	subi	r16, 0xAF	; 175
    3b98:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9a:	bc 01       	movw	r22, r24
    3b9c:	cd 01       	movw	r24, r26
    3b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	f8 01       	movw	r30, r16
    3ba8:	91 83       	std	Z+1, r25	; 0x01
    3baa:	80 83       	st	Z, r24
    3bac:	1f c0       	rjmp	.+62     	; 0x3bec <LCD_vidInit+0x168>
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e1 5b       	subi	r30, 0xB1	; 177
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	89 e1       	ldi	r24, 0x19	; 25
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e1 5b       	subi	r30, 0xB1	; 177
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	80 81       	ld	r24, Z
    3bc4:	91 81       	ldd	r25, Z+1	; 0x01
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	f1 f7       	brne	.-4      	; 0x3bc6 <LCD_vidInit+0x142>
    3bca:	fe 01       	movw	r30, r28
    3bcc:	e1 5b       	subi	r30, 0xB1	; 177
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	91 83       	std	Z+1, r25	; 0x01
    3bd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd4:	de 01       	movw	r26, r28
    3bd6:	af 5a       	subi	r26, 0xAF	; 175
    3bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bda:	fe 01       	movw	r30, r28
    3bdc:	ef 5a       	subi	r30, 0xAF	; 175
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	80 81       	ld	r24, Z
    3be2:	91 81       	ldd	r25, Z+1	; 0x01
    3be4:	01 97       	sbiw	r24, 0x01	; 1
    3be6:	11 96       	adiw	r26, 0x01	; 1
    3be8:	9c 93       	st	X, r25
    3bea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bec:	fe 01       	movw	r30, r28
    3bee:	ef 5a       	subi	r30, 0xAF	; 175
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	80 81       	ld	r24, Z
    3bf4:	91 81       	ldd	r25, Z+1	; 0x01
    3bf6:	00 97       	sbiw	r24, 0x00	; 0
    3bf8:	d1 f6       	brne	.-76     	; 0x3bae <LCD_vidInit+0x12a>
    3bfa:	27 c0       	rjmp	.+78     	; 0x3c4a <LCD_vidInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bfc:	8e 01       	movw	r16, r28
    3bfe:	0f 5a       	subi	r16, 0xAF	; 175
    3c00:	1f 4f       	sbci	r17, 0xFF	; 255
    3c02:	fe 01       	movw	r30, r28
    3c04:	ed 5a       	subi	r30, 0xAD	; 173
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	60 81       	ld	r22, Z
    3c0a:	71 81       	ldd	r23, Z+1	; 0x01
    3c0c:	82 81       	ldd	r24, Z+2	; 0x02
    3c0e:	93 81       	ldd	r25, Z+3	; 0x03
    3c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	f8 01       	movw	r30, r16
    3c1a:	91 83       	std	Z+1, r25	; 0x01
    3c1c:	80 83       	st	Z, r24
    3c1e:	de 01       	movw	r26, r28
    3c20:	a3 5b       	subi	r26, 0xB3	; 179
    3c22:	bf 4f       	sbci	r27, 0xFF	; 255
    3c24:	fe 01       	movw	r30, r28
    3c26:	ef 5a       	subi	r30, 0xAF	; 175
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	8d 93       	st	X+, r24
    3c30:	9c 93       	st	X, r25
    3c32:	fe 01       	movw	r30, r28
    3c34:	e3 5b       	subi	r30, 0xB3	; 179
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	80 81       	ld	r24, Z
    3c3a:	91 81       	ldd	r25, Z+1	; 0x01
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	f1 f7       	brne	.-4      	; 0x3c3c <LCD_vidInit+0x1b8>
    3c40:	fe 01       	movw	r30, r28
    3c42:	e3 5b       	subi	r30, 0xB3	; 179
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	91 83       	std	Z+1, r25	; 0x01
    3c48:	80 83       	st	Z, r24

	_delay_ms(30);

	/* Function Set */
	LCD_vidSendCommand(0x20);
    3c4a:	80 e2       	ldi	r24, 0x20	; 32
    3c4c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
	LCD_vidSendCommand(0x20);
    3c50:	80 e2       	ldi	r24, 0x20	; 32
    3c52:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
	LCD_vidSendCommand(0x80);
    3c56:	80 e8       	ldi	r24, 0x80	; 128
    3c58:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e7 5b       	subi	r30, 0xB7	; 183
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	a8 e4       	ldi	r26, 0x48	; 72
    3c68:	b2 e4       	ldi	r27, 0x42	; 66
    3c6a:	80 83       	st	Z, r24
    3c6c:	91 83       	std	Z+1, r25	; 0x01
    3c6e:	a2 83       	std	Z+2, r26	; 0x02
    3c70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c72:	8e 01       	movw	r16, r28
    3c74:	0b 5b       	subi	r16, 0xBB	; 187
    3c76:	1f 4f       	sbci	r17, 0xFF	; 255
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e7 5b       	subi	r30, 0xB7	; 183
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	60 81       	ld	r22, Z
    3c80:	71 81       	ldd	r23, Z+1	; 0x01
    3c82:	82 81       	ldd	r24, Z+2	; 0x02
    3c84:	93 81       	ldd	r25, Z+3	; 0x03
    3c86:	2b ea       	ldi	r18, 0xAB	; 171
    3c88:	3a ea       	ldi	r19, 0xAA	; 170
    3c8a:	4a ea       	ldi	r20, 0xAA	; 170
    3c8c:	5e e3       	ldi	r21, 0x3E	; 62
    3c8e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	f8 01       	movw	r30, r16
    3c98:	80 83       	st	Z, r24
    3c9a:	91 83       	std	Z+1, r25	; 0x01
    3c9c:	a2 83       	std	Z+2, r26	; 0x02
    3c9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	eb 5b       	subi	r30, 0xBB	; 187
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	60 81       	ld	r22, Z
    3ca8:	71 81       	ldd	r23, Z+1	; 0x01
    3caa:	82 81       	ldd	r24, Z+2	; 0x02
    3cac:	93 81       	ldd	r25, Z+3	; 0x03
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e8       	ldi	r20, 0x80	; 128
    3cb4:	5f e3       	ldi	r21, 0x3F	; 63
    3cb6:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    3cba:	88 23       	and	r24, r24
    3cbc:	34 f4       	brge	.+12     	; 0x3cca <LCD_vidInit+0x246>
		__ticks = 1;
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	ec 5b       	subi	r30, 0xBC	; 188
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	81 e0       	ldi	r24, 0x01	; 1
    3cc6:	80 83       	st	Z, r24
    3cc8:	a7 c0       	rjmp	.+334    	; 0x3e18 <LCD_vidInit+0x394>
	else if (__tmp > 255)
    3cca:	fe 01       	movw	r30, r28
    3ccc:	eb 5b       	subi	r30, 0xBB	; 187
    3cce:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd0:	60 81       	ld	r22, Z
    3cd2:	71 81       	ldd	r23, Z+1	; 0x01
    3cd4:	82 81       	ldd	r24, Z+2	; 0x02
    3cd6:	93 81       	ldd	r25, Z+3	; 0x03
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	4f e7       	ldi	r20, 0x7F	; 127
    3cde:	53 e4       	ldi	r21, 0x43	; 67
    3ce0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    3ce4:	18 16       	cp	r1, r24
    3ce6:	0c f0       	brlt	.+2      	; 0x3cea <LCD_vidInit+0x266>
    3ce8:	87 c0       	rjmp	.+270    	; 0x3df8 <LCD_vidInit+0x374>
	{
		_delay_ms(__us / 1000.0);
    3cea:	fe 01       	movw	r30, r28
    3cec:	e7 5b       	subi	r30, 0xB7	; 183
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	60 81       	ld	r22, Z
    3cf2:	71 81       	ldd	r23, Z+1	; 0x01
    3cf4:	82 81       	ldd	r24, Z+2	; 0x02
    3cf6:	93 81       	ldd	r25, Z+3	; 0x03
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	4a e7       	ldi	r20, 0x7A	; 122
    3cfe:	54 e4       	ldi	r21, 0x44	; 68
    3d00:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	fe 01       	movw	r30, r28
    3d0a:	e0 5c       	subi	r30, 0xC0	; 192
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	80 83       	st	Z, r24
    3d10:	91 83       	std	Z+1, r25	; 0x01
    3d12:	a2 83       	std	Z+2, r26	; 0x02
    3d14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d16:	fe 01       	movw	r30, r28
    3d18:	e0 5c       	subi	r30, 0xC0	; 192
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	60 81       	ld	r22, Z
    3d1e:	71 81       	ldd	r23, Z+1	; 0x01
    3d20:	82 81       	ldd	r24, Z+2	; 0x02
    3d22:	93 81       	ldd	r25, Z+3	; 0x03
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	4a e7       	ldi	r20, 0x7A	; 122
    3d2a:	53 e4       	ldi	r21, 0x43	; 67
    3d2c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	8c af       	std	Y+60, r24	; 0x3c
    3d36:	9d af       	std	Y+61, r25	; 0x3d
    3d38:	ae af       	std	Y+62, r26	; 0x3e
    3d3a:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    3d3c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d3e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d40:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d42:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	40 e8       	ldi	r20, 0x80	; 128
    3d4a:	5f e3       	ldi	r21, 0x3F	; 63
    3d4c:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    3d50:	88 23       	and	r24, r24
    3d52:	2c f4       	brge	.+10     	; 0x3d5e <LCD_vidInit+0x2da>
		__ticks = 1;
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	9b af       	std	Y+59, r25	; 0x3b
    3d5a:	8a af       	std	Y+58, r24	; 0x3a
    3d5c:	42 c0       	rjmp	.+132    	; 0x3de2 <LCD_vidInit+0x35e>
	else if (__tmp > 65535)
    3d5e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d60:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d62:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d64:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	3f ef       	ldi	r19, 0xFF	; 255
    3d6a:	4f e7       	ldi	r20, 0x7F	; 127
    3d6c:	57 e4       	ldi	r21, 0x47	; 71
    3d6e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    3d72:	18 16       	cp	r1, r24
    3d74:	64 f5       	brge	.+88     	; 0x3dce <LCD_vidInit+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d76:	fe 01       	movw	r30, r28
    3d78:	e0 5c       	subi	r30, 0xC0	; 192
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	60 81       	ld	r22, Z
    3d7e:	71 81       	ldd	r23, Z+1	; 0x01
    3d80:	82 81       	ldd	r24, Z+2	; 0x02
    3d82:	93 81       	ldd	r25, Z+3	; 0x03
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	40 e2       	ldi	r20, 0x20	; 32
    3d8a:	51 e4       	ldi	r21, 0x41	; 65
    3d8c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	bc 01       	movw	r22, r24
    3d96:	cd 01       	movw	r24, r26
    3d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	9b af       	std	Y+59, r25	; 0x3b
    3da2:	8a af       	std	Y+58, r24	; 0x3a
    3da4:	0f c0       	rjmp	.+30     	; 0x3dc4 <LCD_vidInit+0x340>
    3da6:	89 e1       	ldi	r24, 0x19	; 25
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	99 af       	std	Y+57, r25	; 0x39
    3dac:	88 af       	std	Y+56, r24	; 0x38
    3dae:	88 ad       	ldd	r24, Y+56	; 0x38
    3db0:	99 ad       	ldd	r25, Y+57	; 0x39
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	f1 f7       	brne	.-4      	; 0x3db2 <LCD_vidInit+0x32e>
    3db6:	99 af       	std	Y+57, r25	; 0x39
    3db8:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dba:	8a ad       	ldd	r24, Y+58	; 0x3a
    3dbc:	9b ad       	ldd	r25, Y+59	; 0x3b
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	9b af       	std	Y+59, r25	; 0x3b
    3dc2:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc4:	8a ad       	ldd	r24, Y+58	; 0x3a
    3dc6:	9b ad       	ldd	r25, Y+59	; 0x3b
    3dc8:	00 97       	sbiw	r24, 0x00	; 0
    3dca:	69 f7       	brne	.-38     	; 0x3da6 <LCD_vidInit+0x322>
    3dcc:	2e c0       	rjmp	.+92     	; 0x3e2a <LCD_vidInit+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dce:	6c ad       	ldd	r22, Y+60	; 0x3c
    3dd0:	7d ad       	ldd	r23, Y+61	; 0x3d
    3dd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3dd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	9b af       	std	Y+59, r25	; 0x3b
    3de0:	8a af       	std	Y+58, r24	; 0x3a
    3de2:	8a ad       	ldd	r24, Y+58	; 0x3a
    3de4:	9b ad       	ldd	r25, Y+59	; 0x3b
    3de6:	9f ab       	std	Y+55, r25	; 0x37
    3de8:	8e ab       	std	Y+54, r24	; 0x36
    3dea:	8e a9       	ldd	r24, Y+54	; 0x36
    3dec:	9f a9       	ldd	r25, Y+55	; 0x37
    3dee:	01 97       	sbiw	r24, 0x01	; 1
    3df0:	f1 f7       	brne	.-4      	; 0x3dee <LCD_vidInit+0x36a>
    3df2:	9f ab       	std	Y+55, r25	; 0x37
    3df4:	8e ab       	std	Y+54, r24	; 0x36
    3df6:	19 c0       	rjmp	.+50     	; 0x3e2a <LCD_vidInit+0x3a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3df8:	8e 01       	movw	r16, r28
    3dfa:	0c 5b       	subi	r16, 0xBC	; 188
    3dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfe:	fe 01       	movw	r30, r28
    3e00:	eb 5b       	subi	r30, 0xBB	; 187
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	60 81       	ld	r22, Z
    3e06:	71 81       	ldd	r23, Z+1	; 0x01
    3e08:	82 81       	ldd	r24, Z+2	; 0x02
    3e0a:	93 81       	ldd	r25, Z+3	; 0x03
    3e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	f8 01       	movw	r30, r16
    3e16:	80 83       	st	Z, r24
    3e18:	fe 01       	movw	r30, r28
    3e1a:	ec 5b       	subi	r30, 0xBC	; 188
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	80 81       	ld	r24, Z
    3e20:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e22:	8d a9       	ldd	r24, Y+53	; 0x35
    3e24:	8a 95       	dec	r24
    3e26:	f1 f7       	brne	.-4      	; 0x3e24 <LCD_vidInit+0x3a0>
    3e28:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(50);

	/* Display ON/OFF Control */
	LCD_vidSendCommand(0x00);
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
	LCD_vidSendCommand(0xf0);
    3e30:	80 ef       	ldi	r24, 0xF0	; 240
    3e32:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
    3e36:	80 e0       	ldi	r24, 0x00	; 0
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	a8 e4       	ldi	r26, 0x48	; 72
    3e3c:	b2 e4       	ldi	r27, 0x42	; 66
    3e3e:	89 ab       	std	Y+49, r24	; 0x31
    3e40:	9a ab       	std	Y+50, r25	; 0x32
    3e42:	ab ab       	std	Y+51, r26	; 0x33
    3e44:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e46:	69 a9       	ldd	r22, Y+49	; 0x31
    3e48:	7a a9       	ldd	r23, Y+50	; 0x32
    3e4a:	8b a9       	ldd	r24, Y+51	; 0x33
    3e4c:	9c a9       	ldd	r25, Y+52	; 0x34
    3e4e:	2b ea       	ldi	r18, 0xAB	; 171
    3e50:	3a ea       	ldi	r19, 0xAA	; 170
    3e52:	4a ea       	ldi	r20, 0xAA	; 170
    3e54:	5e e3       	ldi	r21, 0x3E	; 62
    3e56:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	8d a7       	std	Y+45, r24	; 0x2d
    3e60:	9e a7       	std	Y+46, r25	; 0x2e
    3e62:	af a7       	std	Y+47, r26	; 0x2f
    3e64:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    3e66:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e68:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e6c:	98 a9       	ldd	r25, Y+48	; 0x30
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	40 e8       	ldi	r20, 0x80	; 128
    3e74:	5f e3       	ldi	r21, 0x3F	; 63
    3e76:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    3e7a:	88 23       	and	r24, r24
    3e7c:	1c f4       	brge	.+6      	; 0x3e84 <LCD_vidInit+0x400>
		__ticks = 1;
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	8c a7       	std	Y+44, r24	; 0x2c
    3e82:	91 c0       	rjmp	.+290    	; 0x3fa6 <LCD_vidInit+0x522>
	else if (__tmp > 255)
    3e84:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e86:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e88:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e8a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	4f e7       	ldi	r20, 0x7F	; 127
    3e92:	53 e4       	ldi	r21, 0x43	; 67
    3e94:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    3e98:	18 16       	cp	r1, r24
    3e9a:	0c f0       	brlt	.+2      	; 0x3e9e <LCD_vidInit+0x41a>
    3e9c:	7b c0       	rjmp	.+246    	; 0x3f94 <LCD_vidInit+0x510>
	{
		_delay_ms(__us / 1000.0);
    3e9e:	69 a9       	ldd	r22, Y+49	; 0x31
    3ea0:	7a a9       	ldd	r23, Y+50	; 0x32
    3ea2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ea4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	4a e7       	ldi	r20, 0x7A	; 122
    3eac:	54 e4       	ldi	r21, 0x44	; 68
    3eae:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	88 a7       	std	Y+40, r24	; 0x28
    3eb8:	99 a7       	std	Y+41, r25	; 0x29
    3eba:	aa a7       	std	Y+42, r26	; 0x2a
    3ebc:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ebe:	68 a5       	ldd	r22, Y+40	; 0x28
    3ec0:	79 a5       	ldd	r23, Y+41	; 0x29
    3ec2:	8a a5       	ldd	r24, Y+42	; 0x2a
    3ec4:	9b a5       	ldd	r25, Y+43	; 0x2b
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	4a e7       	ldi	r20, 0x7A	; 122
    3ecc:	53 e4       	ldi	r21, 0x43	; 67
    3ece:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	8c a3       	std	Y+36, r24	; 0x24
    3ed8:	9d a3       	std	Y+37, r25	; 0x25
    3eda:	ae a3       	std	Y+38, r26	; 0x26
    3edc:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    3ede:	6c a1       	ldd	r22, Y+36	; 0x24
    3ee0:	7d a1       	ldd	r23, Y+37	; 0x25
    3ee2:	8e a1       	ldd	r24, Y+38	; 0x26
    3ee4:	9f a1       	ldd	r25, Y+39	; 0x27
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	40 e8       	ldi	r20, 0x80	; 128
    3eec:	5f e3       	ldi	r21, 0x3F	; 63
    3eee:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    3ef2:	88 23       	and	r24, r24
    3ef4:	2c f4       	brge	.+10     	; 0x3f00 <LCD_vidInit+0x47c>
		__ticks = 1;
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	9b a3       	std	Y+35, r25	; 0x23
    3efc:	8a a3       	std	Y+34, r24	; 0x22
    3efe:	3f c0       	rjmp	.+126    	; 0x3f7e <LCD_vidInit+0x4fa>
	else if (__tmp > 65535)
    3f00:	6c a1       	ldd	r22, Y+36	; 0x24
    3f02:	7d a1       	ldd	r23, Y+37	; 0x25
    3f04:	8e a1       	ldd	r24, Y+38	; 0x26
    3f06:	9f a1       	ldd	r25, Y+39	; 0x27
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	3f ef       	ldi	r19, 0xFF	; 255
    3f0c:	4f e7       	ldi	r20, 0x7F	; 127
    3f0e:	57 e4       	ldi	r21, 0x47	; 71
    3f10:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    3f14:	18 16       	cp	r1, r24
    3f16:	4c f5       	brge	.+82     	; 0x3f6a <LCD_vidInit+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f18:	68 a5       	ldd	r22, Y+40	; 0x28
    3f1a:	79 a5       	ldd	r23, Y+41	; 0x29
    3f1c:	8a a5       	ldd	r24, Y+42	; 0x2a
    3f1e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	40 e2       	ldi	r20, 0x20	; 32
    3f26:	51 e4       	ldi	r21, 0x41	; 65
    3f28:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	bc 01       	movw	r22, r24
    3f32:	cd 01       	movw	r24, r26
    3f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	9b a3       	std	Y+35, r25	; 0x23
    3f3e:	8a a3       	std	Y+34, r24	; 0x22
    3f40:	0f c0       	rjmp	.+30     	; 0x3f60 <LCD_vidInit+0x4dc>
    3f42:	89 e1       	ldi	r24, 0x19	; 25
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	99 a3       	std	Y+33, r25	; 0x21
    3f48:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f4a:	88 a1       	ldd	r24, Y+32	; 0x20
    3f4c:	99 a1       	ldd	r25, Y+33	; 0x21
    3f4e:	01 97       	sbiw	r24, 0x01	; 1
    3f50:	f1 f7       	brne	.-4      	; 0x3f4e <LCD_vidInit+0x4ca>
    3f52:	99 a3       	std	Y+33, r25	; 0x21
    3f54:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f56:	8a a1       	ldd	r24, Y+34	; 0x22
    3f58:	9b a1       	ldd	r25, Y+35	; 0x23
    3f5a:	01 97       	sbiw	r24, 0x01	; 1
    3f5c:	9b a3       	std	Y+35, r25	; 0x23
    3f5e:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f60:	8a a1       	ldd	r24, Y+34	; 0x22
    3f62:	9b a1       	ldd	r25, Y+35	; 0x23
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	69 f7       	brne	.-38     	; 0x3f42 <LCD_vidInit+0x4be>
    3f68:	24 c0       	rjmp	.+72     	; 0x3fb2 <LCD_vidInit+0x52e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f6a:	6c a1       	ldd	r22, Y+36	; 0x24
    3f6c:	7d a1       	ldd	r23, Y+37	; 0x25
    3f6e:	8e a1       	ldd	r24, Y+38	; 0x26
    3f70:	9f a1       	ldd	r25, Y+39	; 0x27
    3f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f76:	dc 01       	movw	r26, r24
    3f78:	cb 01       	movw	r24, r22
    3f7a:	9b a3       	std	Y+35, r25	; 0x23
    3f7c:	8a a3       	std	Y+34, r24	; 0x22
    3f7e:	8a a1       	ldd	r24, Y+34	; 0x22
    3f80:	9b a1       	ldd	r25, Y+35	; 0x23
    3f82:	9f 8f       	std	Y+31, r25	; 0x1f
    3f84:	8e 8f       	std	Y+30, r24	; 0x1e
    3f86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	f1 f7       	brne	.-4      	; 0x3f8a <LCD_vidInit+0x506>
    3f8e:	9f 8f       	std	Y+31, r25	; 0x1f
    3f90:	8e 8f       	std	Y+30, r24	; 0x1e
    3f92:	0f c0       	rjmp	.+30     	; 0x3fb2 <LCD_vidInit+0x52e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f94:	6d a5       	ldd	r22, Y+45	; 0x2d
    3f96:	7e a5       	ldd	r23, Y+46	; 0x2e
    3f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	8c a7       	std	Y+44, r24	; 0x2c
    3fa6:	8c a5       	ldd	r24, Y+44	; 0x2c
    3fa8:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3faa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fac:	8a 95       	dec	r24
    3fae:	f1 f7       	brne	.-4      	; 0x3fac <LCD_vidInit+0x528>
    3fb0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(50);

	/* Display Clear */
	LCD_vidSendCommand(0x00);
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
	LCD_vidSendCommand(0x10);
    3fb8:	80 e1       	ldi	r24, 0x10	; 16
    3fba:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	a0 ea       	ldi	r26, 0xA0	; 160
    3fc4:	b0 e4       	ldi	r27, 0x40	; 64
    3fc6:	89 8f       	std	Y+25, r24	; 0x19
    3fc8:	9a 8f       	std	Y+26, r25	; 0x1a
    3fca:	ab 8f       	std	Y+27, r26	; 0x1b
    3fcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fce:	69 8d       	ldd	r22, Y+25	; 0x19
    3fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	4a e7       	ldi	r20, 0x7A	; 122
    3fdc:	53 e4       	ldi	r21, 0x43	; 67
    3fde:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	8d 8b       	std	Y+21, r24	; 0x15
    3fe8:	9e 8b       	std	Y+22, r25	; 0x16
    3fea:	af 8b       	std	Y+23, r26	; 0x17
    3fec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fee:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	40 e8       	ldi	r20, 0x80	; 128
    3ffc:	5f e3       	ldi	r21, 0x3F	; 63
    3ffe:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4002:	88 23       	and	r24, r24
    4004:	2c f4       	brge	.+10     	; 0x4010 <LCD_vidInit+0x58c>
		__ticks = 1;
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	9c 8b       	std	Y+20, r25	; 0x14
    400c:	8b 8b       	std	Y+19, r24	; 0x13
    400e:	3f c0       	rjmp	.+126    	; 0x408e <LCD_vidInit+0x60a>
	else if (__tmp > 65535)
    4010:	6d 89       	ldd	r22, Y+21	; 0x15
    4012:	7e 89       	ldd	r23, Y+22	; 0x16
    4014:	8f 89       	ldd	r24, Y+23	; 0x17
    4016:	98 8d       	ldd	r25, Y+24	; 0x18
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	3f ef       	ldi	r19, 0xFF	; 255
    401c:	4f e7       	ldi	r20, 0x7F	; 127
    401e:	57 e4       	ldi	r21, 0x47	; 71
    4020:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    4024:	18 16       	cp	r1, r24
    4026:	4c f5       	brge	.+82     	; 0x407a <LCD_vidInit+0x5f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4028:	69 8d       	ldd	r22, Y+25	; 0x19
    402a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    402c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    402e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	40 e2       	ldi	r20, 0x20	; 32
    4036:	51 e4       	ldi	r21, 0x41	; 65
    4038:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	bc 01       	movw	r22, r24
    4042:	cd 01       	movw	r24, r26
    4044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	9c 8b       	std	Y+20, r25	; 0x14
    404e:	8b 8b       	std	Y+19, r24	; 0x13
    4050:	0f c0       	rjmp	.+30     	; 0x4070 <LCD_vidInit+0x5ec>
    4052:	89 e1       	ldi	r24, 0x19	; 25
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	9a 8b       	std	Y+18, r25	; 0x12
    4058:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    405a:	89 89       	ldd	r24, Y+17	; 0x11
    405c:	9a 89       	ldd	r25, Y+18	; 0x12
    405e:	01 97       	sbiw	r24, 0x01	; 1
    4060:	f1 f7       	brne	.-4      	; 0x405e <LCD_vidInit+0x5da>
    4062:	9a 8b       	std	Y+18, r25	; 0x12
    4064:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4066:	8b 89       	ldd	r24, Y+19	; 0x13
    4068:	9c 89       	ldd	r25, Y+20	; 0x14
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	9c 8b       	std	Y+20, r25	; 0x14
    406e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4070:	8b 89       	ldd	r24, Y+19	; 0x13
    4072:	9c 89       	ldd	r25, Y+20	; 0x14
    4074:	00 97       	sbiw	r24, 0x00	; 0
    4076:	69 f7       	brne	.-38     	; 0x4052 <LCD_vidInit+0x5ce>
    4078:	14 c0       	rjmp	.+40     	; 0x40a2 <LCD_vidInit+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    407a:	6d 89       	ldd	r22, Y+21	; 0x15
    407c:	7e 89       	ldd	r23, Y+22	; 0x16
    407e:	8f 89       	ldd	r24, Y+23	; 0x17
    4080:	98 8d       	ldd	r25, Y+24	; 0x18
    4082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	9c 8b       	std	Y+20, r25	; 0x14
    408c:	8b 8b       	std	Y+19, r24	; 0x13
    408e:	8b 89       	ldd	r24, Y+19	; 0x13
    4090:	9c 89       	ldd	r25, Y+20	; 0x14
    4092:	98 8b       	std	Y+16, r25	; 0x10
    4094:	8f 87       	std	Y+15, r24	; 0x0f
    4096:	8f 85       	ldd	r24, Y+15	; 0x0f
    4098:	98 89       	ldd	r25, Y+16	; 0x10
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	f1 f7       	brne	.-4      	; 0x409a <LCD_vidInit+0x616>
    409e:	98 8b       	std	Y+16, r25	; 0x10
    40a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	/* Entry Mode Set */
	LCD_vidSendCommand(0x00);
    40a2:	80 e0       	ldi	r24, 0x00	; 0
    40a4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
	LCD_vidSendCommand(0x60);
    40a8:	80 e6       	ldi	r24, 0x60	; 96
    40aa:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	a0 ea       	ldi	r26, 0xA0	; 160
    40b4:	b0 e4       	ldi	r27, 0x40	; 64
    40b6:	8b 87       	std	Y+11, r24	; 0x0b
    40b8:	9c 87       	std	Y+12, r25	; 0x0c
    40ba:	ad 87       	std	Y+13, r26	; 0x0d
    40bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40be:	6b 85       	ldd	r22, Y+11	; 0x0b
    40c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    40c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	4a e7       	ldi	r20, 0x7A	; 122
    40cc:	53 e4       	ldi	r21, 0x43	; 67
    40ce:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	8f 83       	std	Y+7, r24	; 0x07
    40d8:	98 87       	std	Y+8, r25	; 0x08
    40da:	a9 87       	std	Y+9, r26	; 0x09
    40dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40de:	6f 81       	ldd	r22, Y+7	; 0x07
    40e0:	78 85       	ldd	r23, Y+8	; 0x08
    40e2:	89 85       	ldd	r24, Y+9	; 0x09
    40e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e8       	ldi	r20, 0x80	; 128
    40ec:	5f e3       	ldi	r21, 0x3F	; 63
    40ee:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    40f2:	88 23       	and	r24, r24
    40f4:	2c f4       	brge	.+10     	; 0x4100 <LCD_vidInit+0x67c>
		__ticks = 1;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	9e 83       	std	Y+6, r25	; 0x06
    40fc:	8d 83       	std	Y+5, r24	; 0x05
    40fe:	3f c0       	rjmp	.+126    	; 0x417e <LCD_vidInit+0x6fa>
	else if (__tmp > 65535)
    4100:	6f 81       	ldd	r22, Y+7	; 0x07
    4102:	78 85       	ldd	r23, Y+8	; 0x08
    4104:	89 85       	ldd	r24, Y+9	; 0x09
    4106:	9a 85       	ldd	r25, Y+10	; 0x0a
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	3f ef       	ldi	r19, 0xFF	; 255
    410c:	4f e7       	ldi	r20, 0x7F	; 127
    410e:	57 e4       	ldi	r21, 0x47	; 71
    4110:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    4114:	18 16       	cp	r1, r24
    4116:	4c f5       	brge	.+82     	; 0x416a <LCD_vidInit+0x6e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4118:	6b 85       	ldd	r22, Y+11	; 0x0b
    411a:	7c 85       	ldd	r23, Y+12	; 0x0c
    411c:	8d 85       	ldd	r24, Y+13	; 0x0d
    411e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	40 e2       	ldi	r20, 0x20	; 32
    4126:	51 e4       	ldi	r21, 0x41	; 65
    4128:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	bc 01       	movw	r22, r24
    4132:	cd 01       	movw	r24, r26
    4134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	9e 83       	std	Y+6, r25	; 0x06
    413e:	8d 83       	std	Y+5, r24	; 0x05
    4140:	0f c0       	rjmp	.+30     	; 0x4160 <LCD_vidInit+0x6dc>
    4142:	89 e1       	ldi	r24, 0x19	; 25
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	9c 83       	std	Y+4, r25	; 0x04
    4148:	8b 83       	std	Y+3, r24	; 0x03
    414a:	8b 81       	ldd	r24, Y+3	; 0x03
    414c:	9c 81       	ldd	r25, Y+4	; 0x04
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	f1 f7       	brne	.-4      	; 0x414e <LCD_vidInit+0x6ca>
    4152:	9c 83       	std	Y+4, r25	; 0x04
    4154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4156:	8d 81       	ldd	r24, Y+5	; 0x05
    4158:	9e 81       	ldd	r25, Y+6	; 0x06
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	9e 83       	std	Y+6, r25	; 0x06
    415e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4160:	8d 81       	ldd	r24, Y+5	; 0x05
    4162:	9e 81       	ldd	r25, Y+6	; 0x06
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	69 f7       	brne	.-38     	; 0x4142 <LCD_vidInit+0x6be>
    4168:	14 c0       	rjmp	.+40     	; 0x4192 <LCD_vidInit+0x70e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    416a:	6f 81       	ldd	r22, Y+7	; 0x07
    416c:	78 85       	ldd	r23, Y+8	; 0x08
    416e:	89 85       	ldd	r24, Y+9	; 0x09
    4170:	9a 85       	ldd	r25, Y+10	; 0x0a
    4172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	9e 83       	std	Y+6, r25	; 0x06
    417c:	8d 83       	std	Y+5, r24	; 0x05
    417e:	8d 81       	ldd	r24, Y+5	; 0x05
    4180:	9e 81       	ldd	r25, Y+6	; 0x06
    4182:	9a 83       	std	Y+2, r25	; 0x02
    4184:	89 83       	std	Y+1, r24	; 0x01
    4186:	89 81       	ldd	r24, Y+1	; 0x01
    4188:	9a 81       	ldd	r25, Y+2	; 0x02
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	f1 f7       	brne	.-4      	; 0x418a <LCD_vidInit+0x706>
    418e:	9a 83       	std	Y+2, r25	; 0x02
    4190:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	LocalInitFunc = 1;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	80 93 7a 01 	sts	0x017A, r24
}
    4198:	c6 5a       	subi	r28, 0xA6	; 166
    419a:	df 4f       	sbci	r29, 0xFF	; 255
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	cf 91       	pop	r28
    41a8:	df 91       	pop	r29
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	08 95       	ret

000041b0 <LCD_vidGotoxy>:

void LCD_vidGotoxy (u8 Y,u8 X)
{
    41b0:	df 93       	push	r29
    41b2:	cf 93       	push	r28
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
    41b8:	6b 97       	sbiw	r28, 0x1b	; 27
    41ba:	0f b6       	in	r0, 0x3f	; 63
    41bc:	f8 94       	cli
    41be:	de bf       	out	0x3e, r29	; 62
    41c0:	0f be       	out	0x3f, r0	; 63
    41c2:	cd bf       	out	0x3d, r28	; 61
    41c4:	8a 8f       	std	Y+26, r24	; 0x1a
    41c6:	6b 8f       	std	Y+27, r22	; 0x1b
	if((Y<2)&&(X<16))
    41c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    41ca:	82 30       	cpi	r24, 0x02	; 2
    41cc:	08 f0       	brcs	.+2      	; 0x41d0 <LCD_vidGotoxy+0x20>
    41ce:	d8 c0       	rjmp	.+432    	; 0x4380 <LCD_vidGotoxy+0x1d0>
    41d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41d2:	80 31       	cpi	r24, 0x10	; 16
    41d4:	08 f0       	brcs	.+2      	; 0x41d8 <LCD_vidGotoxy+0x28>
    41d6:	d4 c0       	rjmp	.+424    	; 0x4380 <LCD_vidGotoxy+0x1d0>
	{
	u8 u8Address = (Y*0x40)+X;
    41d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    41da:	88 2f       	mov	r24, r24
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	00 24       	eor	r0, r0
    41e0:	96 95       	lsr	r25
    41e2:	87 95       	ror	r24
    41e4:	07 94       	ror	r0
    41e6:	96 95       	lsr	r25
    41e8:	87 95       	ror	r24
    41ea:	07 94       	ror	r0
    41ec:	98 2f       	mov	r25, r24
    41ee:	80 2d       	mov	r24, r0
    41f0:	98 2f       	mov	r25, r24
    41f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41f4:	89 0f       	add	r24, r25
    41f6:	89 8f       	std	Y+25, r24	; 0x19
	SET_BIT(u8Address,7);
    41f8:	89 8d       	ldd	r24, Y+25	; 0x19
    41fa:	80 68       	ori	r24, 0x80	; 128
    41fc:	89 8f       	std	Y+25, r24	; 0x19
	LCD_vidSendCommand(u8Address);
    41fe:	89 8d       	ldd	r24, Y+25	; 0x19
    4200:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	a8 e4       	ldi	r26, 0x48	; 72
    420a:	b2 e4       	ldi	r27, 0x42	; 66
    420c:	8d 8b       	std	Y+21, r24	; 0x15
    420e:	9e 8b       	std	Y+22, r25	; 0x16
    4210:	af 8b       	std	Y+23, r26	; 0x17
    4212:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4214:	6d 89       	ldd	r22, Y+21	; 0x15
    4216:	7e 89       	ldd	r23, Y+22	; 0x16
    4218:	8f 89       	ldd	r24, Y+23	; 0x17
    421a:	98 8d       	ldd	r25, Y+24	; 0x18
    421c:	2b ea       	ldi	r18, 0xAB	; 171
    421e:	3a ea       	ldi	r19, 0xAA	; 170
    4220:	4a ea       	ldi	r20, 0xAA	; 170
    4222:	5e e3       	ldi	r21, 0x3E	; 62
    4224:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4228:	dc 01       	movw	r26, r24
    422a:	cb 01       	movw	r24, r22
    422c:	89 8b       	std	Y+17, r24	; 0x11
    422e:	9a 8b       	std	Y+18, r25	; 0x12
    4230:	ab 8b       	std	Y+19, r26	; 0x13
    4232:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4234:	69 89       	ldd	r22, Y+17	; 0x11
    4236:	7a 89       	ldd	r23, Y+18	; 0x12
    4238:	8b 89       	ldd	r24, Y+19	; 0x13
    423a:	9c 89       	ldd	r25, Y+20	; 0x14
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	40 e8       	ldi	r20, 0x80	; 128
    4242:	5f e3       	ldi	r21, 0x3F	; 63
    4244:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4248:	88 23       	and	r24, r24
    424a:	1c f4       	brge	.+6      	; 0x4252 <LCD_vidGotoxy+0xa2>
		__ticks = 1;
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	88 8b       	std	Y+16, r24	; 0x10
    4250:	91 c0       	rjmp	.+290    	; 0x4374 <LCD_vidGotoxy+0x1c4>
	else if (__tmp > 255)
    4252:	69 89       	ldd	r22, Y+17	; 0x11
    4254:	7a 89       	ldd	r23, Y+18	; 0x12
    4256:	8b 89       	ldd	r24, Y+19	; 0x13
    4258:	9c 89       	ldd	r25, Y+20	; 0x14
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	4f e7       	ldi	r20, 0x7F	; 127
    4260:	53 e4       	ldi	r21, 0x43	; 67
    4262:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    4266:	18 16       	cp	r1, r24
    4268:	0c f0       	brlt	.+2      	; 0x426c <LCD_vidGotoxy+0xbc>
    426a:	7b c0       	rjmp	.+246    	; 0x4362 <LCD_vidGotoxy+0x1b2>
	{
		_delay_ms(__us / 1000.0);
    426c:	6d 89       	ldd	r22, Y+21	; 0x15
    426e:	7e 89       	ldd	r23, Y+22	; 0x16
    4270:	8f 89       	ldd	r24, Y+23	; 0x17
    4272:	98 8d       	ldd	r25, Y+24	; 0x18
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	4a e7       	ldi	r20, 0x7A	; 122
    427a:	54 e4       	ldi	r21, 0x44	; 68
    427c:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	8c 87       	std	Y+12, r24	; 0x0c
    4286:	9d 87       	std	Y+13, r25	; 0x0d
    4288:	ae 87       	std	Y+14, r26	; 0x0e
    428a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428c:	6c 85       	ldd	r22, Y+12	; 0x0c
    428e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4290:	8e 85       	ldd	r24, Y+14	; 0x0e
    4292:	9f 85       	ldd	r25, Y+15	; 0x0f
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	4a e7       	ldi	r20, 0x7A	; 122
    429a:	53 e4       	ldi	r21, 0x43	; 67
    429c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
    42a4:	88 87       	std	Y+8, r24	; 0x08
    42a6:	99 87       	std	Y+9, r25	; 0x09
    42a8:	aa 87       	std	Y+10, r26	; 0x0a
    42aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    42ac:	68 85       	ldd	r22, Y+8	; 0x08
    42ae:	79 85       	ldd	r23, Y+9	; 0x09
    42b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    42b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	40 e8       	ldi	r20, 0x80	; 128
    42ba:	5f e3       	ldi	r21, 0x3F	; 63
    42bc:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    42c0:	88 23       	and	r24, r24
    42c2:	2c f4       	brge	.+10     	; 0x42ce <LCD_vidGotoxy+0x11e>
		__ticks = 1;
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	9f 83       	std	Y+7, r25	; 0x07
    42ca:	8e 83       	std	Y+6, r24	; 0x06
    42cc:	3f c0       	rjmp	.+126    	; 0x434c <LCD_vidGotoxy+0x19c>
	else if (__tmp > 65535)
    42ce:	68 85       	ldd	r22, Y+8	; 0x08
    42d0:	79 85       	ldd	r23, Y+9	; 0x09
    42d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    42d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	3f ef       	ldi	r19, 0xFF	; 255
    42da:	4f e7       	ldi	r20, 0x7F	; 127
    42dc:	57 e4       	ldi	r21, 0x47	; 71
    42de:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    42e2:	18 16       	cp	r1, r24
    42e4:	4c f5       	brge	.+82     	; 0x4338 <LCD_vidGotoxy+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    42e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    42ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    42ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	40 e2       	ldi	r20, 0x20	; 32
    42f4:	51 e4       	ldi	r21, 0x41	; 65
    42f6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	bc 01       	movw	r22, r24
    4300:	cd 01       	movw	r24, r26
    4302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	9f 83       	std	Y+7, r25	; 0x07
    430c:	8e 83       	std	Y+6, r24	; 0x06
    430e:	0f c0       	rjmp	.+30     	; 0x432e <LCD_vidGotoxy+0x17e>
    4310:	89 e1       	ldi	r24, 0x19	; 25
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	9d 83       	std	Y+5, r25	; 0x05
    4316:	8c 83       	std	Y+4, r24	; 0x04
    4318:	8c 81       	ldd	r24, Y+4	; 0x04
    431a:	9d 81       	ldd	r25, Y+5	; 0x05
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	f1 f7       	brne	.-4      	; 0x431c <LCD_vidGotoxy+0x16c>
    4320:	9d 83       	std	Y+5, r25	; 0x05
    4322:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4324:	8e 81       	ldd	r24, Y+6	; 0x06
    4326:	9f 81       	ldd	r25, Y+7	; 0x07
    4328:	01 97       	sbiw	r24, 0x01	; 1
    432a:	9f 83       	std	Y+7, r25	; 0x07
    432c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432e:	8e 81       	ldd	r24, Y+6	; 0x06
    4330:	9f 81       	ldd	r25, Y+7	; 0x07
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	69 f7       	brne	.-38     	; 0x4310 <LCD_vidGotoxy+0x160>
    4336:	24 c0       	rjmp	.+72     	; 0x4380 <LCD_vidGotoxy+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4338:	68 85       	ldd	r22, Y+8	; 0x08
    433a:	79 85       	ldd	r23, Y+9	; 0x09
    433c:	8a 85       	ldd	r24, Y+10	; 0x0a
    433e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	9f 83       	std	Y+7, r25	; 0x07
    434a:	8e 83       	std	Y+6, r24	; 0x06
    434c:	8e 81       	ldd	r24, Y+6	; 0x06
    434e:	9f 81       	ldd	r25, Y+7	; 0x07
    4350:	9b 83       	std	Y+3, r25	; 0x03
    4352:	8a 83       	std	Y+2, r24	; 0x02
    4354:	8a 81       	ldd	r24, Y+2	; 0x02
    4356:	9b 81       	ldd	r25, Y+3	; 0x03
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	f1 f7       	brne	.-4      	; 0x4358 <LCD_vidGotoxy+0x1a8>
    435c:	9b 83       	std	Y+3, r25	; 0x03
    435e:	8a 83       	std	Y+2, r24	; 0x02
    4360:	0f c0       	rjmp	.+30     	; 0x4380 <LCD_vidGotoxy+0x1d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4362:	69 89       	ldd	r22, Y+17	; 0x11
    4364:	7a 89       	ldd	r23, Y+18	; 0x12
    4366:	8b 89       	ldd	r24, Y+19	; 0x13
    4368:	9c 89       	ldd	r25, Y+20	; 0x14
    436a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	88 8b       	std	Y+16, r24	; 0x10
    4374:	88 89       	ldd	r24, Y+16	; 0x10
    4376:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	8a 95       	dec	r24
    437c:	f1 f7       	brne	.-4      	; 0x437a <LCD_vidGotoxy+0x1ca>
    437e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	}
}
    4380:	6b 96       	adiw	r28, 0x1b	; 27
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	f8 94       	cli
    4386:	de bf       	out	0x3e, r29	; 62
    4388:	0f be       	out	0x3f, r0	; 63
    438a:	cd bf       	out	0x3d, r28	; 61
    438c:	cf 91       	pop	r28
    438e:	df 91       	pop	r29
    4390:	08 95       	ret

00004392 <LCD_vidWriteStringAtPossition>:

void LCD_vidWriteStringAtPossition (u8* pu8StringCpy, u8 Y ,u8 X)
{
    4392:	df 93       	push	r29
    4394:	cf 93       	push	r28
    4396:	00 d0       	rcall	.+0      	; 0x4398 <LCD_vidWriteStringAtPossition+0x6>
    4398:	00 d0       	rcall	.+0      	; 0x439a <LCD_vidWriteStringAtPossition+0x8>
    439a:	0f 92       	push	r0
    439c:	cd b7       	in	r28, 0x3d	; 61
    439e:	de b7       	in	r29, 0x3e	; 62
    43a0:	9b 83       	std	Y+3, r25	; 0x03
    43a2:	8a 83       	std	Y+2, r24	; 0x02
    43a4:	6c 83       	std	Y+4, r22	; 0x04
    43a6:	4d 83       	std	Y+5, r20	; 0x05
	/*Go To The XY Cell*/
	LCD_vidGotoxy(Y,X);
    43a8:	8c 81       	ldd	r24, Y+4	; 0x04
    43aa:	6d 81       	ldd	r22, Y+5	; 0x05
    43ac:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
	/*Check If The Coordinates Is Outside The LCD */
	if((Y<2)&&(X<16))
    43b0:	8c 81       	ldd	r24, Y+4	; 0x04
    43b2:	82 30       	cpi	r24, 0x02	; 2
    43b4:	f0 f4       	brcc	.+60     	; 0x43f2 <LCD_vidWriteStringAtPossition+0x60>
    43b6:	8d 81       	ldd	r24, Y+5	; 0x05
    43b8:	80 31       	cpi	r24, 0x10	; 16
    43ba:	d8 f4       	brcc	.+54     	; 0x43f2 <LCD_vidWriteStringAtPossition+0x60>
		{
			u8 u8Index =0;
    43bc:	19 82       	std	Y+1, r1	; 0x01
    43be:	0e c0       	rjmp	.+28     	; 0x43dc <LCD_vidWriteStringAtPossition+0x4a>
			/*Check If The String Finished OR The LCD Cells Finished */
			while(pu8StringCpy[u8Index]!='\0')
			{
				LCD_vidWriteCharctr(pu8StringCpy[u8Index]);
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
    43c2:	28 2f       	mov	r18, r24
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	8a 81       	ldd	r24, Y+2	; 0x02
    43c8:	9b 81       	ldd	r25, Y+3	; 0x03
    43ca:	fc 01       	movw	r30, r24
    43cc:	e2 0f       	add	r30, r18
    43ce:	f3 1f       	adc	r31, r19
    43d0:	80 81       	ld	r24, Z
    43d2:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
				u8Index++;
    43d6:	89 81       	ldd	r24, Y+1	; 0x01
    43d8:	8f 5f       	subi	r24, 0xFF	; 255
    43da:	89 83       	std	Y+1, r24	; 0x01
	/*Check If The Coordinates Is Outside The LCD */
	if((Y<2)&&(X<16))
		{
			u8 u8Index =0;
			/*Check If The String Finished OR The LCD Cells Finished */
			while(pu8StringCpy[u8Index]!='\0')
    43dc:	89 81       	ldd	r24, Y+1	; 0x01
    43de:	28 2f       	mov	r18, r24
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	8a 81       	ldd	r24, Y+2	; 0x02
    43e4:	9b 81       	ldd	r25, Y+3	; 0x03
    43e6:	fc 01       	movw	r30, r24
    43e8:	e2 0f       	add	r30, r18
    43ea:	f3 1f       	adc	r31, r19
    43ec:	80 81       	ld	r24, Z
    43ee:	88 23       	and	r24, r24
    43f0:	39 f7       	brne	.-50     	; 0x43c0 <LCD_vidWriteStringAtPossition+0x2e>
			{
				LCD_vidWriteCharctr(pu8StringCpy[u8Index]);
				u8Index++;
			}
		}
}
    43f2:	0f 90       	pop	r0
    43f4:	0f 90       	pop	r0
    43f6:	0f 90       	pop	r0
    43f8:	0f 90       	pop	r0
    43fa:	0f 90       	pop	r0
    43fc:	cf 91       	pop	r28
    43fe:	df 91       	pop	r29
    4400:	08 95       	ret

00004402 <LCD_vidWriteCharctr>:

void LCD_vidWriteCharctr(u8 u8DataCpy)
{
    4402:	df 93       	push	r29
    4404:	cf 93       	push	r28
    4406:	00 d0       	rcall	.+0      	; 0x4408 <LCD_vidWriteCharctr+0x6>
    4408:	0f 92       	push	r0
    440a:	cd b7       	in	r28, 0x3d	; 61
    440c:	de b7       	in	r29, 0x3e	; 62
    440e:	8b 83       	std	Y+3, r24	; 0x03
	/*Set 1 for RS for DATA*/
	DIO_vidSetPinVal(CONTROL_PORT,REG_SELC_RS,DIO_HIGH);
    4410:	82 e0       	ldi	r24, 0x02	; 2
    4412:	60 e0       	ldi	r22, 0x00	; 0
    4414:	4f ef       	ldi	r20, 0xFF	; 255
    4416:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	/*Set 0 for W/R for Write*/
	DIO_vidSetPinVal(CONTROL_PORT,Read_Write_SELEC_RW,DIO_LOW);
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	61 e0       	ldi	r22, 0x01	; 1
    441e:	40 e0       	ldi	r20, 0x00	; 0
    4420:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	/*copy the DATA to The Data Port*/
	u8 temp = GET_BIT(u8DataCpy,7);
    4424:	8b 81       	ldd	r24, Y+3	; 0x03
    4426:	88 1f       	adc	r24, r24
    4428:	88 27       	eor	r24, r24
    442a:	88 1f       	adc	r24, r24
    442c:	8a 83       	std	Y+2, r24	; 0x02
		if(temp == 1)
    442e:	8a 81       	ldd	r24, Y+2	; 0x02
    4430:	81 30       	cpi	r24, 0x01	; 1
    4432:	11 f4       	brne	.+4      	; 0x4438 <LCD_vidWriteCharctr+0x36>
			temp = 0xff;
    4434:	8f ef       	ldi	r24, 0xFF	; 255
    4436:	8a 83       	std	Y+2, r24	; 0x02
		DIO_vidSetPinVal(DATA_PORT,DIO_PIN7,temp);
    4438:	80 e0       	ldi	r24, 0x00	; 0
    443a:	67 e0       	ldi	r22, 0x07	; 7
    443c:	4a 81       	ldd	r20, Y+2	; 0x02
    443e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

		temp = GET_BIT(u8DataCpy,6);
    4442:	8b 81       	ldd	r24, Y+3	; 0x03
    4444:	82 95       	swap	r24
    4446:	86 95       	lsr	r24
    4448:	86 95       	lsr	r24
    444a:	83 70       	andi	r24, 0x03	; 3
    444c:	81 70       	andi	r24, 0x01	; 1
    444e:	8a 83       	std	Y+2, r24	; 0x02
			if(temp == 1)
    4450:	8a 81       	ldd	r24, Y+2	; 0x02
    4452:	81 30       	cpi	r24, 0x01	; 1
    4454:	11 f4       	brne	.+4      	; 0x445a <LCD_vidWriteCharctr+0x58>
				temp = 0xff;
    4456:	8f ef       	ldi	r24, 0xFF	; 255
    4458:	8a 83       	std	Y+2, r24	; 0x02
		DIO_vidSetPinVal(DATA_PORT,DIO_PIN6,temp);
    445a:	80 e0       	ldi	r24, 0x00	; 0
    445c:	66 e0       	ldi	r22, 0x06	; 6
    445e:	4a 81       	ldd	r20, Y+2	; 0x02
    4460:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

		temp = GET_BIT(u8DataCpy,5);
    4464:	8b 81       	ldd	r24, Y+3	; 0x03
    4466:	82 95       	swap	r24
    4468:	86 95       	lsr	r24
    446a:	87 70       	andi	r24, 0x07	; 7
    446c:	81 70       	andi	r24, 0x01	; 1
    446e:	8a 83       	std	Y+2, r24	; 0x02
				if(temp == 1)
    4470:	8a 81       	ldd	r24, Y+2	; 0x02
    4472:	81 30       	cpi	r24, 0x01	; 1
    4474:	11 f4       	brne	.+4      	; 0x447a <LCD_vidWriteCharctr+0x78>
					temp = 0xff;
    4476:	8f ef       	ldi	r24, 0xFF	; 255
    4478:	8a 83       	std	Y+2, r24	; 0x02
		DIO_vidSetPinVal(DATA_PORT,DIO_PIN5,temp);
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	65 e0       	ldi	r22, 0x05	; 5
    447e:	4a 81       	ldd	r20, Y+2	; 0x02
    4480:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

		temp = GET_BIT(u8DataCpy,4);
    4484:	8b 81       	ldd	r24, Y+3	; 0x03
    4486:	82 95       	swap	r24
    4488:	8f 70       	andi	r24, 0x0F	; 15
    448a:	81 70       	andi	r24, 0x01	; 1
    448c:	8a 83       	std	Y+2, r24	; 0x02
				if(temp == 1)
    448e:	8a 81       	ldd	r24, Y+2	; 0x02
    4490:	81 30       	cpi	r24, 0x01	; 1
    4492:	11 f4       	brne	.+4      	; 0x4498 <LCD_vidWriteCharctr+0x96>
					temp = 0xff;
    4494:	8f ef       	ldi	r24, 0xFF	; 255
    4496:	8a 83       	std	Y+2, r24	; 0x02
		DIO_vidSetPinVal(DATA_PORT,DIO_PIN4,temp);
    4498:	80 e0       	ldi	r24, 0x00	; 0
    449a:	64 e0       	ldi	r22, 0x04	; 4
    449c:	4a 81       	ldd	r20, Y+2	; 0x02
    449e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>


	/*Make aPulse 0->1*/
	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_HIGH);
    44a2:	82 e0       	ldi	r24, 0x02	; 2
    44a4:	62 e0       	ldi	r22, 0x02	; 2
    44a6:	4f ef       	ldi	r20, 0xFF	; 255
    44a8:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_LOW);
    44ac:	82 e0       	ldi	r24, 0x02	; 2
    44ae:	62 e0       	ldi	r22, 0x02	; 2
    44b0:	40 e0       	ldi	r20, 0x00	; 0
    44b2:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>


	temp = GET_BIT(u8DataCpy,3);
    44b6:	8b 81       	ldd	r24, Y+3	; 0x03
    44b8:	86 95       	lsr	r24
    44ba:	86 95       	lsr	r24
    44bc:	86 95       	lsr	r24
    44be:	81 70       	andi	r24, 0x01	; 1
    44c0:	8a 83       	std	Y+2, r24	; 0x02
			if(temp == 1)
    44c2:	8a 81       	ldd	r24, Y+2	; 0x02
    44c4:	81 30       	cpi	r24, 0x01	; 1
    44c6:	11 f4       	brne	.+4      	; 0x44cc <LCD_vidWriteCharctr+0xca>
				temp = 0xff;
    44c8:	8f ef       	ldi	r24, 0xFF	; 255
    44ca:	8a 83       	std	Y+2, r24	; 0x02
			DIO_vidSetPinVal(DATA_PORT,DIO_PIN7,temp);
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	67 e0       	ldi	r22, 0x07	; 7
    44d0:	4a 81       	ldd	r20, Y+2	; 0x02
    44d2:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

			temp = GET_BIT(u8DataCpy,2);
    44d6:	8b 81       	ldd	r24, Y+3	; 0x03
    44d8:	86 95       	lsr	r24
    44da:	86 95       	lsr	r24
    44dc:	81 70       	andi	r24, 0x01	; 1
    44de:	8a 83       	std	Y+2, r24	; 0x02
				if(temp == 1)
    44e0:	8a 81       	ldd	r24, Y+2	; 0x02
    44e2:	81 30       	cpi	r24, 0x01	; 1
    44e4:	11 f4       	brne	.+4      	; 0x44ea <LCD_vidWriteCharctr+0xe8>
					temp = 0xff;
    44e6:	8f ef       	ldi	r24, 0xFF	; 255
    44e8:	8a 83       	std	Y+2, r24	; 0x02
			DIO_vidSetPinVal(DATA_PORT,DIO_PIN6,temp);
    44ea:	80 e0       	ldi	r24, 0x00	; 0
    44ec:	66 e0       	ldi	r22, 0x06	; 6
    44ee:	4a 81       	ldd	r20, Y+2	; 0x02
    44f0:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

			temp = GET_BIT(u8DataCpy,1);
    44f4:	8b 81       	ldd	r24, Y+3	; 0x03
    44f6:	86 95       	lsr	r24
    44f8:	81 70       	andi	r24, 0x01	; 1
    44fa:	8a 83       	std	Y+2, r24	; 0x02
					if(temp == 1)
    44fc:	8a 81       	ldd	r24, Y+2	; 0x02
    44fe:	81 30       	cpi	r24, 0x01	; 1
    4500:	11 f4       	brne	.+4      	; 0x4506 <LCD_vidWriteCharctr+0x104>
						temp = 0xff;
    4502:	8f ef       	ldi	r24, 0xFF	; 255
    4504:	8a 83       	std	Y+2, r24	; 0x02
			DIO_vidSetPinVal(DATA_PORT,DIO_PIN5,temp);
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	65 e0       	ldi	r22, 0x05	; 5
    450a:	4a 81       	ldd	r20, Y+2	; 0x02
    450c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

			temp = GET_BIT(u8DataCpy,0);
    4510:	8b 81       	ldd	r24, Y+3	; 0x03
    4512:	81 70       	andi	r24, 0x01	; 1
    4514:	8a 83       	std	Y+2, r24	; 0x02
					if(temp == 1)
    4516:	8a 81       	ldd	r24, Y+2	; 0x02
    4518:	81 30       	cpi	r24, 0x01	; 1
    451a:	11 f4       	brne	.+4      	; 0x4520 <LCD_vidWriteCharctr+0x11e>
						temp = 0xff;
    451c:	8f ef       	ldi	r24, 0xFF	; 255
    451e:	8a 83       	std	Y+2, r24	; 0x02
			DIO_vidSetPinVal(DATA_PORT,DIO_PIN4,temp);
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	64 e0       	ldi	r22, 0x04	; 4
    4524:	4a 81       	ldd	r20, Y+2	; 0x02
    4526:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_HIGH);
    452a:	82 e0       	ldi	r24, 0x02	; 2
    452c:	62 e0       	ldi	r22, 0x02	; 2
    452e:	4f ef       	ldi	r20, 0xFF	; 255
    4530:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>
	/*Make aPulse 0->1*/
	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_LOW);
    4534:	82 e0       	ldi	r24, 0x02	; 2
    4536:	62 e0       	ldi	r22, 0x02	; 2
    4538:	40 e0       	ldi	r20, 0x00	; 0
    453a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>

	u8 u8Address = LCD_u8ReadBusyFlagAndAddress();
    453e:	0e 94 b7 22 	call	0x456e	; 0x456e <LCD_u8ReadBusyFlagAndAddress>
    4542:	89 83       	std	Y+1, r24	; 0x01
	if(u8Address == END_LINE_1_ADD)
    4544:	89 81       	ldd	r24, Y+1	; 0x01
    4546:	80 31       	cpi	r24, 0x10	; 16
    4548:	29 f4       	brne	.+10     	; 0x4554 <LCD_vidWriteCharctr+0x152>
	{
		LCD_vidGotoxy(1,0);
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	60 e0       	ldi	r22, 0x00	; 0
    454e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    4552:	07 c0       	rjmp	.+14     	; 0x4562 <LCD_vidWriteCharctr+0x160>
	}
	else if(u8Address == END_LINE_2_ADD)
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	80 35       	cpi	r24, 0x50	; 80
    4558:	21 f4       	brne	.+8      	; 0x4562 <LCD_vidWriteCharctr+0x160>
	{
		LCD_vidGotoxy(0,0);
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	60 e0       	ldi	r22, 0x00	; 0
    455e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
	}
}
    4562:	0f 90       	pop	r0
    4564:	0f 90       	pop	r0
    4566:	0f 90       	pop	r0
    4568:	cf 91       	pop	r28
    456a:	df 91       	pop	r29
    456c:	08 95       	ret

0000456e <LCD_u8ReadBusyFlagAndAddress>:

u8 LCD_u8ReadBusyFlagAndAddress(void)
{
    456e:	df 93       	push	r29
    4570:	cf 93       	push	r28
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
    4576:	e6 97       	sbiw	r28, 0x36	; 54
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	f8 94       	cli
    457c:	de bf       	out	0x3e, r29	; 62
    457e:	0f be       	out	0x3f, r0	; 63
    4580:	cd bf       	out	0x3d, r28	; 61
	DIO_vidSetPinDir(DATA_PORT,DIO_PIN7,DIO_INPUT);
    4582:	80 e0       	ldi	r24, 0x00	; 0
    4584:	67 e0       	ldi	r22, 0x07	; 7
    4586:	40 e0       	ldi	r20, 0x00	; 0
    4588:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DATA_PORT,DIO_PIN6,DIO_INPUT);
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	66 e0       	ldi	r22, 0x06	; 6
    4590:	40 e0       	ldi	r20, 0x00	; 0
    4592:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DATA_PORT,DIO_PIN5,DIO_INPUT);
    4596:	80 e0       	ldi	r24, 0x00	; 0
    4598:	65 e0       	ldi	r22, 0x05	; 5
    459a:	40 e0       	ldi	r20, 0x00	; 0
    459c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DATA_PORT,DIO_PIN4,DIO_INPUT);
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	64 e0       	ldi	r22, 0x04	; 4
    45a4:	40 e0       	ldi	r20, 0x00	; 0
    45a6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>

	DIO_vidSetPinVal(CONTROL_PORT,REG_SELC_RS,DIO_LOW);
    45aa:	82 e0       	ldi	r24, 0x02	; 2
    45ac:	60 e0       	ldi	r22, 0x00	; 0
    45ae:	40 e0       	ldi	r20, 0x00	; 0
    45b0:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>
	DIO_vidSetPinVal(CONTROL_PORT,Read_Write_SELEC_RW,DIO_HIGH);
    45b4:	82 e0       	ldi	r24, 0x02	; 2
    45b6:	61 e0       	ldi	r22, 0x01	; 1
    45b8:	4f ef       	ldi	r20, 0xFF	; 255
    45ba:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	a8 e4       	ldi	r26, 0x48	; 72
    45c4:	b2 e4       	ldi	r27, 0x42	; 66
    45c6:	89 ab       	std	Y+49, r24	; 0x31
    45c8:	9a ab       	std	Y+50, r25	; 0x32
    45ca:	ab ab       	std	Y+51, r26	; 0x33
    45cc:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    45ce:	69 a9       	ldd	r22, Y+49	; 0x31
    45d0:	7a a9       	ldd	r23, Y+50	; 0x32
    45d2:	8b a9       	ldd	r24, Y+51	; 0x33
    45d4:	9c a9       	ldd	r25, Y+52	; 0x34
    45d6:	2b ea       	ldi	r18, 0xAB	; 171
    45d8:	3a ea       	ldi	r19, 0xAA	; 170
    45da:	4a ea       	ldi	r20, 0xAA	; 170
    45dc:	5e e3       	ldi	r21, 0x3E	; 62
    45de:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    45e2:	dc 01       	movw	r26, r24
    45e4:	cb 01       	movw	r24, r22
    45e6:	8d a7       	std	Y+45, r24	; 0x2d
    45e8:	9e a7       	std	Y+46, r25	; 0x2e
    45ea:	af a7       	std	Y+47, r26	; 0x2f
    45ec:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    45ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    45f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    45f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    45f4:	98 a9       	ldd	r25, Y+48	; 0x30
    45f6:	20 e0       	ldi	r18, 0x00	; 0
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	40 e8       	ldi	r20, 0x80	; 128
    45fc:	5f e3       	ldi	r21, 0x3F	; 63
    45fe:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4602:	88 23       	and	r24, r24
    4604:	1c f4       	brge	.+6      	; 0x460c <LCD_u8ReadBusyFlagAndAddress+0x9e>
		__ticks = 1;
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	8c a7       	std	Y+44, r24	; 0x2c
    460a:	91 c0       	rjmp	.+290    	; 0x472e <LCD_u8ReadBusyFlagAndAddress+0x1c0>
	else if (__tmp > 255)
    460c:	6d a5       	ldd	r22, Y+45	; 0x2d
    460e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4610:	8f a5       	ldd	r24, Y+47	; 0x2f
    4612:	98 a9       	ldd	r25, Y+48	; 0x30
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	4f e7       	ldi	r20, 0x7F	; 127
    461a:	53 e4       	ldi	r21, 0x43	; 67
    461c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    4620:	18 16       	cp	r1, r24
    4622:	0c f0       	brlt	.+2      	; 0x4626 <LCD_u8ReadBusyFlagAndAddress+0xb8>
    4624:	7b c0       	rjmp	.+246    	; 0x471c <LCD_u8ReadBusyFlagAndAddress+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    4626:	69 a9       	ldd	r22, Y+49	; 0x31
    4628:	7a a9       	ldd	r23, Y+50	; 0x32
    462a:	8b a9       	ldd	r24, Y+51	; 0x33
    462c:	9c a9       	ldd	r25, Y+52	; 0x34
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	4a e7       	ldi	r20, 0x7A	; 122
    4634:	54 e4       	ldi	r21, 0x44	; 68
    4636:	0e 94 a6 10 	call	0x214c	; 0x214c <__divsf3>
    463a:	dc 01       	movw	r26, r24
    463c:	cb 01       	movw	r24, r22
    463e:	88 a7       	std	Y+40, r24	; 0x28
    4640:	99 a7       	std	Y+41, r25	; 0x29
    4642:	aa a7       	std	Y+42, r26	; 0x2a
    4644:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4646:	68 a5       	ldd	r22, Y+40	; 0x28
    4648:	79 a5       	ldd	r23, Y+41	; 0x29
    464a:	8a a5       	ldd	r24, Y+42	; 0x2a
    464c:	9b a5       	ldd	r25, Y+43	; 0x2b
    464e:	20 e0       	ldi	r18, 0x00	; 0
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	4a e7       	ldi	r20, 0x7A	; 122
    4654:	53 e4       	ldi	r21, 0x43	; 67
    4656:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	8c a3       	std	Y+36, r24	; 0x24
    4660:	9d a3       	std	Y+37, r25	; 0x25
    4662:	ae a3       	std	Y+38, r26	; 0x26
    4664:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    4666:	6c a1       	ldd	r22, Y+36	; 0x24
    4668:	7d a1       	ldd	r23, Y+37	; 0x25
    466a:	8e a1       	ldd	r24, Y+38	; 0x26
    466c:	9f a1       	ldd	r25, Y+39	; 0x27
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	40 e8       	ldi	r20, 0x80	; 128
    4674:	5f e3       	ldi	r21, 0x3F	; 63
    4676:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    467a:	88 23       	and	r24, r24
    467c:	2c f4       	brge	.+10     	; 0x4688 <LCD_u8ReadBusyFlagAndAddress+0x11a>
		__ticks = 1;
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	9b a3       	std	Y+35, r25	; 0x23
    4684:	8a a3       	std	Y+34, r24	; 0x22
    4686:	3f c0       	rjmp	.+126    	; 0x4706 <LCD_u8ReadBusyFlagAndAddress+0x198>
	else if (__tmp > 65535)
    4688:	6c a1       	ldd	r22, Y+36	; 0x24
    468a:	7d a1       	ldd	r23, Y+37	; 0x25
    468c:	8e a1       	ldd	r24, Y+38	; 0x26
    468e:	9f a1       	ldd	r25, Y+39	; 0x27
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	3f ef       	ldi	r19, 0xFF	; 255
    4694:	4f e7       	ldi	r20, 0x7F	; 127
    4696:	57 e4       	ldi	r21, 0x47	; 71
    4698:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    469c:	18 16       	cp	r1, r24
    469e:	4c f5       	brge	.+82     	; 0x46f2 <LCD_u8ReadBusyFlagAndAddress+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46a0:	68 a5       	ldd	r22, Y+40	; 0x28
    46a2:	79 a5       	ldd	r23, Y+41	; 0x29
    46a4:	8a a5       	ldd	r24, Y+42	; 0x2a
    46a6:	9b a5       	ldd	r25, Y+43	; 0x2b
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	40 e2       	ldi	r20, 0x20	; 32
    46ae:	51 e4       	ldi	r21, 0x41	; 65
    46b0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    46b4:	dc 01       	movw	r26, r24
    46b6:	cb 01       	movw	r24, r22
    46b8:	bc 01       	movw	r22, r24
    46ba:	cd 01       	movw	r24, r26
    46bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c0:	dc 01       	movw	r26, r24
    46c2:	cb 01       	movw	r24, r22
    46c4:	9b a3       	std	Y+35, r25	; 0x23
    46c6:	8a a3       	std	Y+34, r24	; 0x22
    46c8:	0f c0       	rjmp	.+30     	; 0x46e8 <LCD_u8ReadBusyFlagAndAddress+0x17a>
    46ca:	89 e1       	ldi	r24, 0x19	; 25
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	99 a3       	std	Y+33, r25	; 0x21
    46d0:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    46d2:	88 a1       	ldd	r24, Y+32	; 0x20
    46d4:	99 a1       	ldd	r25, Y+33	; 0x21
    46d6:	01 97       	sbiw	r24, 0x01	; 1
    46d8:	f1 f7       	brne	.-4      	; 0x46d6 <LCD_u8ReadBusyFlagAndAddress+0x168>
    46da:	99 a3       	std	Y+33, r25	; 0x21
    46dc:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46de:	8a a1       	ldd	r24, Y+34	; 0x22
    46e0:	9b a1       	ldd	r25, Y+35	; 0x23
    46e2:	01 97       	sbiw	r24, 0x01	; 1
    46e4:	9b a3       	std	Y+35, r25	; 0x23
    46e6:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46e8:	8a a1       	ldd	r24, Y+34	; 0x22
    46ea:	9b a1       	ldd	r25, Y+35	; 0x23
    46ec:	00 97       	sbiw	r24, 0x00	; 0
    46ee:	69 f7       	brne	.-38     	; 0x46ca <LCD_u8ReadBusyFlagAndAddress+0x15c>
    46f0:	24 c0       	rjmp	.+72     	; 0x473a <LCD_u8ReadBusyFlagAndAddress+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46f2:	6c a1       	ldd	r22, Y+36	; 0x24
    46f4:	7d a1       	ldd	r23, Y+37	; 0x25
    46f6:	8e a1       	ldd	r24, Y+38	; 0x26
    46f8:	9f a1       	ldd	r25, Y+39	; 0x27
    46fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	9b a3       	std	Y+35, r25	; 0x23
    4704:	8a a3       	std	Y+34, r24	; 0x22
    4706:	8a a1       	ldd	r24, Y+34	; 0x22
    4708:	9b a1       	ldd	r25, Y+35	; 0x23
    470a:	9f 8f       	std	Y+31, r25	; 0x1f
    470c:	8e 8f       	std	Y+30, r24	; 0x1e
    470e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4710:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4712:	01 97       	sbiw	r24, 0x01	; 1
    4714:	f1 f7       	brne	.-4      	; 0x4712 <LCD_u8ReadBusyFlagAndAddress+0x1a4>
    4716:	9f 8f       	std	Y+31, r25	; 0x1f
    4718:	8e 8f       	std	Y+30, r24	; 0x1e
    471a:	0f c0       	rjmp	.+30     	; 0x473a <LCD_u8ReadBusyFlagAndAddress+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    471c:	6d a5       	ldd	r22, Y+45	; 0x2d
    471e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4720:	8f a5       	ldd	r24, Y+47	; 0x2f
    4722:	98 a9       	ldd	r25, Y+48	; 0x30
    4724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	8c a7       	std	Y+44, r24	; 0x2c
    472e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4730:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4732:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4734:	8a 95       	dec	r24
    4736:	f1 f7       	brne	.-4      	; 0x4734 <LCD_u8ReadBusyFlagAndAddress+0x1c6>
    4738:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(50);

	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_LOW);
    473a:	82 e0       	ldi	r24, 0x02	; 2
    473c:	62 e0       	ldi	r22, 0x02	; 2
    473e:	40 e0       	ldi	r20, 0x00	; 0
    4740:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	a0 ea       	ldi	r26, 0xA0	; 160
    474a:	b0 e4       	ldi	r27, 0x40	; 64
    474c:	89 8f       	std	Y+25, r24	; 0x19
    474e:	9a 8f       	std	Y+26, r25	; 0x1a
    4750:	ab 8f       	std	Y+27, r26	; 0x1b
    4752:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4754:	69 8d       	ldd	r22, Y+25	; 0x19
    4756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    475a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	4a e7       	ldi	r20, 0x7A	; 122
    4762:	53 e4       	ldi	r21, 0x43	; 67
    4764:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	8d 8b       	std	Y+21, r24	; 0x15
    476e:	9e 8b       	std	Y+22, r25	; 0x16
    4770:	af 8b       	std	Y+23, r26	; 0x17
    4772:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4774:	6d 89       	ldd	r22, Y+21	; 0x15
    4776:	7e 89       	ldd	r23, Y+22	; 0x16
    4778:	8f 89       	ldd	r24, Y+23	; 0x17
    477a:	98 8d       	ldd	r25, Y+24	; 0x18
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	40 e8       	ldi	r20, 0x80	; 128
    4782:	5f e3       	ldi	r21, 0x3F	; 63
    4784:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4788:	88 23       	and	r24, r24
    478a:	2c f4       	brge	.+10     	; 0x4796 <LCD_u8ReadBusyFlagAndAddress+0x228>
		__ticks = 1;
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	9c 8b       	std	Y+20, r25	; 0x14
    4792:	8b 8b       	std	Y+19, r24	; 0x13
    4794:	3f c0       	rjmp	.+126    	; 0x4814 <LCD_u8ReadBusyFlagAndAddress+0x2a6>
	else if (__tmp > 65535)
    4796:	6d 89       	ldd	r22, Y+21	; 0x15
    4798:	7e 89       	ldd	r23, Y+22	; 0x16
    479a:	8f 89       	ldd	r24, Y+23	; 0x17
    479c:	98 8d       	ldd	r25, Y+24	; 0x18
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	3f ef       	ldi	r19, 0xFF	; 255
    47a2:	4f e7       	ldi	r20, 0x7F	; 127
    47a4:	57 e4       	ldi	r21, 0x47	; 71
    47a6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    47aa:	18 16       	cp	r1, r24
    47ac:	4c f5       	brge	.+82     	; 0x4800 <LCD_u8ReadBusyFlagAndAddress+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ae:	69 8d       	ldd	r22, Y+25	; 0x19
    47b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47b6:	20 e0       	ldi	r18, 0x00	; 0
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	40 e2       	ldi	r20, 0x20	; 32
    47bc:	51 e4       	ldi	r21, 0x41	; 65
    47be:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    47c2:	dc 01       	movw	r26, r24
    47c4:	cb 01       	movw	r24, r22
    47c6:	bc 01       	movw	r22, r24
    47c8:	cd 01       	movw	r24, r26
    47ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	9c 8b       	std	Y+20, r25	; 0x14
    47d4:	8b 8b       	std	Y+19, r24	; 0x13
    47d6:	0f c0       	rjmp	.+30     	; 0x47f6 <LCD_u8ReadBusyFlagAndAddress+0x288>
    47d8:	89 e1       	ldi	r24, 0x19	; 25
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	9a 8b       	std	Y+18, r25	; 0x12
    47de:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47e0:	89 89       	ldd	r24, Y+17	; 0x11
    47e2:	9a 89       	ldd	r25, Y+18	; 0x12
    47e4:	01 97       	sbiw	r24, 0x01	; 1
    47e6:	f1 f7       	brne	.-4      	; 0x47e4 <LCD_u8ReadBusyFlagAndAddress+0x276>
    47e8:	9a 8b       	std	Y+18, r25	; 0x12
    47ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ec:	8b 89       	ldd	r24, Y+19	; 0x13
    47ee:	9c 89       	ldd	r25, Y+20	; 0x14
    47f0:	01 97       	sbiw	r24, 0x01	; 1
    47f2:	9c 8b       	std	Y+20, r25	; 0x14
    47f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47f6:	8b 89       	ldd	r24, Y+19	; 0x13
    47f8:	9c 89       	ldd	r25, Y+20	; 0x14
    47fa:	00 97       	sbiw	r24, 0x00	; 0
    47fc:	69 f7       	brne	.-38     	; 0x47d8 <LCD_u8ReadBusyFlagAndAddress+0x26a>
    47fe:	14 c0       	rjmp	.+40     	; 0x4828 <LCD_u8ReadBusyFlagAndAddress+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4800:	6d 89       	ldd	r22, Y+21	; 0x15
    4802:	7e 89       	ldd	r23, Y+22	; 0x16
    4804:	8f 89       	ldd	r24, Y+23	; 0x17
    4806:	98 8d       	ldd	r25, Y+24	; 0x18
    4808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	9c 8b       	std	Y+20, r25	; 0x14
    4812:	8b 8b       	std	Y+19, r24	; 0x13
    4814:	8b 89       	ldd	r24, Y+19	; 0x13
    4816:	9c 89       	ldd	r25, Y+20	; 0x14
    4818:	98 8b       	std	Y+16, r25	; 0x10
    481a:	8f 87       	std	Y+15, r24	; 0x0f
    481c:	8f 85       	ldd	r24, Y+15	; 0x0f
    481e:	98 89       	ldd	r25, Y+16	; 0x10
    4820:	01 97       	sbiw	r24, 0x01	; 1
    4822:	f1 f7       	brne	.-4      	; 0x4820 <LCD_u8ReadBusyFlagAndAddress+0x2b2>
    4824:	98 8b       	std	Y+16, r25	; 0x10
    4826:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_HIGH);
    4828:	82 e0       	ldi	r24, 0x02	; 2
    482a:	62 e0       	ldi	r22, 0x02	; 2
    482c:	4f ef       	ldi	r20, 0xFF	; 255
    482e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>


	u8 u8Address = DIO_u8GetPortVal(DATA_PORT);
    4832:	80 e0       	ldi	r24, 0x00	; 0
    4834:	0e 94 c1 18 	call	0x3182	; 0x3182 <DIO_u8GetPortVal>
    4838:	8e ab       	std	Y+54, r24	; 0x36

	u8Address = u8Address & (0x70);
    483a:	8e a9       	ldd	r24, Y+54	; 0x36
    483c:	80 77       	andi	r24, 0x70	; 112
    483e:	8e ab       	std	Y+54, r24	; 0x36

	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_LOW);
    4840:	82 e0       	ldi	r24, 0x02	; 2
    4842:	62 e0       	ldi	r22, 0x02	; 2
    4844:	40 e0       	ldi	r20, 0x00	; 0
    4846:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>
    484a:	80 e0       	ldi	r24, 0x00	; 0
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	a0 ea       	ldi	r26, 0xA0	; 160
    4850:	b0 e4       	ldi	r27, 0x40	; 64
    4852:	8b 87       	std	Y+11, r24	; 0x0b
    4854:	9c 87       	std	Y+12, r25	; 0x0c
    4856:	ad 87       	std	Y+13, r26	; 0x0d
    4858:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    485a:	6b 85       	ldd	r22, Y+11	; 0x0b
    485c:	7c 85       	ldd	r23, Y+12	; 0x0c
    485e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4860:	9e 85       	ldd	r25, Y+14	; 0x0e
    4862:	20 e0       	ldi	r18, 0x00	; 0
    4864:	30 e0       	ldi	r19, 0x00	; 0
    4866:	4a e7       	ldi	r20, 0x7A	; 122
    4868:	53 e4       	ldi	r21, 0x43	; 67
    486a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	8f 83       	std	Y+7, r24	; 0x07
    4874:	98 87       	std	Y+8, r25	; 0x08
    4876:	a9 87       	std	Y+9, r26	; 0x09
    4878:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    487a:	6f 81       	ldd	r22, Y+7	; 0x07
    487c:	78 85       	ldd	r23, Y+8	; 0x08
    487e:	89 85       	ldd	r24, Y+9	; 0x09
    4880:	9a 85       	ldd	r25, Y+10	; 0x0a
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	40 e8       	ldi	r20, 0x80	; 128
    4888:	5f e3       	ldi	r21, 0x3F	; 63
    488a:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    488e:	88 23       	and	r24, r24
    4890:	2c f4       	brge	.+10     	; 0x489c <LCD_u8ReadBusyFlagAndAddress+0x32e>
		__ticks = 1;
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	9e 83       	std	Y+6, r25	; 0x06
    4898:	8d 83       	std	Y+5, r24	; 0x05
    489a:	3f c0       	rjmp	.+126    	; 0x491a <LCD_u8ReadBusyFlagAndAddress+0x3ac>
	else if (__tmp > 65535)
    489c:	6f 81       	ldd	r22, Y+7	; 0x07
    489e:	78 85       	ldd	r23, Y+8	; 0x08
    48a0:	89 85       	ldd	r24, Y+9	; 0x09
    48a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	3f ef       	ldi	r19, 0xFF	; 255
    48a8:	4f e7       	ldi	r20, 0x7F	; 127
    48aa:	57 e4       	ldi	r21, 0x47	; 71
    48ac:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    48b0:	18 16       	cp	r1, r24
    48b2:	4c f5       	brge	.+82     	; 0x4906 <LCD_u8ReadBusyFlagAndAddress+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    48b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    48b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    48ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    48bc:	20 e0       	ldi	r18, 0x00	; 0
    48be:	30 e0       	ldi	r19, 0x00	; 0
    48c0:	40 e2       	ldi	r20, 0x20	; 32
    48c2:	51 e4       	ldi	r21, 0x41	; 65
    48c4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    48c8:	dc 01       	movw	r26, r24
    48ca:	cb 01       	movw	r24, r22
    48cc:	bc 01       	movw	r22, r24
    48ce:	cd 01       	movw	r24, r26
    48d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d4:	dc 01       	movw	r26, r24
    48d6:	cb 01       	movw	r24, r22
    48d8:	9e 83       	std	Y+6, r25	; 0x06
    48da:	8d 83       	std	Y+5, r24	; 0x05
    48dc:	0f c0       	rjmp	.+30     	; 0x48fc <LCD_u8ReadBusyFlagAndAddress+0x38e>
    48de:	89 e1       	ldi	r24, 0x19	; 25
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	9c 83       	std	Y+4, r25	; 0x04
    48e4:	8b 83       	std	Y+3, r24	; 0x03
    48e6:	8b 81       	ldd	r24, Y+3	; 0x03
    48e8:	9c 81       	ldd	r25, Y+4	; 0x04
    48ea:	01 97       	sbiw	r24, 0x01	; 1
    48ec:	f1 f7       	brne	.-4      	; 0x48ea <LCD_u8ReadBusyFlagAndAddress+0x37c>
    48ee:	9c 83       	std	Y+4, r25	; 0x04
    48f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48f2:	8d 81       	ldd	r24, Y+5	; 0x05
    48f4:	9e 81       	ldd	r25, Y+6	; 0x06
    48f6:	01 97       	sbiw	r24, 0x01	; 1
    48f8:	9e 83       	std	Y+6, r25	; 0x06
    48fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48fc:	8d 81       	ldd	r24, Y+5	; 0x05
    48fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4900:	00 97       	sbiw	r24, 0x00	; 0
    4902:	69 f7       	brne	.-38     	; 0x48de <LCD_u8ReadBusyFlagAndAddress+0x370>
    4904:	14 c0       	rjmp	.+40     	; 0x492e <LCD_u8ReadBusyFlagAndAddress+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4906:	6f 81       	ldd	r22, Y+7	; 0x07
    4908:	78 85       	ldd	r23, Y+8	; 0x08
    490a:	89 85       	ldd	r24, Y+9	; 0x09
    490c:	9a 85       	ldd	r25, Y+10	; 0x0a
    490e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	9e 83       	std	Y+6, r25	; 0x06
    4918:	8d 83       	std	Y+5, r24	; 0x05
    491a:	8d 81       	ldd	r24, Y+5	; 0x05
    491c:	9e 81       	ldd	r25, Y+6	; 0x06
    491e:	9a 83       	std	Y+2, r25	; 0x02
    4920:	89 83       	std	Y+1, r24	; 0x01
    4922:	89 81       	ldd	r24, Y+1	; 0x01
    4924:	9a 81       	ldd	r25, Y+2	; 0x02
    4926:	01 97       	sbiw	r24, 0x01	; 1
    4928:	f1 f7       	brne	.-4      	; 0x4926 <LCD_u8ReadBusyFlagAndAddress+0x3b8>
    492a:	9a 83       	std	Y+2, r25	; 0x02
    492c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_vidSetPinVal(CONTROL_PORT,ENABLE_SIG,DIO_HIGH);
    492e:	82 e0       	ldi	r24, 0x02	; 2
    4930:	62 e0       	ldi	r22, 0x02	; 2
    4932:	4f ef       	ldi	r20, 0xFF	; 255
    4934:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <DIO_vidSetPinVal>


	u8 u8Address0 =DIO_u8GetPortVal(DATA_PORT);
    4938:	80 e0       	ldi	r24, 0x00	; 0
    493a:	0e 94 c1 18 	call	0x3182	; 0x3182 <DIO_u8GetPortVal>
    493e:	8d ab       	std	Y+53, r24	; 0x35

	u8Address|= u8Address0>>4;
    4940:	8d a9       	ldd	r24, Y+53	; 0x35
    4942:	98 2f       	mov	r25, r24
    4944:	92 95       	swap	r25
    4946:	9f 70       	andi	r25, 0x0F	; 15
    4948:	8e a9       	ldd	r24, Y+54	; 0x36
    494a:	89 2b       	or	r24, r25
    494c:	8e ab       	std	Y+54, r24	; 0x36

	CLR_BIT(u8Address,7);
    494e:	8e a9       	ldd	r24, Y+54	; 0x36
    4950:	8f 77       	andi	r24, 0x7F	; 127
    4952:	8e ab       	std	Y+54, r24	; 0x36

	DIO_vidSetPortDir(DATA_PORT,DIO_OUTPUT);
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	6f ef       	ldi	r22, 0xFF	; 255
    4958:	0e 94 05 19 	call	0x320a	; 0x320a <DIO_vidSetPortDir>
	return u8Address;
    495c:	8e a9       	ldd	r24, Y+54	; 0x36
}
    495e:	e6 96       	adiw	r28, 0x36	; 54
    4960:	0f b6       	in	r0, 0x3f	; 63
    4962:	f8 94       	cli
    4964:	de bf       	out	0x3e, r29	; 62
    4966:	0f be       	out	0x3f, r0	; 63
    4968:	cd bf       	out	0x3d, r28	; 61
    496a:	cf 91       	pop	r28
    496c:	df 91       	pop	r29
    496e:	08 95       	ret

00004970 <LCD_vidStoreSpecialChar>:

void LCD_vidStoreSpecialChar(u8 *poiPattarn , u8 u8CGRAMIndex)
{
    4970:	df 93       	push	r29
    4972:	cf 93       	push	r28
    4974:	00 d0       	rcall	.+0      	; 0x4976 <LCD_vidStoreSpecialChar+0x6>
    4976:	00 d0       	rcall	.+0      	; 0x4978 <LCD_vidStoreSpecialChar+0x8>
    4978:	00 d0       	rcall	.+0      	; 0x497a <LCD_vidStoreSpecialChar+0xa>
    497a:	cd b7       	in	r28, 0x3d	; 61
    497c:	de b7       	in	r29, 0x3e	; 62
    497e:	9d 83       	std	Y+5, r25	; 0x05
    4980:	8c 83       	std	Y+4, r24	; 0x04
    4982:	6e 83       	std	Y+6, r22	; 0x06
	/*The CGRAM has 64 location And Every 8 Bytes Used For Store One Char
	 * Address Of Char1 = 0x00
	 * Address Of Char1 = 0x08
	 * Address Of Char1 = 0x10(16)
	 * and so on*/
	if(u8CGRAMIndex<8)
    4984:	8e 81       	ldd	r24, Y+6	; 0x06
    4986:	88 30       	cpi	r24, 0x08	; 8
    4988:	78 f5       	brcc	.+94     	; 0x49e8 <LCD_vidStoreSpecialChar+0x78>
	{
		u8 u8OldAddress = LCD_u8ReadBusyFlagAndAddress();
    498a:	0e 94 b7 22 	call	0x456e	; 0x456e <LCD_u8ReadBusyFlagAndAddress>
    498e:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(u8OldAddress,7);
    4990:	8b 81       	ldd	r24, Y+3	; 0x03
    4992:	80 68       	ori	r24, 0x80	; 128
    4994:	8b 83       	std	Y+3, r24	; 0x03
		u8 u8Address = 8 *u8CGRAMIndex;
    4996:	8e 81       	ldd	r24, Y+6	; 0x06
    4998:	88 2f       	mov	r24, r24
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	88 0f       	add	r24, r24
    499e:	99 1f       	adc	r25, r25
    49a0:	88 0f       	add	r24, r24
    49a2:	99 1f       	adc	r25, r25
    49a4:	88 0f       	add	r24, r24
    49a6:	99 1f       	adc	r25, r25
    49a8:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(u8Address,6);
    49aa:	8a 81       	ldd	r24, Y+2	; 0x02
    49ac:	80 64       	ori	r24, 0x40	; 64
    49ae:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(u8Address,7);
    49b0:	8a 81       	ldd	r24, Y+2	; 0x02
    49b2:	8f 77       	andi	r24, 0x7F	; 127
    49b4:	8a 83       	std	Y+2, r24	; 0x02
		//01AddressCounter
		LCD_vidSendCommand(u8Address);
    49b6:	8a 81       	ldd	r24, Y+2	; 0x02
    49b8:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>

		for(u8 u8Index = 0;u8Index < 8 ;u8Index++)
    49bc:	19 82       	std	Y+1, r1	; 0x01
    49be:	0e c0       	rjmp	.+28     	; 0x49dc <LCD_vidStoreSpecialChar+0x6c>
		{
			LCD_vidWriteCharctr(poiPattarn[u8Index]);
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	28 2f       	mov	r18, r24
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	8c 81       	ldd	r24, Y+4	; 0x04
    49c8:	9d 81       	ldd	r25, Y+5	; 0x05
    49ca:	fc 01       	movw	r30, r24
    49cc:	e2 0f       	add	r30, r18
    49ce:	f3 1f       	adc	r31, r19
    49d0:	80 81       	ld	r24, Z
    49d2:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
		SET_BIT(u8Address,6);
		CLR_BIT(u8Address,7);
		//01AddressCounter
		LCD_vidSendCommand(u8Address);

		for(u8 u8Index = 0;u8Index < 8 ;u8Index++)
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
    49d8:	8f 5f       	subi	r24, 0xFF	; 255
    49da:	89 83       	std	Y+1, r24	; 0x01
    49dc:	89 81       	ldd	r24, Y+1	; 0x01
    49de:	88 30       	cpi	r24, 0x08	; 8
    49e0:	78 f3       	brcs	.-34     	; 0x49c0 <LCD_vidStoreSpecialChar+0x50>
		{
			LCD_vidWriteCharctr(poiPattarn[u8Index]);
		}
		//LCD_vidReturnHome();
		LCD_vidSendCommand(u8OldAddress);
    49e2:	8b 81       	ldd	r24, Y+3	; 0x03
    49e4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
	}
}
    49e8:	26 96       	adiw	r28, 0x06	; 6
    49ea:	0f b6       	in	r0, 0x3f	; 63
    49ec:	f8 94       	cli
    49ee:	de bf       	out	0x3e, r29	; 62
    49f0:	0f be       	out	0x3f, r0	; 63
    49f2:	cd bf       	out	0x3d, r28	; 61
    49f4:	cf 91       	pop	r28
    49f6:	df 91       	pop	r29
    49f8:	08 95       	ret

000049fa <LCD_vidDisplaySpecialChar>:

void LCD_vidDisplaySpecialChar(u8 u8CGRAMIndex)

{
    49fa:	df 93       	push	r29
    49fc:	cf 93       	push	r28
    49fe:	0f 92       	push	r0
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	89 83       	std	Y+1, r24	; 0x01
	if(u8CGRAMIndex<8)
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	88 30       	cpi	r24, 0x08	; 8
    4a0a:	18 f4       	brcc	.+6      	; 0x4a12 <LCD_vidDisplaySpecialChar+0x18>
		{
			LCD_vidWriteCharctr(u8CGRAMIndex);
    4a0c:	89 81       	ldd	r24, Y+1	; 0x01
    4a0e:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
		}
}
    4a12:	0f 90       	pop	r0
    4a14:	cf 91       	pop	r28
    4a16:	df 91       	pop	r29
    4a18:	08 95       	ret

00004a1a <LCD_vidClearScrean>:

void LCD_vidClearScrean(void)
{
    4a1a:	df 93       	push	r29
    4a1c:	cf 93       	push	r28
    4a1e:	cd b7       	in	r28, 0x3d	; 61
    4a20:	de b7       	in	r29, 0x3e	; 62
    4a22:	2e 97       	sbiw	r28, 0x0e	; 14
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	f8 94       	cli
    4a28:	de bf       	out	0x3e, r29	; 62
    4a2a:	0f be       	out	0x3f, r0	; 63
    4a2c:	cd bf       	out	0x3d, r28	; 61
	LCD_vidSendCommand(0x01);
    4a2e:	81 e0       	ldi	r24, 0x01	; 1
    4a30:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	a0 e0       	ldi	r26, 0x00	; 0
    4a3a:	b0 e4       	ldi	r27, 0x40	; 64
    4a3c:	8b 87       	std	Y+11, r24	; 0x0b
    4a3e:	9c 87       	std	Y+12, r25	; 0x0c
    4a40:	ad 87       	std	Y+13, r26	; 0x0d
    4a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	30 e0       	ldi	r19, 0x00	; 0
    4a50:	4a e7       	ldi	r20, 0x7A	; 122
    4a52:	53 e4       	ldi	r21, 0x43	; 67
    4a54:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4a58:	dc 01       	movw	r26, r24
    4a5a:	cb 01       	movw	r24, r22
    4a5c:	8f 83       	std	Y+7, r24	; 0x07
    4a5e:	98 87       	std	Y+8, r25	; 0x08
    4a60:	a9 87       	std	Y+9, r26	; 0x09
    4a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a64:	6f 81       	ldd	r22, Y+7	; 0x07
    4a66:	78 85       	ldd	r23, Y+8	; 0x08
    4a68:	89 85       	ldd	r24, Y+9	; 0x09
    4a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a6c:	20 e0       	ldi	r18, 0x00	; 0
    4a6e:	30 e0       	ldi	r19, 0x00	; 0
    4a70:	40 e8       	ldi	r20, 0x80	; 128
    4a72:	5f e3       	ldi	r21, 0x3F	; 63
    4a74:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4a78:	88 23       	and	r24, r24
    4a7a:	2c f4       	brge	.+10     	; 0x4a86 <LCD_vidClearScrean+0x6c>
		__ticks = 1;
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	9e 83       	std	Y+6, r25	; 0x06
    4a82:	8d 83       	std	Y+5, r24	; 0x05
    4a84:	3f c0       	rjmp	.+126    	; 0x4b04 <LCD_vidClearScrean+0xea>
	else if (__tmp > 65535)
    4a86:	6f 81       	ldd	r22, Y+7	; 0x07
    4a88:	78 85       	ldd	r23, Y+8	; 0x08
    4a8a:	89 85       	ldd	r24, Y+9	; 0x09
    4a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a8e:	20 e0       	ldi	r18, 0x00	; 0
    4a90:	3f ef       	ldi	r19, 0xFF	; 255
    4a92:	4f e7       	ldi	r20, 0x7F	; 127
    4a94:	57 e4       	ldi	r21, 0x47	; 71
    4a96:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    4a9a:	18 16       	cp	r1, r24
    4a9c:	4c f5       	brge	.+82     	; 0x4af0 <LCD_vidClearScrean+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aa6:	20 e0       	ldi	r18, 0x00	; 0
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	40 e2       	ldi	r20, 0x20	; 32
    4aac:	51 e4       	ldi	r21, 0x41	; 65
    4aae:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4ab2:	dc 01       	movw	r26, r24
    4ab4:	cb 01       	movw	r24, r22
    4ab6:	bc 01       	movw	r22, r24
    4ab8:	cd 01       	movw	r24, r26
    4aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	9e 83       	std	Y+6, r25	; 0x06
    4ac4:	8d 83       	std	Y+5, r24	; 0x05
    4ac6:	0f c0       	rjmp	.+30     	; 0x4ae6 <LCD_vidClearScrean+0xcc>
    4ac8:	89 e1       	ldi	r24, 0x19	; 25
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	9c 83       	std	Y+4, r25	; 0x04
    4ace:	8b 83       	std	Y+3, r24	; 0x03
    4ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ad4:	01 97       	sbiw	r24, 0x01	; 1
    4ad6:	f1 f7       	brne	.-4      	; 0x4ad4 <LCD_vidClearScrean+0xba>
    4ad8:	9c 83       	std	Y+4, r25	; 0x04
    4ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4adc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ade:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	9e 83       	std	Y+6, r25	; 0x06
    4ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aea:	00 97       	sbiw	r24, 0x00	; 0
    4aec:	69 f7       	brne	.-38     	; 0x4ac8 <LCD_vidClearScrean+0xae>
    4aee:	14 c0       	rjmp	.+40     	; 0x4b18 <LCD_vidClearScrean+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af0:	6f 81       	ldd	r22, Y+7	; 0x07
    4af2:	78 85       	ldd	r23, Y+8	; 0x08
    4af4:	89 85       	ldd	r24, Y+9	; 0x09
    4af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4afc:	dc 01       	movw	r26, r24
    4afe:	cb 01       	movw	r24, r22
    4b00:	9e 83       	std	Y+6, r25	; 0x06
    4b02:	8d 83       	std	Y+5, r24	; 0x05
    4b04:	8d 81       	ldd	r24, Y+5	; 0x05
    4b06:	9e 81       	ldd	r25, Y+6	; 0x06
    4b08:	9a 83       	std	Y+2, r25	; 0x02
    4b0a:	89 83       	std	Y+1, r24	; 0x01
    4b0c:	89 81       	ldd	r24, Y+1	; 0x01
    4b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b10:	01 97       	sbiw	r24, 0x01	; 1
    4b12:	f1 f7       	brne	.-4      	; 0x4b10 <LCD_vidClearScrean+0xf6>
    4b14:	9a 83       	std	Y+2, r25	; 0x02
    4b16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4b18:	2e 96       	adiw	r28, 0x0e	; 14
    4b1a:	0f b6       	in	r0, 0x3f	; 63
    4b1c:	f8 94       	cli
    4b1e:	de bf       	out	0x3e, r29	; 62
    4b20:	0f be       	out	0x3f, r0	; 63
    4b22:	cd bf       	out	0x3d, r28	; 61
    4b24:	cf 91       	pop	r28
    4b26:	df 91       	pop	r29
    4b28:	08 95       	ret

00004b2a <LCD_vidReturnHome>:

void LCD_vidReturnHome(void)
{
    4b2a:	df 93       	push	r29
    4b2c:	cf 93       	push	r28
    4b2e:	cd b7       	in	r28, 0x3d	; 61
    4b30:	de b7       	in	r29, 0x3e	; 62
    4b32:	2e 97       	sbiw	r28, 0x0e	; 14
    4b34:	0f b6       	in	r0, 0x3f	; 63
    4b36:	f8 94       	cli
    4b38:	de bf       	out	0x3e, r29	; 62
    4b3a:	0f be       	out	0x3f, r0	; 63
    4b3c:	cd bf       	out	0x3d, r28	; 61
	LCD_vidSendCommand(0b00000010);
    4b3e:	82 e0       	ldi	r24, 0x02	; 2
    4b40:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	a0 e0       	ldi	r26, 0x00	; 0
    4b4a:	b0 e4       	ldi	r27, 0x40	; 64
    4b4c:	8b 87       	std	Y+11, r24	; 0x0b
    4b4e:	9c 87       	std	Y+12, r25	; 0x0c
    4b50:	ad 87       	std	Y+13, r26	; 0x0d
    4b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	30 e0       	ldi	r19, 0x00	; 0
    4b60:	4a e7       	ldi	r20, 0x7A	; 122
    4b62:	53 e4       	ldi	r21, 0x43	; 67
    4b64:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	8f 83       	std	Y+7, r24	; 0x07
    4b6e:	98 87       	std	Y+8, r25	; 0x08
    4b70:	a9 87       	std	Y+9, r26	; 0x09
    4b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b74:	6f 81       	ldd	r22, Y+7	; 0x07
    4b76:	78 85       	ldd	r23, Y+8	; 0x08
    4b78:	89 85       	ldd	r24, Y+9	; 0x09
    4b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	40 e8       	ldi	r20, 0x80	; 128
    4b82:	5f e3       	ldi	r21, 0x3F	; 63
    4b84:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4b88:	88 23       	and	r24, r24
    4b8a:	2c f4       	brge	.+10     	; 0x4b96 <LCD_vidReturnHome+0x6c>
		__ticks = 1;
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	9e 83       	std	Y+6, r25	; 0x06
    4b92:	8d 83       	std	Y+5, r24	; 0x05
    4b94:	3f c0       	rjmp	.+126    	; 0x4c14 <LCD_vidReturnHome+0xea>
	else if (__tmp > 65535)
    4b96:	6f 81       	ldd	r22, Y+7	; 0x07
    4b98:	78 85       	ldd	r23, Y+8	; 0x08
    4b9a:	89 85       	ldd	r24, Y+9	; 0x09
    4b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
    4ba0:	3f ef       	ldi	r19, 0xFF	; 255
    4ba2:	4f e7       	ldi	r20, 0x7F	; 127
    4ba4:	57 e4       	ldi	r21, 0x47	; 71
    4ba6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__gtsf2>
    4baa:	18 16       	cp	r1, r24
    4bac:	4c f5       	brge	.+82     	; 0x4c00 <LCD_vidReturnHome+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	40 e2       	ldi	r20, 0x20	; 32
    4bbc:	51 e4       	ldi	r21, 0x41	; 65
    4bbe:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	cb 01       	movw	r24, r22
    4bc6:	bc 01       	movw	r22, r24
    4bc8:	cd 01       	movw	r24, r26
    4bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	9e 83       	std	Y+6, r25	; 0x06
    4bd4:	8d 83       	std	Y+5, r24	; 0x05
    4bd6:	0f c0       	rjmp	.+30     	; 0x4bf6 <LCD_vidReturnHome+0xcc>
    4bd8:	89 e1       	ldi	r24, 0x19	; 25
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	9c 83       	std	Y+4, r25	; 0x04
    4bde:	8b 83       	std	Y+3, r24	; 0x03
    4be0:	8b 81       	ldd	r24, Y+3	; 0x03
    4be2:	9c 81       	ldd	r25, Y+4	; 0x04
    4be4:	01 97       	sbiw	r24, 0x01	; 1
    4be6:	f1 f7       	brne	.-4      	; 0x4be4 <LCD_vidReturnHome+0xba>
    4be8:	9c 83       	std	Y+4, r25	; 0x04
    4bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bec:	8d 81       	ldd	r24, Y+5	; 0x05
    4bee:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	9e 83       	std	Y+6, r25	; 0x06
    4bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfa:	00 97       	sbiw	r24, 0x00	; 0
    4bfc:	69 f7       	brne	.-38     	; 0x4bd8 <LCD_vidReturnHome+0xae>
    4bfe:	14 c0       	rjmp	.+40     	; 0x4c28 <LCD_vidReturnHome+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c00:	6f 81       	ldd	r22, Y+7	; 0x07
    4c02:	78 85       	ldd	r23, Y+8	; 0x08
    4c04:	89 85       	ldd	r24, Y+9	; 0x09
    4c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c0c:	dc 01       	movw	r26, r24
    4c0e:	cb 01       	movw	r24, r22
    4c10:	9e 83       	std	Y+6, r25	; 0x06
    4c12:	8d 83       	std	Y+5, r24	; 0x05
    4c14:	8d 81       	ldd	r24, Y+5	; 0x05
    4c16:	9e 81       	ldd	r25, Y+6	; 0x06
    4c18:	9a 83       	std	Y+2, r25	; 0x02
    4c1a:	89 83       	std	Y+1, r24	; 0x01
    4c1c:	89 81       	ldd	r24, Y+1	; 0x01
    4c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c20:	01 97       	sbiw	r24, 0x01	; 1
    4c22:	f1 f7       	brne	.-4      	; 0x4c20 <LCD_vidReturnHome+0xf6>
    4c24:	9a 83       	std	Y+2, r25	; 0x02
    4c26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4c28:	2e 96       	adiw	r28, 0x0e	; 14
    4c2a:	0f b6       	in	r0, 0x3f	; 63
    4c2c:	f8 94       	cli
    4c2e:	de bf       	out	0x3e, r29	; 62
    4c30:	0f be       	out	0x3f, r0	; 63
    4c32:	cd bf       	out	0x3d, r28	; 61
    4c34:	cf 91       	pop	r28
    4c36:	df 91       	pop	r29
    4c38:	08 95       	ret

00004c3a <LCD_vidWriteString>:

void LCD_vidWriteString (u8* pu8StringCpy)
{
    4c3a:	df 93       	push	r29
    4c3c:	cf 93       	push	r28
    4c3e:	00 d0       	rcall	.+0      	; 0x4c40 <LCD_vidWriteString+0x6>
    4c40:	0f 92       	push	r0
    4c42:	cd b7       	in	r28, 0x3d	; 61
    4c44:	de b7       	in	r29, 0x3e	; 62
    4c46:	9b 83       	std	Y+3, r25	; 0x03
    4c48:	8a 83       	std	Y+2, r24	; 0x02
	/*Check If The Coordinates Is Outside The LCD */
	u8 u8Index =0;
    4c4a:	19 82       	std	Y+1, r1	; 0x01
    4c4c:	0e c0       	rjmp	.+28     	; 0x4c6a <LCD_vidWriteString+0x30>
	/*Check If The String Finished OR The LCD Cells Finished */
	while(pu8StringCpy[u8Index]!='\0')
	{
		LCD_vidWriteCharctr(pu8StringCpy[u8Index]);
    4c4e:	89 81       	ldd	r24, Y+1	; 0x01
    4c50:	28 2f       	mov	r18, r24
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	8a 81       	ldd	r24, Y+2	; 0x02
    4c56:	9b 81       	ldd	r25, Y+3	; 0x03
    4c58:	fc 01       	movw	r30, r24
    4c5a:	e2 0f       	add	r30, r18
    4c5c:	f3 1f       	adc	r31, r19
    4c5e:	80 81       	ld	r24, Z
    4c60:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
		u8Index++;
    4c64:	89 81       	ldd	r24, Y+1	; 0x01
    4c66:	8f 5f       	subi	r24, 0xFF	; 255
    4c68:	89 83       	std	Y+1, r24	; 0x01
void LCD_vidWriteString (u8* pu8StringCpy)
{
	/*Check If The Coordinates Is Outside The LCD */
	u8 u8Index =0;
	/*Check If The String Finished OR The LCD Cells Finished */
	while(pu8StringCpy[u8Index]!='\0')
    4c6a:	89 81       	ldd	r24, Y+1	; 0x01
    4c6c:	28 2f       	mov	r18, r24
    4c6e:	30 e0       	ldi	r19, 0x00	; 0
    4c70:	8a 81       	ldd	r24, Y+2	; 0x02
    4c72:	9b 81       	ldd	r25, Y+3	; 0x03
    4c74:	fc 01       	movw	r30, r24
    4c76:	e2 0f       	add	r30, r18
    4c78:	f3 1f       	adc	r31, r19
    4c7a:	80 81       	ld	r24, Z
    4c7c:	88 23       	and	r24, r24
    4c7e:	39 f7       	brne	.-50     	; 0x4c4e <LCD_vidWriteString+0x14>
	{
		LCD_vidWriteCharctr(pu8StringCpy[u8Index]);
		u8Index++;
	}

}
    4c80:	0f 90       	pop	r0
    4c82:	0f 90       	pop	r0
    4c84:	0f 90       	pop	r0
    4c86:	cf 91       	pop	r28
    4c88:	df 91       	pop	r29
    4c8a:	08 95       	ret

00004c8c <LCD_vidWriteflt>:

void LCD_vidWriteflt(f32 f32DataCpy)
{
    4c8c:	8f 92       	push	r8
    4c8e:	9f 92       	push	r9
    4c90:	af 92       	push	r10
    4c92:	bf 92       	push	r11
    4c94:	cf 92       	push	r12
    4c96:	df 92       	push	r13
    4c98:	ef 92       	push	r14
    4c9a:	ff 92       	push	r15
    4c9c:	0f 93       	push	r16
    4c9e:	1f 93       	push	r17
    4ca0:	df 93       	push	r29
    4ca2:	cf 93       	push	r28
    4ca4:	cd b7       	in	r28, 0x3d	; 61
    4ca6:	de b7       	in	r29, 0x3e	; 62
    4ca8:	68 97       	sbiw	r28, 0x18	; 24
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	f8 94       	cli
    4cae:	de bf       	out	0x3e, r29	; 62
    4cb0:	0f be       	out	0x3f, r0	; 63
    4cb2:	cd bf       	out	0x3d, r28	; 61
    4cb4:	6d 8b       	std	Y+21, r22	; 0x15
    4cb6:	7e 8b       	std	Y+22, r23	; 0x16
    4cb8:	8f 8b       	std	Y+23, r24	; 0x17
    4cba:	98 8f       	std	Y+24, r25	; 0x18
	lu32 u32DataCpyInt ;
if(f32DataCpy<0)
    4cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    4cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    4cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	40 e0       	ldi	r20, 0x00	; 0
    4cca:	50 e0       	ldi	r21, 0x00	; 0
    4ccc:	0e 94 b2 11 	call	0x2364	; 0x2364 <__ltsf2>
    4cd0:	88 23       	and	r24, r24
    4cd2:	c4 f5       	brge	.+112    	; 0x4d44 <LCD_vidWriteflt+0xb8>
{
	LCD_vidWriteCharctr('-');
    4cd4:	8d e2       	ldi	r24, 0x2D	; 45
    4cd6:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	u32DataCpyInt =  (lu32)(0-(f32DataCpy *Get_Power(10,FLOAT_NUMS)));
    4cda:	8a e0       	ldi	r24, 0x0A	; 10
    4cdc:	60 e0       	ldi	r22, 0x00	; 0
    4cde:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <Get_Power>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	bc 01       	movw	r22, r24
    4ce8:	cd 01       	movw	r24, r26
    4cea:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    4cee:	dc 01       	movw	r26, r24
    4cf0:	cb 01       	movw	r24, r22
    4cf2:	bc 01       	movw	r22, r24
    4cf4:	cd 01       	movw	r24, r26
    4cf6:	2d 89       	ldd	r18, Y+21	; 0x15
    4cf8:	3e 89       	ldd	r19, Y+22	; 0x16
    4cfa:	4f 89       	ldd	r20, Y+23	; 0x17
    4cfc:	58 8d       	ldd	r21, Y+24	; 0x18
    4cfe:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	9c 01       	movw	r18, r24
    4d08:	ad 01       	movw	r20, r26
    4d0a:	60 e0       	ldi	r22, 0x00	; 0
    4d0c:	70 e0       	ldi	r23, 0x00	; 0
    4d0e:	80 e0       	ldi	r24, 0x00	; 0
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__subsf3>
    4d16:	dc 01       	movw	r26, r24
    4d18:	cb 01       	movw	r24, r22
    4d1a:	bc 01       	movw	r22, r24
    4d1c:	cd 01       	movw	r24, r26
    4d1e:	0e 94 75 00 	call	0xea	; 0xea <__fixunssfdi>
    4d22:	a2 2e       	mov	r10, r18
    4d24:	b3 2e       	mov	r11, r19
    4d26:	c4 2e       	mov	r12, r20
    4d28:	d5 2e       	mov	r13, r21
    4d2a:	e6 2e       	mov	r14, r22
    4d2c:	f7 2e       	mov	r15, r23
    4d2e:	08 2f       	mov	r16, r24
    4d30:	19 2f       	mov	r17, r25
    4d32:	ab 82       	std	Y+3, r10	; 0x03
    4d34:	bc 82       	std	Y+4, r11	; 0x04
    4d36:	cd 82       	std	Y+5, r12	; 0x05
    4d38:	de 82       	std	Y+6, r13	; 0x06
    4d3a:	ef 82       	std	Y+7, r14	; 0x07
    4d3c:	f8 86       	std	Y+8, r15	; 0x08
    4d3e:	09 87       	std	Y+9, r16	; 0x09
    4d40:	1a 87       	std	Y+10, r17	; 0x0a
    4d42:	2a c0       	rjmp	.+84     	; 0x4d98 <LCD_vidWriteflt+0x10c>
}
else
{
	u32DataCpyInt =  (lu32)(f32DataCpy *Get_Power(10,FLOAT_NUMS));
    4d44:	8a e0       	ldi	r24, 0x0A	; 10
    4d46:	60 e0       	ldi	r22, 0x00	; 0
    4d48:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <Get_Power>
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	cb 01       	movw	r24, r22
    4d50:	bc 01       	movw	r22, r24
    4d52:	cd 01       	movw	r24, r26
    4d54:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    4d58:	dc 01       	movw	r26, r24
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	bc 01       	movw	r22, r24
    4d5e:	cd 01       	movw	r24, r26
    4d60:	2d 89       	ldd	r18, Y+21	; 0x15
    4d62:	3e 89       	ldd	r19, Y+22	; 0x16
    4d64:	4f 89       	ldd	r20, Y+23	; 0x17
    4d66:	58 8d       	ldd	r21, Y+24	; 0x18
    4d68:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__mulsf3>
    4d6c:	dc 01       	movw	r26, r24
    4d6e:	cb 01       	movw	r24, r22
    4d70:	bc 01       	movw	r22, r24
    4d72:	cd 01       	movw	r24, r26
    4d74:	0e 94 75 00 	call	0xea	; 0xea <__fixunssfdi>
    4d78:	a2 2e       	mov	r10, r18
    4d7a:	b3 2e       	mov	r11, r19
    4d7c:	c4 2e       	mov	r12, r20
    4d7e:	d5 2e       	mov	r13, r21
    4d80:	e6 2e       	mov	r14, r22
    4d82:	f7 2e       	mov	r15, r23
    4d84:	08 2f       	mov	r16, r24
    4d86:	19 2f       	mov	r17, r25
    4d88:	ab 82       	std	Y+3, r10	; 0x03
    4d8a:	bc 82       	std	Y+4, r11	; 0x04
    4d8c:	cd 82       	std	Y+5, r12	; 0x05
    4d8e:	de 82       	std	Y+6, r13	; 0x06
    4d90:	ef 82       	std	Y+7, r14	; 0x07
    4d92:	f8 86       	std	Y+8, r15	; 0x08
    4d94:	09 87       	std	Y+9, r16	; 0x09
    4d96:	1a 87       	std	Y+10, r17	; 0x0a
}

	if(u32DataCpyInt != 0)
    4d98:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d9c:	89 2b       	or	r24, r25
    4d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    4da0:	89 2b       	or	r24, r25
    4da2:	9e 81       	ldd	r25, Y+6	; 0x06
    4da4:	89 2b       	or	r24, r25
    4da6:	9f 81       	ldd	r25, Y+7	; 0x07
    4da8:	89 2b       	or	r24, r25
    4daa:	98 85       	ldd	r25, Y+8	; 0x08
    4dac:	89 2b       	or	r24, r25
    4dae:	99 85       	ldd	r25, Y+9	; 0x09
    4db0:	89 2b       	or	r24, r25
    4db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4db4:	89 2b       	or	r24, r25
    4db6:	88 23       	and	r24, r24
    4db8:	09 f4       	brne	.+2      	; 0x4dbc <LCD_vidWriteflt+0x130>
    4dba:	b2 c0       	rjmp	.+356    	; 0x4f20 <LCD_vidWriteflt+0x294>
	{
		u8 array[10] = {0};
    4dbc:	8a e0       	ldi	r24, 0x0A	; 10
    4dbe:	fe 01       	movw	r30, r28
    4dc0:	3b 96       	adiw	r30, 0x0b	; 11
    4dc2:	df 01       	movw	r26, r30
    4dc4:	98 2f       	mov	r25, r24
    4dc6:	1d 92       	st	X+, r1
    4dc8:	9a 95       	dec	r25
    4dca:	e9 f7       	brne	.-6      	; 0x4dc6 <LCD_vidWriteflt+0x13a>
		u8 index = 0;
    4dcc:	1a 82       	std	Y+2, r1	; 0x02
    4dce:	69 c0       	rjmp	.+210    	; 0x4ea2 <LCD_vidWriteflt+0x216>
		while(u32DataCpyInt !=0)
		{
			array[index] = (u32DataCpyInt%10)+('0');
    4dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd2:	88 2e       	mov	r8, r24
    4dd4:	99 24       	eor	r9, r9
    4dd6:	ab 80       	ldd	r10, Y+3	; 0x03
    4dd8:	bc 80       	ldd	r11, Y+4	; 0x04
    4dda:	cd 80       	ldd	r12, Y+5	; 0x05
    4ddc:	de 80       	ldd	r13, Y+6	; 0x06
    4dde:	ef 80       	ldd	r14, Y+7	; 0x07
    4de0:	f8 84       	ldd	r15, Y+8	; 0x08
    4de2:	09 85       	ldd	r16, Y+9	; 0x09
    4de4:	1a 85       	ldd	r17, Y+10	; 0x0a
    4de6:	2a 2d       	mov	r18, r10
    4de8:	3b 2d       	mov	r19, r11
    4dea:	4c 2d       	mov	r20, r12
    4dec:	5d 2d       	mov	r21, r13
    4dee:	6e 2d       	mov	r22, r14
    4df0:	7f 2d       	mov	r23, r15
    4df2:	80 2f       	mov	r24, r16
    4df4:	91 2f       	mov	r25, r17
    4df6:	0f 2e       	mov	r0, r31
    4df8:	fa e0       	ldi	r31, 0x0A	; 10
    4dfa:	af 2e       	mov	r10, r31
    4dfc:	f0 2d       	mov	r31, r0
    4dfe:	bb 24       	eor	r11, r11
    4e00:	cc 24       	eor	r12, r12
    4e02:	dd 24       	eor	r13, r13
    4e04:	ee 24       	eor	r14, r14
    4e06:	ff 24       	eor	r15, r15
    4e08:	00 e0       	ldi	r16, 0x00	; 0
    4e0a:	10 e0       	ldi	r17, 0x00	; 0
    4e0c:	0e 94 92 07 	call	0xf24	; 0xf24 <__umoddi3>
    4e10:	a2 2e       	mov	r10, r18
    4e12:	b3 2e       	mov	r11, r19
    4e14:	c4 2e       	mov	r12, r20
    4e16:	d5 2e       	mov	r13, r21
    4e18:	e6 2e       	mov	r14, r22
    4e1a:	f7 2e       	mov	r15, r23
    4e1c:	08 2f       	mov	r16, r24
    4e1e:	19 2f       	mov	r17, r25
    4e20:	2a 2d       	mov	r18, r10
    4e22:	3b 2d       	mov	r19, r11
    4e24:	4c 2d       	mov	r20, r12
    4e26:	5d 2d       	mov	r21, r13
    4e28:	6e 2d       	mov	r22, r14
    4e2a:	7f 2d       	mov	r23, r15
    4e2c:	80 2f       	mov	r24, r16
    4e2e:	91 2f       	mov	r25, r17
    4e30:	82 2f       	mov	r24, r18
    4e32:	28 2f       	mov	r18, r24
    4e34:	20 5d       	subi	r18, 0xD0	; 208
    4e36:	ce 01       	movw	r24, r28
    4e38:	0b 96       	adiw	r24, 0x0b	; 11
    4e3a:	fc 01       	movw	r30, r24
    4e3c:	e8 0d       	add	r30, r8
    4e3e:	f9 1d       	adc	r31, r9
    4e40:	20 83       	st	Z, r18
			u32DataCpyInt=u32DataCpyInt/10;
    4e42:	ab 80       	ldd	r10, Y+3	; 0x03
    4e44:	bc 80       	ldd	r11, Y+4	; 0x04
    4e46:	cd 80       	ldd	r12, Y+5	; 0x05
    4e48:	de 80       	ldd	r13, Y+6	; 0x06
    4e4a:	ef 80       	ldd	r14, Y+7	; 0x07
    4e4c:	f8 84       	ldd	r15, Y+8	; 0x08
    4e4e:	09 85       	ldd	r16, Y+9	; 0x09
    4e50:	1a 85       	ldd	r17, Y+10	; 0x0a
    4e52:	2a 2d       	mov	r18, r10
    4e54:	3b 2d       	mov	r19, r11
    4e56:	4c 2d       	mov	r20, r12
    4e58:	5d 2d       	mov	r21, r13
    4e5a:	6e 2d       	mov	r22, r14
    4e5c:	7f 2d       	mov	r23, r15
    4e5e:	80 2f       	mov	r24, r16
    4e60:	91 2f       	mov	r25, r17
    4e62:	0f 2e       	mov	r0, r31
    4e64:	fa e0       	ldi	r31, 0x0A	; 10
    4e66:	af 2e       	mov	r10, r31
    4e68:	f0 2d       	mov	r31, r0
    4e6a:	bb 24       	eor	r11, r11
    4e6c:	cc 24       	eor	r12, r12
    4e6e:	dd 24       	eor	r13, r13
    4e70:	ee 24       	eor	r14, r14
    4e72:	ff 24       	eor	r15, r15
    4e74:	00 e0       	ldi	r16, 0x00	; 0
    4e76:	10 e0       	ldi	r17, 0x00	; 0
    4e78:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivdi3>
    4e7c:	a2 2e       	mov	r10, r18
    4e7e:	b3 2e       	mov	r11, r19
    4e80:	c4 2e       	mov	r12, r20
    4e82:	d5 2e       	mov	r13, r21
    4e84:	e6 2e       	mov	r14, r22
    4e86:	f7 2e       	mov	r15, r23
    4e88:	08 2f       	mov	r16, r24
    4e8a:	19 2f       	mov	r17, r25
    4e8c:	ab 82       	std	Y+3, r10	; 0x03
    4e8e:	bc 82       	std	Y+4, r11	; 0x04
    4e90:	cd 82       	std	Y+5, r12	; 0x05
    4e92:	de 82       	std	Y+6, r13	; 0x06
    4e94:	ef 82       	std	Y+7, r14	; 0x07
    4e96:	f8 86       	std	Y+8, r15	; 0x08
    4e98:	09 87       	std	Y+9, r16	; 0x09
    4e9a:	1a 87       	std	Y+10, r17	; 0x0a
			index++;
    4e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ea0:	8a 83       	std	Y+2, r24	; 0x02

	if(u32DataCpyInt != 0)
	{
		u8 array[10] = {0};
		u8 index = 0;
		while(u32DataCpyInt !=0)
    4ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ea6:	89 2b       	or	r24, r25
    4ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    4eaa:	89 2b       	or	r24, r25
    4eac:	9e 81       	ldd	r25, Y+6	; 0x06
    4eae:	89 2b       	or	r24, r25
    4eb0:	9f 81       	ldd	r25, Y+7	; 0x07
    4eb2:	89 2b       	or	r24, r25
    4eb4:	98 85       	ldd	r25, Y+8	; 0x08
    4eb6:	89 2b       	or	r24, r25
    4eb8:	99 85       	ldd	r25, Y+9	; 0x09
    4eba:	89 2b       	or	r24, r25
    4ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ebe:	89 2b       	or	r24, r25
    4ec0:	88 23       	and	r24, r24
    4ec2:	09 f0       	breq	.+2      	; 0x4ec6 <LCD_vidWriteflt+0x23a>
    4ec4:	85 cf       	rjmp	.-246    	; 0x4dd0 <LCD_vidWriteflt+0x144>
			array[index] = (u32DataCpyInt%10)+('0');
			u32DataCpyInt=u32DataCpyInt/10;
			index++;
		}

		u8 c0 = index;
    4ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec8:	89 83       	std	Y+1, r24	; 0x01
    4eca:	26 c0       	rjmp	.+76     	; 0x4f18 <LCD_vidWriteflt+0x28c>
		for(;c0>0;c0--)
		{
			if(c0 != FLOAT_NUMS)
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	88 23       	and	r24, r24
    4ed0:	79 f0       	breq	.+30     	; 0x4ef0 <LCD_vidWriteflt+0x264>
			{
			LCD_vidWriteCharctr(array[c0-1]);
    4ed2:	89 81       	ldd	r24, Y+1	; 0x01
    4ed4:	88 2f       	mov	r24, r24
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	9c 01       	movw	r18, r24
    4eda:	21 50       	subi	r18, 0x01	; 1
    4edc:	30 40       	sbci	r19, 0x00	; 0
    4ede:	ce 01       	movw	r24, r28
    4ee0:	0b 96       	adiw	r24, 0x0b	; 11
    4ee2:	fc 01       	movw	r30, r24
    4ee4:	e2 0f       	add	r30, r18
    4ee6:	f3 1f       	adc	r31, r19
    4ee8:	80 81       	ld	r24, Z
    4eea:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
    4eee:	11 c0       	rjmp	.+34     	; 0x4f12 <LCD_vidWriteflt+0x286>
			}
			else
			{
			LCD_vidWriteCharctr('.');
    4ef0:	8e e2       	ldi	r24, 0x2E	; 46
    4ef2:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
			LCD_vidWriteCharctr(array[c0-1]);
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
    4ef8:	88 2f       	mov	r24, r24
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	9c 01       	movw	r18, r24
    4efe:	21 50       	subi	r18, 0x01	; 1
    4f00:	30 40       	sbci	r19, 0x00	; 0
    4f02:	ce 01       	movw	r24, r28
    4f04:	0b 96       	adiw	r24, 0x0b	; 11
    4f06:	fc 01       	movw	r30, r24
    4f08:	e2 0f       	add	r30, r18
    4f0a:	f3 1f       	adc	r31, r19
    4f0c:	80 81       	ld	r24, Z
    4f0e:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
			u32DataCpyInt=u32DataCpyInt/10;
			index++;
		}

		u8 c0 = index;
		for(;c0>0;c0--)
    4f12:	89 81       	ldd	r24, Y+1	; 0x01
    4f14:	81 50       	subi	r24, 0x01	; 1
    4f16:	89 83       	std	Y+1, r24	; 0x01
    4f18:	89 81       	ldd	r24, Y+1	; 0x01
    4f1a:	88 23       	and	r24, r24
    4f1c:	b9 f6       	brne	.-82     	; 0x4ecc <LCD_vidWriteflt+0x240>
    4f1e:	03 c0       	rjmp	.+6      	; 0x4f26 <LCD_vidWriteflt+0x29a>
		}
	}
	else
	{//LCD_vidWriteCharctr('0');
	//LCD_vidWriteCharctr('.');
	LCD_vidWriteCharctr('0');}
    4f20:	80 e3       	ldi	r24, 0x30	; 48
    4f22:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>

}
    4f26:	68 96       	adiw	r28, 0x18	; 24
    4f28:	0f b6       	in	r0, 0x3f	; 63
    4f2a:	f8 94       	cli
    4f2c:	de bf       	out	0x3e, r29	; 62
    4f2e:	0f be       	out	0x3f, r0	; 63
    4f30:	cd bf       	out	0x3d, r28	; 61
    4f32:	cf 91       	pop	r28
    4f34:	df 91       	pop	r29
    4f36:	1f 91       	pop	r17
    4f38:	0f 91       	pop	r16
    4f3a:	ff 90       	pop	r15
    4f3c:	ef 90       	pop	r14
    4f3e:	df 90       	pop	r13
    4f40:	cf 90       	pop	r12
    4f42:	bf 90       	pop	r11
    4f44:	af 90       	pop	r10
    4f46:	9f 90       	pop	r9
    4f48:	8f 90       	pop	r8
    4f4a:	08 95       	ret

00004f4c <Get_Power>:

u32 Get_Power(u8 value ,u8 power)
{
    4f4c:	df 93       	push	r29
    4f4e:	cf 93       	push	r28
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
    4f54:	27 97       	sbiw	r28, 0x07	; 7
    4f56:	0f b6       	in	r0, 0x3f	; 63
    4f58:	f8 94       	cli
    4f5a:	de bf       	out	0x3e, r29	; 62
    4f5c:	0f be       	out	0x3f, r0	; 63
    4f5e:	cd bf       	out	0x3d, r28	; 61
    4f60:	8e 83       	std	Y+6, r24	; 0x06
    4f62:	6f 83       	std	Y+7, r22	; 0x07
	u32 Ret = 1;
    4f64:	81 e0       	ldi	r24, 0x01	; 1
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	a0 e0       	ldi	r26, 0x00	; 0
    4f6a:	b0 e0       	ldi	r27, 0x00	; 0
    4f6c:	8a 83       	std	Y+2, r24	; 0x02
    4f6e:	9b 83       	std	Y+3, r25	; 0x03
    4f70:	ac 83       	std	Y+4, r26	; 0x04
    4f72:	bd 83       	std	Y+5, r27	; 0x05
	for(u8 counter = power;counter>0;counter--)
    4f74:	8f 81       	ldd	r24, Y+7	; 0x07
    4f76:	89 83       	std	Y+1, r24	; 0x01
    4f78:	16 c0       	rjmp	.+44     	; 0x4fa6 <Get_Power+0x5a>
	{
		Ret = Ret *value;
    4f7a:	8e 81       	ldd	r24, Y+6	; 0x06
    4f7c:	28 2f       	mov	r18, r24
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	40 e0       	ldi	r20, 0x00	; 0
    4f82:	50 e0       	ldi	r21, 0x00	; 0
    4f84:	8a 81       	ldd	r24, Y+2	; 0x02
    4f86:	9b 81       	ldd	r25, Y+3	; 0x03
    4f88:	ac 81       	ldd	r26, Y+4	; 0x04
    4f8a:	bd 81       	ldd	r27, Y+5	; 0x05
    4f8c:	bc 01       	movw	r22, r24
    4f8e:	cd 01       	movw	r24, r26
    4f90:	0e 94 55 36 	call	0x6caa	; 0x6caa <__mulsi3>
    4f94:	dc 01       	movw	r26, r24
    4f96:	cb 01       	movw	r24, r22
    4f98:	8a 83       	std	Y+2, r24	; 0x02
    4f9a:	9b 83       	std	Y+3, r25	; 0x03
    4f9c:	ac 83       	std	Y+4, r26	; 0x04
    4f9e:	bd 83       	std	Y+5, r27	; 0x05
}

u32 Get_Power(u8 value ,u8 power)
{
	u32 Ret = 1;
	for(u8 counter = power;counter>0;counter--)
    4fa0:	89 81       	ldd	r24, Y+1	; 0x01
    4fa2:	81 50       	subi	r24, 0x01	; 1
    4fa4:	89 83       	std	Y+1, r24	; 0x01
    4fa6:	89 81       	ldd	r24, Y+1	; 0x01
    4fa8:	88 23       	and	r24, r24
    4faa:	39 f7       	brne	.-50     	; 0x4f7a <Get_Power+0x2e>
	{
		Ret = Ret *value;
	}
	return Ret;
    4fac:	8a 81       	ldd	r24, Y+2	; 0x02
    4fae:	9b 81       	ldd	r25, Y+3	; 0x03
    4fb0:	ac 81       	ldd	r26, Y+4	; 0x04
    4fb2:	bd 81       	ldd	r27, Y+5	; 0x05
}
    4fb4:	bc 01       	movw	r22, r24
    4fb6:	cd 01       	movw	r24, r26
    4fb8:	27 96       	adiw	r28, 0x07	; 7
    4fba:	0f b6       	in	r0, 0x3f	; 63
    4fbc:	f8 94       	cli
    4fbe:	de bf       	out	0x3e, r29	; 62
    4fc0:	0f be       	out	0x3f, r0	; 63
    4fc2:	cd bf       	out	0x3d, r28	; 61
    4fc4:	cf 91       	pop	r28
    4fc6:	df 91       	pop	r29
    4fc8:	08 95       	ret

00004fca <TIMER0_vidInit>:




void TIMER0_vidInit()
{
    4fca:	df 93       	push	r29
    4fcc:	cf 93       	push	r28
    4fce:	cd b7       	in	r28, 0x3d	; 61
    4fd0:	de b7       	in	r29, 0x3e	; 62
#elif(TIMER0_MODE == PHASCORCT_MODE0 )
	CLR_BIT(TCCR0_REG,3);
	SET_BIT(TCCR0_REG,6);

#elif(TIMER0_MODE == COMPARE_MODE0 )
	SET_BIT(TCCR0_REG,3);
    4fd2:	a3 e5       	ldi	r26, 0x53	; 83
    4fd4:	b0 e0       	ldi	r27, 0x00	; 0
    4fd6:	e3 e5       	ldi	r30, 0x53	; 83
    4fd8:	f0 e0       	ldi	r31, 0x00	; 0
    4fda:	80 81       	ld	r24, Z
    4fdc:	88 60       	ori	r24, 0x08	; 8
    4fde:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,6);
    4fe0:	a3 e5       	ldi	r26, 0x53	; 83
    4fe2:	b0 e0       	ldi	r27, 0x00	; 0
    4fe4:	e3 e5       	ldi	r30, 0x53	; 83
    4fe6:	f0 e0       	ldi	r31, 0x00	; 0
    4fe8:	80 81       	ld	r24, Z
    4fea:	8f 7b       	andi	r24, 0xBF	; 191
    4fec:	8c 93       	st	X, r24

#elif(TIMER0_MODE == FASTPWM_MODE0 )
	SET_BIT(TCCR0_REG,3);
	SET_BIT(TCCR0_REG,6);
#endif
}
    4fee:	cf 91       	pop	r28
    4ff0:	df 91       	pop	r29
    4ff2:	08 95       	ret

00004ff4 <TIMER0_vidStartTimer_OverFlowMode>:


void TIMER0_vidStartTimer_OverFlowMode(u8 u8InitVal)
{
    4ff4:	df 93       	push	r29
    4ff6:	cf 93       	push	r28
    4ff8:	0f 92       	push	r0
    4ffa:	cd b7       	in	r28, 0x3d	; 61
    4ffc:	de b7       	in	r29, 0x3e	; 62
    4ffe:	89 83       	std	Y+1, r24	; 0x01
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetInitReg(u8InitVal);
    5000:	89 81       	ldd	r24, Y+1	; 0x01
    5002:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <TIMER0_vidSetInitReg>

/**********************************************/
/**************Enable Interrupt ***************/
/**********************************************/
SET_BIT(SR_REG,7);  	//Global Interrupt
    5006:	af e5       	ldi	r26, 0x5F	; 95
    5008:	b0 e0       	ldi	r27, 0x00	; 0
    500a:	ef e5       	ldi	r30, 0x5F	; 95
    500c:	f0 e0       	ldi	r31, 0x00	; 0
    500e:	80 81       	ld	r24, Z
    5010:	80 68       	ori	r24, 0x80	; 128
    5012:	8c 93       	st	X, r24
SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    5014:	a9 e5       	ldi	r26, 0x59	; 89
    5016:	b0 e0       	ldi	r27, 0x00	; 0
    5018:	e9 e5       	ldi	r30, 0x59	; 89
    501a:	f0 e0       	ldi	r31, 0x00	; 0
    501c:	80 81       	ld	r24, Z
    501e:	81 60       	ori	r24, 0x01	; 1
    5020:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
	CLR_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#elif(CLOCK_SELECT == CLK_8_PRESCALER )
	CLR_BIT(TCCR0_REG,2);
    5022:	a3 e5       	ldi	r26, 0x53	; 83
    5024:	b0 e0       	ldi	r27, 0x00	; 0
    5026:	e3 e5       	ldi	r30, 0x53	; 83
    5028:	f0 e0       	ldi	r31, 0x00	; 0
    502a:	80 81       	ld	r24, Z
    502c:	8b 7f       	andi	r24, 0xFB	; 251
    502e:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
    5030:	a3 e5       	ldi	r26, 0x53	; 83
    5032:	b0 e0       	ldi	r27, 0x00	; 0
    5034:	e3 e5       	ldi	r30, 0x53	; 83
    5036:	f0 e0       	ldi	r31, 0x00	; 0
    5038:	80 81       	ld	r24, Z
    503a:	82 60       	ori	r24, 0x02	; 2
    503c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    503e:	a3 e5       	ldi	r26, 0x53	; 83
    5040:	b0 e0       	ldi	r27, 0x00	; 0
    5042:	e3 e5       	ldi	r30, 0x53	; 83
    5044:	f0 e0       	ldi	r31, 0x00	; 0
    5046:	80 81       	ld	r24, Z
    5048:	8e 7f       	andi	r24, 0xFE	; 254
    504a:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,2);
	SET_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#endif
}
    504c:	0f 90       	pop	r0
    504e:	cf 91       	pop	r28
    5050:	df 91       	pop	r29
    5052:	08 95       	ret

00005054 <TIMER0_vidStartTimer_CTCMode>:



void TIMER0_vidStartTimer_CTCMode(u8 u8InitVal , u8 u8CompareValue,u8 u8CTCMode)
{
    5054:	df 93       	push	r29
    5056:	cf 93       	push	r28
    5058:	00 d0       	rcall	.+0      	; 0x505a <TIMER0_vidStartTimer_CTCMode+0x6>
    505a:	00 d0       	rcall	.+0      	; 0x505c <TIMER0_vidStartTimer_CTCMode+0x8>
    505c:	0f 92       	push	r0
    505e:	cd b7       	in	r28, 0x3d	; 61
    5060:	de b7       	in	r29, 0x3e	; 62
    5062:	89 83       	std	Y+1, r24	; 0x01
    5064:	6a 83       	std	Y+2, r22	; 0x02
    5066:	4b 83       	std	Y+3, r20	; 0x03
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetInitReg(u8InitVal);
    5068:	89 81       	ldd	r24, Y+1	; 0x01
    506a:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <TIMER0_vidSetInitReg>

/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetComparReg(u8CompareValue);
    506e:	8a 81       	ldd	r24, Y+2	; 0x02
    5070:	0e 94 02 2b 	call	0x5604	; 0x5604 <TIMER0_vidSetComparReg>

/**********************************************/
/**************Enable Interrupt ***************/
/**********************************************/

switch(u8CTCMode)
    5074:	8b 81       	ldd	r24, Y+3	; 0x03
    5076:	28 2f       	mov	r18, r24
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	3d 83       	std	Y+5, r19	; 0x05
    507c:	2c 83       	std	Y+4, r18	; 0x04
    507e:	8c 81       	ldd	r24, Y+4	; 0x04
    5080:	9d 81       	ldd	r25, Y+5	; 0x05
    5082:	83 30       	cpi	r24, 0x03	; 3
    5084:	91 05       	cpc	r25, r1
    5086:	09 f4       	brne	.+2      	; 0x508a <TIMER0_vidStartTimer_CTCMode+0x36>
    5088:	63 c0       	rjmp	.+198    	; 0x5150 <TIMER0_vidStartTimer_CTCMode+0xfc>
    508a:	2c 81       	ldd	r18, Y+4	; 0x04
    508c:	3d 81       	ldd	r19, Y+5	; 0x05
    508e:	24 30       	cpi	r18, 0x04	; 4
    5090:	31 05       	cpc	r19, r1
    5092:	84 f4       	brge	.+32     	; 0x50b4 <TIMER0_vidStartTimer_CTCMode+0x60>
    5094:	8c 81       	ldd	r24, Y+4	; 0x04
    5096:	9d 81       	ldd	r25, Y+5	; 0x05
    5098:	81 30       	cpi	r24, 0x01	; 1
    509a:	91 05       	cpc	r25, r1
    509c:	d9 f1       	breq	.+118    	; 0x5114 <TIMER0_vidStartTimer_CTCMode+0xc0>
    509e:	2c 81       	ldd	r18, Y+4	; 0x04
    50a0:	3d 81       	ldd	r19, Y+5	; 0x05
    50a2:	22 30       	cpi	r18, 0x02	; 2
    50a4:	31 05       	cpc	r19, r1
    50a6:	0c f0       	brlt	.+2      	; 0x50aa <TIMER0_vidStartTimer_CTCMode+0x56>
    50a8:	44 c0       	rjmp	.+136    	; 0x5132 <TIMER0_vidStartTimer_CTCMode+0xde>
    50aa:	8c 81       	ldd	r24, Y+4	; 0x04
    50ac:	9d 81       	ldd	r25, Y+5	; 0x05
    50ae:	00 97       	sbiw	r24, 0x00	; 0
    50b0:	a1 f0       	breq	.+40     	; 0x50da <TIMER0_vidStartTimer_CTCMode+0x86>
    50b2:	b3 c0       	rjmp	.+358    	; 0x521a <TIMER0_vidStartTimer_CTCMode+0x1c6>
    50b4:	2c 81       	ldd	r18, Y+4	; 0x04
    50b6:	3d 81       	ldd	r19, Y+5	; 0x05
    50b8:	25 30       	cpi	r18, 0x05	; 5
    50ba:	31 05       	cpc	r19, r1
    50bc:	09 f4       	brne	.+2      	; 0x50c0 <TIMER0_vidStartTimer_CTCMode+0x6c>
    50be:	74 c0       	rjmp	.+232    	; 0x51a8 <TIMER0_vidStartTimer_CTCMode+0x154>
    50c0:	8c 81       	ldd	r24, Y+4	; 0x04
    50c2:	9d 81       	ldd	r25, Y+5	; 0x05
    50c4:	85 30       	cpi	r24, 0x05	; 5
    50c6:	91 05       	cpc	r25, r1
    50c8:	0c f4       	brge	.+2      	; 0x50cc <TIMER0_vidStartTimer_CTCMode+0x78>
    50ca:	51 c0       	rjmp	.+162    	; 0x516e <TIMER0_vidStartTimer_CTCMode+0x11a>
    50cc:	2c 81       	ldd	r18, Y+4	; 0x04
    50ce:	3d 81       	ldd	r19, Y+5	; 0x05
    50d0:	26 30       	cpi	r18, 0x06	; 6
    50d2:	31 05       	cpc	r19, r1
    50d4:	09 f4       	brne	.+2      	; 0x50d8 <TIMER0_vidStartTimer_CTCMode+0x84>
    50d6:	85 c0       	rjmp	.+266    	; 0x51e2 <TIMER0_vidStartTimer_CTCMode+0x18e>
    50d8:	a0 c0       	rjmp	.+320    	; 0x521a <TIMER0_vidStartTimer_CTCMode+0x1c6>
{
case (TIMER0_CTC_CM_INTRUPT):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    50da:	af e5       	ldi	r26, 0x5F	; 95
    50dc:	b0 e0       	ldi	r27, 0x00	; 0
    50de:	ef e5       	ldi	r30, 0x5F	; 95
    50e0:	f0 e0       	ldi	r31, 0x00	; 0
    50e2:	80 81       	ld	r24, Z
    50e4:	80 68       	ori	r24, 0x80	; 128
    50e6:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    50e8:	a9 e5       	ldi	r26, 0x59	; 89
    50ea:	b0 e0       	ldi	r27, 0x00	; 0
    50ec:	e9 e5       	ldi	r30, 0x59	; 89
    50ee:	f0 e0       	ldi	r31, 0x00	; 0
    50f0:	80 81       	ld	r24, Z
    50f2:	82 60       	ori	r24, 0x02	; 2
    50f4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Disable The Pin Mode
    50f6:	a3 e5       	ldi	r26, 0x53	; 83
    50f8:	b0 e0       	ldi	r27, 0x00	; 0
    50fa:	e3 e5       	ldi	r30, 0x53	; 83
    50fc:	f0 e0       	ldi	r31, 0x00	; 0
    50fe:	80 81       	ld	r24, Z
    5100:	8f 7d       	andi	r24, 0xDF	; 223
    5102:	8c 93       	st	X, r24
    5104:	a3 e5       	ldi	r26, 0x53	; 83
    5106:	b0 e0       	ldi	r27, 0x00	; 0
    5108:	e3 e5       	ldi	r30, 0x53	; 83
    510a:	f0 e0       	ldi	r31, 0x00	; 0
    510c:	80 81       	ld	r24, Z
    510e:	8f 7e       	andi	r24, 0xEF	; 239
    5110:	8c 93       	st	X, r24
    5112:	83 c0       	rjmp	.+262    	; 0x521a <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_PINS_TOGGLE):
	CLR_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//Toggle The Pin(OC0) on compare match
    5114:	a3 e5       	ldi	r26, 0x53	; 83
    5116:	b0 e0       	ldi	r27, 0x00	; 0
    5118:	e3 e5       	ldi	r30, 0x53	; 83
    511a:	f0 e0       	ldi	r31, 0x00	; 0
    511c:	80 81       	ld	r24, Z
    511e:	8f 7d       	andi	r24, 0xDF	; 223
    5120:	8c 93       	st	X, r24
    5122:	a3 e5       	ldi	r26, 0x53	; 83
    5124:	b0 e0       	ldi	r27, 0x00	; 0
    5126:	e3 e5       	ldi	r30, 0x53	; 83
    5128:	f0 e0       	ldi	r31, 0x00	; 0
    512a:	80 81       	ld	r24, Z
    512c:	80 61       	ori	r24, 0x10	; 16
    512e:	8c 93       	st	X, r24
    5130:	74 c0       	rjmp	.+232    	; 0x521a <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_PINS_CLEAR):
	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear The Pin(OC0) on compare match
    5132:	a3 e5       	ldi	r26, 0x53	; 83
    5134:	b0 e0       	ldi	r27, 0x00	; 0
    5136:	e3 e5       	ldi	r30, 0x53	; 83
    5138:	f0 e0       	ldi	r31, 0x00	; 0
    513a:	80 81       	ld	r24, Z
    513c:	80 62       	ori	r24, 0x20	; 32
    513e:	8c 93       	st	X, r24
    5140:	a3 e5       	ldi	r26, 0x53	; 83
    5142:	b0 e0       	ldi	r27, 0x00	; 0
    5144:	e3 e5       	ldi	r30, 0x53	; 83
    5146:	f0 e0       	ldi	r31, 0x00	; 0
    5148:	80 81       	ld	r24, Z
    514a:	8f 7e       	andi	r24, 0xEF	; 239
    514c:	8c 93       	st	X, r24
    514e:	65 c0       	rjmp	.+202    	; 0x521a <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_PINS_SET):
	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET The Pin(OC0) on compare match
    5150:	a3 e5       	ldi	r26, 0x53	; 83
    5152:	b0 e0       	ldi	r27, 0x00	; 0
    5154:	e3 e5       	ldi	r30, 0x53	; 83
    5156:	f0 e0       	ldi	r31, 0x00	; 0
    5158:	80 81       	ld	r24, Z
    515a:	80 62       	ori	r24, 0x20	; 32
    515c:	8c 93       	st	X, r24
    515e:	a3 e5       	ldi	r26, 0x53	; 83
    5160:	b0 e0       	ldi	r27, 0x00	; 0
    5162:	e3 e5       	ldi	r30, 0x53	; 83
    5164:	f0 e0       	ldi	r31, 0x00	; 0
    5166:	80 81       	ld	r24, Z
    5168:	80 61       	ori	r24, 0x10	; 16
    516a:	8c 93       	st	X, r24
    516c:	56 c0       	rjmp	.+172    	; 0x521a <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_CM_INTRUPT_PINS_TOGGLE):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    516e:	af e5       	ldi	r26, 0x5F	; 95
    5170:	b0 e0       	ldi	r27, 0x00	; 0
    5172:	ef e5       	ldi	r30, 0x5F	; 95
    5174:	f0 e0       	ldi	r31, 0x00	; 0
    5176:	80 81       	ld	r24, Z
    5178:	80 68       	ori	r24, 0x80	; 128
    517a:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    517c:	a9 e5       	ldi	r26, 0x59	; 89
    517e:	b0 e0       	ldi	r27, 0x00	; 0
    5180:	e9 e5       	ldi	r30, 0x59	; 89
    5182:	f0 e0       	ldi	r31, 0x00	; 0
    5184:	80 81       	ld	r24, Z
    5186:	82 60       	ori	r24, 0x02	; 2
    5188:	8c 93       	st	X, r24

	CLR_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//Toggle The Pin(OC0) on compare match
    518a:	a3 e5       	ldi	r26, 0x53	; 83
    518c:	b0 e0       	ldi	r27, 0x00	; 0
    518e:	e3 e5       	ldi	r30, 0x53	; 83
    5190:	f0 e0       	ldi	r31, 0x00	; 0
    5192:	80 81       	ld	r24, Z
    5194:	8f 7d       	andi	r24, 0xDF	; 223
    5196:	8c 93       	st	X, r24
    5198:	a3 e5       	ldi	r26, 0x53	; 83
    519a:	b0 e0       	ldi	r27, 0x00	; 0
    519c:	e3 e5       	ldi	r30, 0x53	; 83
    519e:	f0 e0       	ldi	r31, 0x00	; 0
    51a0:	80 81       	ld	r24, Z
    51a2:	80 61       	ori	r24, 0x10	; 16
    51a4:	8c 93       	st	X, r24
    51a6:	39 c0       	rjmp	.+114    	; 0x521a <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_CM_INTRUPT_PINS_CLEAR):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    51a8:	af e5       	ldi	r26, 0x5F	; 95
    51aa:	b0 e0       	ldi	r27, 0x00	; 0
    51ac:	ef e5       	ldi	r30, 0x5F	; 95
    51ae:	f0 e0       	ldi	r31, 0x00	; 0
    51b0:	80 81       	ld	r24, Z
    51b2:	80 68       	ori	r24, 0x80	; 128
    51b4:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    51b6:	a9 e5       	ldi	r26, 0x59	; 89
    51b8:	b0 e0       	ldi	r27, 0x00	; 0
    51ba:	e9 e5       	ldi	r30, 0x59	; 89
    51bc:	f0 e0       	ldi	r31, 0x00	; 0
    51be:	80 81       	ld	r24, Z
    51c0:	82 60       	ori	r24, 0x02	; 2
    51c2:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear The Pin(OC0) on compare match
    51c4:	a3 e5       	ldi	r26, 0x53	; 83
    51c6:	b0 e0       	ldi	r27, 0x00	; 0
    51c8:	e3 e5       	ldi	r30, 0x53	; 83
    51ca:	f0 e0       	ldi	r31, 0x00	; 0
    51cc:	80 81       	ld	r24, Z
    51ce:	80 62       	ori	r24, 0x20	; 32
    51d0:	8c 93       	st	X, r24
    51d2:	a3 e5       	ldi	r26, 0x53	; 83
    51d4:	b0 e0       	ldi	r27, 0x00	; 0
    51d6:	e3 e5       	ldi	r30, 0x53	; 83
    51d8:	f0 e0       	ldi	r31, 0x00	; 0
    51da:	80 81       	ld	r24, Z
    51dc:	8f 7e       	andi	r24, 0xEF	; 239
    51de:	8c 93       	st	X, r24
    51e0:	1c c0       	rjmp	.+56     	; 0x521a <TIMER0_vidStartTimer_CTCMode+0x1c6>
	break;

case (TIMER0_CTC_CM_INTRUPT_PINS_SET):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    51e2:	af e5       	ldi	r26, 0x5F	; 95
    51e4:	b0 e0       	ldi	r27, 0x00	; 0
    51e6:	ef e5       	ldi	r30, 0x5F	; 95
    51e8:	f0 e0       	ldi	r31, 0x00	; 0
    51ea:	80 81       	ld	r24, Z
    51ec:	80 68       	ori	r24, 0x80	; 128
    51ee:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    51f0:	a9 e5       	ldi	r26, 0x59	; 89
    51f2:	b0 e0       	ldi	r27, 0x00	; 0
    51f4:	e9 e5       	ldi	r30, 0x59	; 89
    51f6:	f0 e0       	ldi	r31, 0x00	; 0
    51f8:	80 81       	ld	r24, Z
    51fa:	82 60       	ori	r24, 0x02	; 2
    51fc:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET The Pin(OC0) on compare match
    51fe:	a3 e5       	ldi	r26, 0x53	; 83
    5200:	b0 e0       	ldi	r27, 0x00	; 0
    5202:	e3 e5       	ldi	r30, 0x53	; 83
    5204:	f0 e0       	ldi	r31, 0x00	; 0
    5206:	80 81       	ld	r24, Z
    5208:	80 62       	ori	r24, 0x20	; 32
    520a:	8c 93       	st	X, r24
    520c:	a3 e5       	ldi	r26, 0x53	; 83
    520e:	b0 e0       	ldi	r27, 0x00	; 0
    5210:	e3 e5       	ldi	r30, 0x53	; 83
    5212:	f0 e0       	ldi	r31, 0x00	; 0
    5214:	80 81       	ld	r24, Z
    5216:	80 61       	ori	r24, 0x10	; 16
    5218:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
	CLR_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#elif(CLOCK_SELECT == CLK_8_PRESCALER )
	CLR_BIT(TCCR0_REG,2);
    521a:	a3 e5       	ldi	r26, 0x53	; 83
    521c:	b0 e0       	ldi	r27, 0x00	; 0
    521e:	e3 e5       	ldi	r30, 0x53	; 83
    5220:	f0 e0       	ldi	r31, 0x00	; 0
    5222:	80 81       	ld	r24, Z
    5224:	8b 7f       	andi	r24, 0xFB	; 251
    5226:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
    5228:	a3 e5       	ldi	r26, 0x53	; 83
    522a:	b0 e0       	ldi	r27, 0x00	; 0
    522c:	e3 e5       	ldi	r30, 0x53	; 83
    522e:	f0 e0       	ldi	r31, 0x00	; 0
    5230:	80 81       	ld	r24, Z
    5232:	82 60       	ori	r24, 0x02	; 2
    5234:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    5236:	a3 e5       	ldi	r26, 0x53	; 83
    5238:	b0 e0       	ldi	r27, 0x00	; 0
    523a:	e3 e5       	ldi	r30, 0x53	; 83
    523c:	f0 e0       	ldi	r31, 0x00	; 0
    523e:	80 81       	ld	r24, Z
    5240:	8e 7f       	andi	r24, 0xFE	; 254
    5242:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,2);
	SET_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#endif
}
    5244:	0f 90       	pop	r0
    5246:	0f 90       	pop	r0
    5248:	0f 90       	pop	r0
    524a:	0f 90       	pop	r0
    524c:	0f 90       	pop	r0
    524e:	cf 91       	pop	r28
    5250:	df 91       	pop	r29
    5252:	08 95       	ret

00005254 <TIMER0_vidStartTimer_PWMMode>:




void TIMER0_vidStartTimer_PWMMode(u8 u8InitVal , u8 u8CompareValue,u8 u8PWMMode)
{
    5254:	df 93       	push	r29
    5256:	cf 93       	push	r28
    5258:	00 d0       	rcall	.+0      	; 0x525a <TIMER0_vidStartTimer_PWMMode+0x6>
    525a:	00 d0       	rcall	.+0      	; 0x525c <TIMER0_vidStartTimer_PWMMode+0x8>
    525c:	0f 92       	push	r0
    525e:	cd b7       	in	r28, 0x3d	; 61
    5260:	de b7       	in	r29, 0x3e	; 62
    5262:	89 83       	std	Y+1, r24	; 0x01
    5264:	6a 83       	std	Y+2, r22	; 0x02
    5266:	4b 83       	std	Y+3, r20	; 0x03
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetInitReg(u8InitVal);
    5268:	89 81       	ldd	r24, Y+1	; 0x01
    526a:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <TIMER0_vidSetInitReg>

/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetComparReg(u8CompareValue);
    526e:	8a 81       	ldd	r24, Y+2	; 0x02
    5270:	0e 94 02 2b 	call	0x5604	; 0x5604 <TIMER0_vidSetComparReg>

/**********************************************/
/**************Enable Interrupt ***************/
/**********************************************/

switch(u8PWMMode)
    5274:	8b 81       	ldd	r24, Y+3	; 0x03
    5276:	28 2f       	mov	r18, r24
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	3d 83       	std	Y+5, r19	; 0x05
    527c:	2c 83       	std	Y+4, r18	; 0x04
    527e:	8c 81       	ldd	r24, Y+4	; 0x04
    5280:	9d 81       	ldd	r25, Y+5	; 0x05
    5282:	84 30       	cpi	r24, 0x04	; 4
    5284:	91 05       	cpc	r25, r1
    5286:	09 f4       	brne	.+2      	; 0x528a <TIMER0_vidStartTimer_PWMMode+0x36>
    5288:	9a c0       	rjmp	.+308    	; 0x53be <TIMER0_vidStartTimer_PWMMode+0x16a>
    528a:	2c 81       	ldd	r18, Y+4	; 0x04
    528c:	3d 81       	ldd	r19, Y+5	; 0x05
    528e:	25 30       	cpi	r18, 0x05	; 5
    5290:	31 05       	cpc	r19, r1
    5292:	ec f4       	brge	.+58     	; 0x52ce <TIMER0_vidStartTimer_PWMMode+0x7a>
    5294:	8c 81       	ldd	r24, Y+4	; 0x04
    5296:	9d 81       	ldd	r25, Y+5	; 0x05
    5298:	81 30       	cpi	r24, 0x01	; 1
    529a:	91 05       	cpc	r25, r1
    529c:	09 f4       	brne	.+2      	; 0x52a0 <TIMER0_vidStartTimer_PWMMode+0x4c>
    529e:	54 c0       	rjmp	.+168    	; 0x5348 <TIMER0_vidStartTimer_PWMMode+0xf4>
    52a0:	2c 81       	ldd	r18, Y+4	; 0x04
    52a2:	3d 81       	ldd	r19, Y+5	; 0x05
    52a4:	22 30       	cpi	r18, 0x02	; 2
    52a6:	31 05       	cpc	r19, r1
    52a8:	2c f4       	brge	.+10     	; 0x52b4 <TIMER0_vidStartTimer_PWMMode+0x60>
    52aa:	8c 81       	ldd	r24, Y+4	; 0x04
    52ac:	9d 81       	ldd	r25, Y+5	; 0x05
    52ae:	00 97       	sbiw	r24, 0x00	; 0
    52b0:	39 f1       	breq	.+78     	; 0x5300 <TIMER0_vidStartTimer_PWMMode+0xac>
    52b2:	23 c1       	rjmp	.+582    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
    52b4:	2c 81       	ldd	r18, Y+4	; 0x04
    52b6:	3d 81       	ldd	r19, Y+5	; 0x05
    52b8:	22 30       	cpi	r18, 0x02	; 2
    52ba:	31 05       	cpc	r19, r1
    52bc:	09 f4       	brne	.+2      	; 0x52c0 <TIMER0_vidStartTimer_PWMMode+0x6c>
    52be:	53 c0       	rjmp	.+166    	; 0x5366 <TIMER0_vidStartTimer_PWMMode+0x112>
    52c0:	8c 81       	ldd	r24, Y+4	; 0x04
    52c2:	9d 81       	ldd	r25, Y+5	; 0x05
    52c4:	83 30       	cpi	r24, 0x03	; 3
    52c6:	91 05       	cpc	r25, r1
    52c8:	09 f4       	brne	.+2      	; 0x52cc <TIMER0_vidStartTimer_PWMMode+0x78>
    52ca:	5c c0       	rjmp	.+184    	; 0x5384 <TIMER0_vidStartTimer_PWMMode+0x130>
    52cc:	16 c1       	rjmp	.+556    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
    52ce:	2c 81       	ldd	r18, Y+4	; 0x04
    52d0:	3d 81       	ldd	r19, Y+5	; 0x05
    52d2:	26 30       	cpi	r18, 0x06	; 6
    52d4:	31 05       	cpc	r19, r1
    52d6:	09 f4       	brne	.+2      	; 0x52da <TIMER0_vidStartTimer_PWMMode+0x86>
    52d8:	ac c0       	rjmp	.+344    	; 0x5432 <TIMER0_vidStartTimer_PWMMode+0x1de>
    52da:	8c 81       	ldd	r24, Y+4	; 0x04
    52dc:	9d 81       	ldd	r25, Y+5	; 0x05
    52de:	86 30       	cpi	r24, 0x06	; 6
    52e0:	91 05       	cpc	r25, r1
    52e2:	0c f4       	brge	.+2      	; 0x52e6 <TIMER0_vidStartTimer_PWMMode+0x92>
    52e4:	89 c0       	rjmp	.+274    	; 0x53f8 <TIMER0_vidStartTimer_PWMMode+0x1a4>
    52e6:	2c 81       	ldd	r18, Y+4	; 0x04
    52e8:	3d 81       	ldd	r19, Y+5	; 0x05
    52ea:	27 30       	cpi	r18, 0x07	; 7
    52ec:	31 05       	cpc	r19, r1
    52ee:	09 f4       	brne	.+2      	; 0x52f2 <TIMER0_vidStartTimer_PWMMode+0x9e>
    52f0:	bd c0       	rjmp	.+378    	; 0x546c <TIMER0_vidStartTimer_PWMMode+0x218>
    52f2:	8c 81       	ldd	r24, Y+4	; 0x04
    52f4:	9d 81       	ldd	r25, Y+5	; 0x05
    52f6:	88 30       	cpi	r24, 0x08	; 8
    52f8:	91 05       	cpc	r25, r1
    52fa:	09 f4       	brne	.+2      	; 0x52fe <TIMER0_vidStartTimer_PWMMode+0xaa>
    52fc:	db c0       	rjmp	.+438    	; 0x54b4 <TIMER0_vidStartTimer_PWMMode+0x260>
    52fe:	fd c0       	rjmp	.+506    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
{
case (TIMER0_PWM_OF_CM_INTRUPTS_ONLY):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    5300:	af e5       	ldi	r26, 0x5F	; 95
    5302:	b0 e0       	ldi	r27, 0x00	; 0
    5304:	ef e5       	ldi	r30, 0x5F	; 95
    5306:	f0 e0       	ldi	r31, 0x00	; 0
    5308:	80 81       	ld	r24, Z
    530a:	80 68       	ori	r24, 0x80	; 128
    530c:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    530e:	a9 e5       	ldi	r26, 0x59	; 89
    5310:	b0 e0       	ldi	r27, 0x00	; 0
    5312:	e9 e5       	ldi	r30, 0x59	; 89
    5314:	f0 e0       	ldi	r31, 0x00	; 0
    5316:	80 81       	ld	r24, Z
    5318:	82 60       	ori	r24, 0x02	; 2
    531a:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    531c:	a9 e5       	ldi	r26, 0x59	; 89
    531e:	b0 e0       	ldi	r27, 0x00	; 0
    5320:	e9 e5       	ldi	r30, 0x59	; 89
    5322:	f0 e0       	ldi	r31, 0x00	; 0
    5324:	80 81       	ld	r24, Z
    5326:	81 60       	ori	r24, 0x01	; 1
    5328:	8c 93       	st	X, r24

	CLR_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Disable The Pin Mode
    532a:	a3 e5       	ldi	r26, 0x53	; 83
    532c:	b0 e0       	ldi	r27, 0x00	; 0
    532e:	e3 e5       	ldi	r30, 0x53	; 83
    5330:	f0 e0       	ldi	r31, 0x00	; 0
    5332:	80 81       	ld	r24, Z
    5334:	8f 7d       	andi	r24, 0xDF	; 223
    5336:	8c 93       	st	X, r24
    5338:	a3 e5       	ldi	r26, 0x53	; 83
    533a:	b0 e0       	ldi	r27, 0x00	; 0
    533c:	e3 e5       	ldi	r30, 0x53	; 83
    533e:	f0 e0       	ldi	r31, 0x00	; 0
    5340:	80 81       	ld	r24, Z
    5342:	8f 7e       	andi	r24, 0xEF	; 239
    5344:	8c 93       	st	X, r24
    5346:	d9 c0       	rjmp	.+434    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_PIN_CLEAR_SET):
	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear OC0 on compare match & Set OC0 onThe TOP.
    5348:	a3 e5       	ldi	r26, 0x53	; 83
    534a:	b0 e0       	ldi	r27, 0x00	; 0
    534c:	e3 e5       	ldi	r30, 0x53	; 83
    534e:	f0 e0       	ldi	r31, 0x00	; 0
    5350:	80 81       	ld	r24, Z
    5352:	80 62       	ori	r24, 0x20	; 32
    5354:	8c 93       	st	X, r24
    5356:	a3 e5       	ldi	r26, 0x53	; 83
    5358:	b0 e0       	ldi	r27, 0x00	; 0
    535a:	e3 e5       	ldi	r30, 0x53	; 83
    535c:	f0 e0       	ldi	r31, 0x00	; 0
    535e:	80 81       	ld	r24, Z
    5360:	8f 7e       	andi	r24, 0xEF	; 239
    5362:	8c 93       	st	X, r24
    5364:	ca c0       	rjmp	.+404    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_PIN_SET_CLEAR):
	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET OC0 on compare match & CLEAR OC0 onThe TOP.
    5366:	a3 e5       	ldi	r26, 0x53	; 83
    5368:	b0 e0       	ldi	r27, 0x00	; 0
    536a:	e3 e5       	ldi	r30, 0x53	; 83
    536c:	f0 e0       	ldi	r31, 0x00	; 0
    536e:	80 81       	ld	r24, Z
    5370:	80 62       	ori	r24, 0x20	; 32
    5372:	8c 93       	st	X, r24
    5374:	a3 e5       	ldi	r26, 0x53	; 83
    5376:	b0 e0       	ldi	r27, 0x00	; 0
    5378:	e3 e5       	ldi	r30, 0x53	; 83
    537a:	f0 e0       	ldi	r31, 0x00	; 0
    537c:	80 81       	ld	r24, Z
    537e:	80 61       	ori	r24, 0x10	; 16
    5380:	8c 93       	st	X, r24
    5382:	bb c0       	rjmp	.+374    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_OF_INTRUPT_PIN_CLEAR_SET):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    5384:	af e5       	ldi	r26, 0x5F	; 95
    5386:	b0 e0       	ldi	r27, 0x00	; 0
    5388:	ef e5       	ldi	r30, 0x5F	; 95
    538a:	f0 e0       	ldi	r31, 0x00	; 0
    538c:	80 81       	ld	r24, Z
    538e:	80 68       	ori	r24, 0x80	; 128
    5390:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    5392:	a9 e5       	ldi	r26, 0x59	; 89
    5394:	b0 e0       	ldi	r27, 0x00	; 0
    5396:	e9 e5       	ldi	r30, 0x59	; 89
    5398:	f0 e0       	ldi	r31, 0x00	; 0
    539a:	80 81       	ld	r24, Z
    539c:	81 60       	ori	r24, 0x01	; 1
    539e:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear OC0 on compare match & Set OC0 onThe TOP.
    53a0:	a3 e5       	ldi	r26, 0x53	; 83
    53a2:	b0 e0       	ldi	r27, 0x00	; 0
    53a4:	e3 e5       	ldi	r30, 0x53	; 83
    53a6:	f0 e0       	ldi	r31, 0x00	; 0
    53a8:	80 81       	ld	r24, Z
    53aa:	80 62       	ori	r24, 0x20	; 32
    53ac:	8c 93       	st	X, r24
    53ae:	a3 e5       	ldi	r26, 0x53	; 83
    53b0:	b0 e0       	ldi	r27, 0x00	; 0
    53b2:	e3 e5       	ldi	r30, 0x53	; 83
    53b4:	f0 e0       	ldi	r31, 0x00	; 0
    53b6:	80 81       	ld	r24, Z
    53b8:	8f 7e       	andi	r24, 0xEF	; 239
    53ba:	8c 93       	st	X, r24
    53bc:	9e c0       	rjmp	.+316    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_OF_INTRUPT_PIN_SET_CLEAR):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    53be:	af e5       	ldi	r26, 0x5F	; 95
    53c0:	b0 e0       	ldi	r27, 0x00	; 0
    53c2:	ef e5       	ldi	r30, 0x5F	; 95
    53c4:	f0 e0       	ldi	r31, 0x00	; 0
    53c6:	80 81       	ld	r24, Z
    53c8:	80 68       	ori	r24, 0x80	; 128
    53ca:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    53cc:	a9 e5       	ldi	r26, 0x59	; 89
    53ce:	b0 e0       	ldi	r27, 0x00	; 0
    53d0:	e9 e5       	ldi	r30, 0x59	; 89
    53d2:	f0 e0       	ldi	r31, 0x00	; 0
    53d4:	80 81       	ld	r24, Z
    53d6:	81 60       	ori	r24, 0x01	; 1
    53d8:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET OC0 on compare match & CLEAR OC0 onThe TOP.
    53da:	a3 e5       	ldi	r26, 0x53	; 83
    53dc:	b0 e0       	ldi	r27, 0x00	; 0
    53de:	e3 e5       	ldi	r30, 0x53	; 83
    53e0:	f0 e0       	ldi	r31, 0x00	; 0
    53e2:	80 81       	ld	r24, Z
    53e4:	80 62       	ori	r24, 0x20	; 32
    53e6:	8c 93       	st	X, r24
    53e8:	a3 e5       	ldi	r26, 0x53	; 83
    53ea:	b0 e0       	ldi	r27, 0x00	; 0
    53ec:	e3 e5       	ldi	r30, 0x53	; 83
    53ee:	f0 e0       	ldi	r31, 0x00	; 0
    53f0:	80 81       	ld	r24, Z
    53f2:	80 61       	ori	r24, 0x10	; 16
    53f4:	8c 93       	st	X, r24
    53f6:	81 c0       	rjmp	.+258    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_CM_INTRUPT_PIN_CLEAR_SET):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    53f8:	af e5       	ldi	r26, 0x5F	; 95
    53fa:	b0 e0       	ldi	r27, 0x00	; 0
    53fc:	ef e5       	ldi	r30, 0x5F	; 95
    53fe:	f0 e0       	ldi	r31, 0x00	; 0
    5400:	80 81       	ld	r24, Z
    5402:	80 68       	ori	r24, 0x80	; 128
    5404:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    5406:	a9 e5       	ldi	r26, 0x59	; 89
    5408:	b0 e0       	ldi	r27, 0x00	; 0
    540a:	e9 e5       	ldi	r30, 0x59	; 89
    540c:	f0 e0       	ldi	r31, 0x00	; 0
    540e:	80 81       	ld	r24, Z
    5410:	82 60       	ori	r24, 0x02	; 2
    5412:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear OC0 on compare match & Set OC0 onThe TOP.
    5414:	a3 e5       	ldi	r26, 0x53	; 83
    5416:	b0 e0       	ldi	r27, 0x00	; 0
    5418:	e3 e5       	ldi	r30, 0x53	; 83
    541a:	f0 e0       	ldi	r31, 0x00	; 0
    541c:	80 81       	ld	r24, Z
    541e:	80 62       	ori	r24, 0x20	; 32
    5420:	8c 93       	st	X, r24
    5422:	a3 e5       	ldi	r26, 0x53	; 83
    5424:	b0 e0       	ldi	r27, 0x00	; 0
    5426:	e3 e5       	ldi	r30, 0x53	; 83
    5428:	f0 e0       	ldi	r31, 0x00	; 0
    542a:	80 81       	ld	r24, Z
    542c:	8f 7e       	andi	r24, 0xEF	; 239
    542e:	8c 93       	st	X, r24
    5430:	64 c0       	rjmp	.+200    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_CM_INTRUPT_PIN_SET_CLEAR):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    5432:	af e5       	ldi	r26, 0x5F	; 95
    5434:	b0 e0       	ldi	r27, 0x00	; 0
    5436:	ef e5       	ldi	r30, 0x5F	; 95
    5438:	f0 e0       	ldi	r31, 0x00	; 0
    543a:	80 81       	ld	r24, Z
    543c:	80 68       	ori	r24, 0x80	; 128
    543e:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    5440:	a9 e5       	ldi	r26, 0x59	; 89
    5442:	b0 e0       	ldi	r27, 0x00	; 0
    5444:	e9 e5       	ldi	r30, 0x59	; 89
    5446:	f0 e0       	ldi	r31, 0x00	; 0
    5448:	80 81       	ld	r24, Z
    544a:	82 60       	ori	r24, 0x02	; 2
    544c:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET OC0 on compare match & CLEAR OC0 onThe TOP.
    544e:	a3 e5       	ldi	r26, 0x53	; 83
    5450:	b0 e0       	ldi	r27, 0x00	; 0
    5452:	e3 e5       	ldi	r30, 0x53	; 83
    5454:	f0 e0       	ldi	r31, 0x00	; 0
    5456:	80 81       	ld	r24, Z
    5458:	80 62       	ori	r24, 0x20	; 32
    545a:	8c 93       	st	X, r24
    545c:	a3 e5       	ldi	r26, 0x53	; 83
    545e:	b0 e0       	ldi	r27, 0x00	; 0
    5460:	e3 e5       	ldi	r30, 0x53	; 83
    5462:	f0 e0       	ldi	r31, 0x00	; 0
    5464:	80 81       	ld	r24, Z
    5466:	80 61       	ori	r24, 0x10	; 16
    5468:	8c 93       	st	X, r24
    546a:	47 c0       	rjmp	.+142    	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_OF_CM_INTRUPT_PIN_SET_CLEAR):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    546c:	af e5       	ldi	r26, 0x5F	; 95
    546e:	b0 e0       	ldi	r27, 0x00	; 0
    5470:	ef e5       	ldi	r30, 0x5F	; 95
    5472:	f0 e0       	ldi	r31, 0x00	; 0
    5474:	80 81       	ld	r24, Z
    5476:	80 68       	ori	r24, 0x80	; 128
    5478:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    547a:	a9 e5       	ldi	r26, 0x59	; 89
    547c:	b0 e0       	ldi	r27, 0x00	; 0
    547e:	e9 e5       	ldi	r30, 0x59	; 89
    5480:	f0 e0       	ldi	r31, 0x00	; 0
    5482:	80 81       	ld	r24, Z
    5484:	81 60       	ori	r24, 0x01	; 1
    5486:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    5488:	a9 e5       	ldi	r26, 0x59	; 89
    548a:	b0 e0       	ldi	r27, 0x00	; 0
    548c:	e9 e5       	ldi	r30, 0x59	; 89
    548e:	f0 e0       	ldi	r31, 0x00	; 0
    5490:	80 81       	ld	r24, Z
    5492:	82 60       	ori	r24, 0x02	; 2
    5494:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//SET OC0 on compare match & CLEAR OC0 onThe TOP.
    5496:	a3 e5       	ldi	r26, 0x53	; 83
    5498:	b0 e0       	ldi	r27, 0x00	; 0
    549a:	e3 e5       	ldi	r30, 0x53	; 83
    549c:	f0 e0       	ldi	r31, 0x00	; 0
    549e:	80 81       	ld	r24, Z
    54a0:	80 62       	ori	r24, 0x20	; 32
    54a2:	8c 93       	st	X, r24
    54a4:	a3 e5       	ldi	r26, 0x53	; 83
    54a6:	b0 e0       	ldi	r27, 0x00	; 0
    54a8:	e3 e5       	ldi	r30, 0x53	; 83
    54aa:	f0 e0       	ldi	r31, 0x00	; 0
    54ac:	80 81       	ld	r24, Z
    54ae:	80 61       	ori	r24, 0x10	; 16
    54b0:	8c 93       	st	X, r24
    54b2:	23 c0       	rjmp	.+70     	; 0x54fa <TIMER0_vidStartTimer_PWMMode+0x2a6>
	break;

case (TIMER0_PWM_OF_CM_INTRUPT_PIN_CLEAR_SET):
	SET_BIT(SR_REG,7);  	//Global Interrupt
    54b4:	af e5       	ldi	r26, 0x5F	; 95
    54b6:	b0 e0       	ldi	r27, 0x00	; 0
    54b8:	ef e5       	ldi	r30, 0x5F	; 95
    54ba:	f0 e0       	ldi	r31, 0x00	; 0
    54bc:	80 81       	ld	r24, Z
    54be:	80 68       	ori	r24, 0x80	; 128
    54c0:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    54c2:	a9 e5       	ldi	r26, 0x59	; 89
    54c4:	b0 e0       	ldi	r27, 0x00	; 0
    54c6:	e9 e5       	ldi	r30, 0x59	; 89
    54c8:	f0 e0       	ldi	r31, 0x00	; 0
    54ca:	80 81       	ld	r24, Z
    54cc:	81 60       	ori	r24, 0x01	; 1
    54ce:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    54d0:	a9 e5       	ldi	r26, 0x59	; 89
    54d2:	b0 e0       	ldi	r27, 0x00	; 0
    54d4:	e9 e5       	ldi	r30, 0x59	; 89
    54d6:	f0 e0       	ldi	r31, 0x00	; 0
    54d8:	80 81       	ld	r24, Z
    54da:	82 60       	ori	r24, 0x02	; 2
    54dc:	8c 93       	st	X, r24

	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear OC0 on compare match & Set OC0 onThe TOP.
    54de:	a3 e5       	ldi	r26, 0x53	; 83
    54e0:	b0 e0       	ldi	r27, 0x00	; 0
    54e2:	e3 e5       	ldi	r30, 0x53	; 83
    54e4:	f0 e0       	ldi	r31, 0x00	; 0
    54e6:	80 81       	ld	r24, Z
    54e8:	80 62       	ori	r24, 0x20	; 32
    54ea:	8c 93       	st	X, r24
    54ec:	a3 e5       	ldi	r26, 0x53	; 83
    54ee:	b0 e0       	ldi	r27, 0x00	; 0
    54f0:	e3 e5       	ldi	r30, 0x53	; 83
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	80 81       	ld	r24, Z
    54f6:	8f 7e       	andi	r24, 0xEF	; 239
    54f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
	CLR_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#elif(CLOCK_SELECT == CLK_8_PRESCALER )
	CLR_BIT(TCCR0_REG,2);
    54fa:	a3 e5       	ldi	r26, 0x53	; 83
    54fc:	b0 e0       	ldi	r27, 0x00	; 0
    54fe:	e3 e5       	ldi	r30, 0x53	; 83
    5500:	f0 e0       	ldi	r31, 0x00	; 0
    5502:	80 81       	ld	r24, Z
    5504:	8b 7f       	andi	r24, 0xFB	; 251
    5506:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
    5508:	a3 e5       	ldi	r26, 0x53	; 83
    550a:	b0 e0       	ldi	r27, 0x00	; 0
    550c:	e3 e5       	ldi	r30, 0x53	; 83
    550e:	f0 e0       	ldi	r31, 0x00	; 0
    5510:	80 81       	ld	r24, Z
    5512:	82 60       	ori	r24, 0x02	; 2
    5514:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    5516:	a3 e5       	ldi	r26, 0x53	; 83
    5518:	b0 e0       	ldi	r27, 0x00	; 0
    551a:	e3 e5       	ldi	r30, 0x53	; 83
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	80 81       	ld	r24, Z
    5520:	8e 7f       	andi	r24, 0xFE	; 254
    5522:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,2);
	SET_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#endif
}
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	0f 90       	pop	r0
    552a:	0f 90       	pop	r0
    552c:	0f 90       	pop	r0
    552e:	cf 91       	pop	r28
    5530:	df 91       	pop	r29
    5532:	08 95       	ret

00005534 <TIMER0_vidStartTimer_PhaseCorrectMode>:


void TIMER0_vidStartTimer_PhaseCorrectMode(u8 u8InitVal , u8 u8CompareValue,u8 u8PhsCrrectMode)
{
    5534:	df 93       	push	r29
    5536:	cf 93       	push	r28
    5538:	00 d0       	rcall	.+0      	; 0x553a <TIMER0_vidStartTimer_PhaseCorrectMode+0x6>
    553a:	00 d0       	rcall	.+0      	; 0x553c <TIMER0_vidStartTimer_PhaseCorrectMode+0x8>
    553c:	0f 92       	push	r0
    553e:	cd b7       	in	r28, 0x3d	; 61
    5540:	de b7       	in	r29, 0x3e	; 62
    5542:	89 83       	std	Y+1, r24	; 0x01
    5544:	6a 83       	std	Y+2, r22	; 0x02
    5546:	4b 83       	std	Y+3, r20	; 0x03
/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetInitReg(u8InitVal);
    5548:	89 81       	ldd	r24, Y+1	; 0x01
    554a:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <TIMER0_vidSetInitReg>

/**********************************************/
/**************Set Initial Value **************/
/**********************************************/
	TIMER0_vidSetComparReg(u8CompareValue);
    554e:	8a 81       	ldd	r24, Y+2	; 0x02
    5550:	0e 94 02 2b 	call	0x5604	; 0x5604 <TIMER0_vidSetComparReg>

switch(u8PhsCrrectMode)
    5554:	8b 81       	ldd	r24, Y+3	; 0x03
    5556:	28 2f       	mov	r18, r24
    5558:	30 e0       	ldi	r19, 0x00	; 0
    555a:	3d 83       	std	Y+5, r19	; 0x05
    555c:	2c 83       	std	Y+4, r18	; 0x04
    555e:	8c 81       	ldd	r24, Y+4	; 0x04
    5560:	9d 81       	ldd	r25, Y+5	; 0x05
    5562:	81 30       	cpi	r24, 0x01	; 1
    5564:	91 05       	cpc	r25, r1
    5566:	31 f0       	breq	.+12     	; 0x5574 <TIMER0_vidStartTimer_PhaseCorrectMode+0x40>
    5568:	2c 81       	ldd	r18, Y+4	; 0x04
    556a:	3d 81       	ldd	r19, Y+5	; 0x05
    556c:	22 30       	cpi	r18, 0x02	; 2
    556e:	31 05       	cpc	r19, r1
    5570:	81 f0       	breq	.+32     	; 0x5592 <TIMER0_vidStartTimer_PhaseCorrectMode+0x5e>
    5572:	1d c0       	rjmp	.+58     	; 0x55ae <TIMER0_vidStartTimer_PhaseCorrectMode+0x7a>
{
case (TIMER0_PHASECORRECT_PIN_CLEAR_SET):
	SET_BIT(TCCR0_REG,5);CLR_BIT(TCCR0_REG,4);	//Clear The Pin At Up And Set At Down
    5574:	a3 e5       	ldi	r26, 0x53	; 83
    5576:	b0 e0       	ldi	r27, 0x00	; 0
    5578:	e3 e5       	ldi	r30, 0x53	; 83
    557a:	f0 e0       	ldi	r31, 0x00	; 0
    557c:	80 81       	ld	r24, Z
    557e:	80 62       	ori	r24, 0x20	; 32
    5580:	8c 93       	st	X, r24
    5582:	a3 e5       	ldi	r26, 0x53	; 83
    5584:	b0 e0       	ldi	r27, 0x00	; 0
    5586:	e3 e5       	ldi	r30, 0x53	; 83
    5588:	f0 e0       	ldi	r31, 0x00	; 0
    558a:	80 81       	ld	r24, Z
    558c:	8f 7e       	andi	r24, 0xEF	; 239
    558e:	8c 93       	st	X, r24
    5590:	0e c0       	rjmp	.+28     	; 0x55ae <TIMER0_vidStartTimer_PhaseCorrectMode+0x7a>
	break;

case (TIMER0_PHASECORRECT_PIN_SET_CLEAR):
	SET_BIT(TCCR0_REG,5);SET_BIT(TCCR0_REG,4);	//Set The Pin At Up And Clear At Down
    5592:	a3 e5       	ldi	r26, 0x53	; 83
    5594:	b0 e0       	ldi	r27, 0x00	; 0
    5596:	e3 e5       	ldi	r30, 0x53	; 83
    5598:	f0 e0       	ldi	r31, 0x00	; 0
    559a:	80 81       	ld	r24, Z
    559c:	80 62       	ori	r24, 0x20	; 32
    559e:	8c 93       	st	X, r24
    55a0:	a3 e5       	ldi	r26, 0x53	; 83
    55a2:	b0 e0       	ldi	r27, 0x00	; 0
    55a4:	e3 e5       	ldi	r30, 0x53	; 83
    55a6:	f0 e0       	ldi	r31, 0x00	; 0
    55a8:	80 81       	ld	r24, Z
    55aa:	80 61       	ori	r24, 0x10	; 16
    55ac:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
	CLR_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#elif(CLOCK_SELECT == CLK_8_PRESCALER )
	CLR_BIT(TCCR0_REG,2);
    55ae:	a3 e5       	ldi	r26, 0x53	; 83
    55b0:	b0 e0       	ldi	r27, 0x00	; 0
    55b2:	e3 e5       	ldi	r30, 0x53	; 83
    55b4:	f0 e0       	ldi	r31, 0x00	; 0
    55b6:	80 81       	ld	r24, Z
    55b8:	8b 7f       	andi	r24, 0xFB	; 251
    55ba:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
    55bc:	a3 e5       	ldi	r26, 0x53	; 83
    55be:	b0 e0       	ldi	r27, 0x00	; 0
    55c0:	e3 e5       	ldi	r30, 0x53	; 83
    55c2:	f0 e0       	ldi	r31, 0x00	; 0
    55c4:	80 81       	ld	r24, Z
    55c6:	82 60       	ori	r24, 0x02	; 2
    55c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    55ca:	a3 e5       	ldi	r26, 0x53	; 83
    55cc:	b0 e0       	ldi	r27, 0x00	; 0
    55ce:	e3 e5       	ldi	r30, 0x53	; 83
    55d0:	f0 e0       	ldi	r31, 0x00	; 0
    55d2:	80 81       	ld	r24, Z
    55d4:	8e 7f       	andi	r24, 0xFE	; 254
    55d6:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,2);
	SET_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#endif
}
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	0f 90       	pop	r0
    55de:	0f 90       	pop	r0
    55e0:	0f 90       	pop	r0
    55e2:	cf 91       	pop	r28
    55e4:	df 91       	pop	r29
    55e6:	08 95       	ret

000055e8 <TIMER0_vidSetInitReg>:


void TIMER0_vidSetInitReg(u8 u8InitVal)
{
    55e8:	df 93       	push	r29
    55ea:	cf 93       	push	r28
    55ec:	0f 92       	push	r0
    55ee:	cd b7       	in	r28, 0x3d	; 61
    55f0:	de b7       	in	r29, 0x3e	; 62
    55f2:	89 83       	std	Y+1, r24	; 0x01
	 TCNT0_REG = u8InitVal;
    55f4:	e2 e5       	ldi	r30, 0x52	; 82
    55f6:	f0 e0       	ldi	r31, 0x00	; 0
    55f8:	89 81       	ldd	r24, Y+1	; 0x01
    55fa:	80 83       	st	Z, r24
}
    55fc:	0f 90       	pop	r0
    55fe:	cf 91       	pop	r28
    5600:	df 91       	pop	r29
    5602:	08 95       	ret

00005604 <TIMER0_vidSetComparReg>:

void TIMER0_vidSetComparReg(u8 u8CompareValue)
{
    5604:	df 93       	push	r29
    5606:	cf 93       	push	r28
    5608:	0f 92       	push	r0
    560a:	cd b7       	in	r28, 0x3d	; 61
    560c:	de b7       	in	r29, 0x3e	; 62
    560e:	89 83       	std	Y+1, r24	; 0x01
	 OCR0_REG = u8CompareValue;
    5610:	ec e5       	ldi	r30, 0x5C	; 92
    5612:	f0 e0       	ldi	r31, 0x00	; 0
    5614:	89 81       	ldd	r24, Y+1	; 0x01
    5616:	80 83       	st	Z, r24
}
    5618:	0f 90       	pop	r0
    561a:	cf 91       	pop	r28
    561c:	df 91       	pop	r29
    561e:	08 95       	ret

00005620 <TIMER0_vidGetCounterReg>:


u8 TIMER0_vidGetCounterReg(void)
{
    5620:	df 93       	push	r29
    5622:	cf 93       	push	r28
    5624:	cd b7       	in	r28, 0x3d	; 61
    5626:	de b7       	in	r29, 0x3e	; 62
	return (TCNT0_REG) ;
    5628:	e2 e5       	ldi	r30, 0x52	; 82
    562a:	f0 e0       	ldi	r31, 0x00	; 0
    562c:	80 81       	ld	r24, Z
}
    562e:	cf 91       	pop	r28
    5630:	df 91       	pop	r29
    5632:	08 95       	ret

00005634 <TIMER0_vidGETComparReg>:

u8 TIMER0_vidGETComparReg(void)
{
    5634:	df 93       	push	r29
    5636:	cf 93       	push	r28
    5638:	cd b7       	in	r28, 0x3d	; 61
    563a:	de b7       	in	r29, 0x3e	; 62
	return (OCR0_REG);
    563c:	ec e5       	ldi	r30, 0x5C	; 92
    563e:	f0 e0       	ldi	r31, 0x00	; 0
    5640:	80 81       	ld	r24, Z
}
    5642:	cf 91       	pop	r28
    5644:	df 91       	pop	r29
    5646:	08 95       	ret

00005648 <TIMER0_vidEnableOverFlowInterrupt>:

void TIMER0_vidEnableOverFlowInterrupt(void)
{
    5648:	df 93       	push	r29
    564a:	cf 93       	push	r28
    564c:	cd b7       	in	r28, 0x3d	; 61
    564e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SR_REG,7);  	//Global Interrupt
    5650:	af e5       	ldi	r26, 0x5F	; 95
    5652:	b0 e0       	ldi	r27, 0x00	; 0
    5654:	ef e5       	ldi	r30, 0x5F	; 95
    5656:	f0 e0       	ldi	r31, 0x00	; 0
    5658:	80 81       	ld	r24, Z
    565a:	80 68       	ori	r24, 0x80	; 128
    565c:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    565e:	a9 e5       	ldi	r26, 0x59	; 89
    5660:	b0 e0       	ldi	r27, 0x00	; 0
    5662:	e9 e5       	ldi	r30, 0x59	; 89
    5664:	f0 e0       	ldi	r31, 0x00	; 0
    5666:	80 81       	ld	r24, Z
    5668:	81 60       	ori	r24, 0x01	; 1
    566a:	8c 93       	st	X, r24
}
    566c:	cf 91       	pop	r28
    566e:	df 91       	pop	r29
    5670:	08 95       	ret

00005672 <TIMER0_vidEnableCompareMatchInterrupt>:
void TIMER0_vidEnableCompareMatchInterrupt(void)
{
    5672:	df 93       	push	r29
    5674:	cf 93       	push	r28
    5676:	cd b7       	in	r28, 0x3d	; 61
    5678:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SR_REG,7);  	//Global Interrupt
    567a:	af e5       	ldi	r26, 0x5F	; 95
    567c:	b0 e0       	ldi	r27, 0x00	; 0
    567e:	ef e5       	ldi	r30, 0x5F	; 95
    5680:	f0 e0       	ldi	r31, 0x00	; 0
    5682:	80 81       	ld	r24, Z
    5684:	80 68       	ori	r24, 0x80	; 128
    5686:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    5688:	a9 e5       	ldi	r26, 0x59	; 89
    568a:	b0 e0       	ldi	r27, 0x00	; 0
    568c:	e9 e5       	ldi	r30, 0x59	; 89
    568e:	f0 e0       	ldi	r31, 0x00	; 0
    5690:	80 81       	ld	r24, Z
    5692:	82 60       	ori	r24, 0x02	; 2
    5694:	8c 93       	st	X, r24
}
    5696:	cf 91       	pop	r28
    5698:	df 91       	pop	r29
    569a:	08 95       	ret

0000569c <TIMER0_vidDisableOverFlowInterrupt>:

void TIMER0_vidDisableOverFlowInterrupt(void)
{
    569c:	df 93       	push	r29
    569e:	cf 93       	push	r28
    56a0:	cd b7       	in	r28, 0x3d	; 61
    56a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,0);	//Over Flow Interrupt For Timer 0
    56a4:	a9 e5       	ldi	r26, 0x59	; 89
    56a6:	b0 e0       	ldi	r27, 0x00	; 0
    56a8:	e9 e5       	ldi	r30, 0x59	; 89
    56aa:	f0 e0       	ldi	r31, 0x00	; 0
    56ac:	80 81       	ld	r24, Z
    56ae:	8e 7f       	andi	r24, 0xFE	; 254
    56b0:	8c 93       	st	X, r24
}
    56b2:	cf 91       	pop	r28
    56b4:	df 91       	pop	r29
    56b6:	08 95       	ret

000056b8 <TIMER0_vidDisableCompareMatchInterrupt>:
void TIMER0_vidDisableCompareMatchInterrupt(void)
{
    56b8:	df 93       	push	r29
    56ba:	cf 93       	push	r28
    56bc:	cd b7       	in	r28, 0x3d	; 61
    56be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,1);	//Output Compare Interrupt For Timer 0
    56c0:	a9 e5       	ldi	r26, 0x59	; 89
    56c2:	b0 e0       	ldi	r27, 0x00	; 0
    56c4:	e9 e5       	ldi	r30, 0x59	; 89
    56c6:	f0 e0       	ldi	r31, 0x00	; 0
    56c8:	80 81       	ld	r24, Z
    56ca:	8d 7f       	andi	r24, 0xFD	; 253
    56cc:	8c 93       	st	X, r24
}
    56ce:	cf 91       	pop	r28
    56d0:	df 91       	pop	r29
    56d2:	08 95       	ret

000056d4 <TIMER0_vidStopTimer>:

void TIMER0_vidStopTimer(void)
{
    56d4:	df 93       	push	r29
    56d6:	cf 93       	push	r28
    56d8:	cd b7       	in	r28, 0x3d	; 61
    56da:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,2);
    56dc:	a3 e5       	ldi	r26, 0x53	; 83
    56de:	b0 e0       	ldi	r27, 0x00	; 0
    56e0:	e3 e5       	ldi	r30, 0x53	; 83
    56e2:	f0 e0       	ldi	r31, 0x00	; 0
    56e4:	80 81       	ld	r24, Z
    56e6:	8b 7f       	andi	r24, 0xFB	; 251
    56e8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,1);
    56ea:	a3 e5       	ldi	r26, 0x53	; 83
    56ec:	b0 e0       	ldi	r27, 0x00	; 0
    56ee:	e3 e5       	ldi	r30, 0x53	; 83
    56f0:	f0 e0       	ldi	r31, 0x00	; 0
    56f2:	80 81       	ld	r24, Z
    56f4:	8d 7f       	andi	r24, 0xFD	; 253
    56f6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    56f8:	a3 e5       	ldi	r26, 0x53	; 83
    56fa:	b0 e0       	ldi	r27, 0x00	; 0
    56fc:	e3 e5       	ldi	r30, 0x53	; 83
    56fe:	f0 e0       	ldi	r31, 0x00	; 0
    5700:	80 81       	ld	r24, Z
    5702:	8e 7f       	andi	r24, 0xFE	; 254
    5704:	8c 93       	st	X, r24
}
    5706:	cf 91       	pop	r28
    5708:	df 91       	pop	r29
    570a:	08 95       	ret

0000570c <TIMER0_ContCounting>:

void TIMER0_ContCounting(void)
{
    570c:	df 93       	push	r29
    570e:	cf 93       	push	r28
    5710:	cd b7       	in	r28, 0x3d	; 61
    5712:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,2);
	CLR_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#elif(CLOCK_SELECT == CLK_8_PRESCALER )
	CLR_BIT(TCCR0_REG,2);
    5714:	a3 e5       	ldi	r26, 0x53	; 83
    5716:	b0 e0       	ldi	r27, 0x00	; 0
    5718:	e3 e5       	ldi	r30, 0x53	; 83
    571a:	f0 e0       	ldi	r31, 0x00	; 0
    571c:	80 81       	ld	r24, Z
    571e:	8b 7f       	andi	r24, 0xFB	; 251
    5720:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
    5722:	a3 e5       	ldi	r26, 0x53	; 83
    5724:	b0 e0       	ldi	r27, 0x00	; 0
    5726:	e3 e5       	ldi	r30, 0x53	; 83
    5728:	f0 e0       	ldi	r31, 0x00	; 0
    572a:	80 81       	ld	r24, Z
    572c:	82 60       	ori	r24, 0x02	; 2
    572e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,0);
    5730:	a3 e5       	ldi	r26, 0x53	; 83
    5732:	b0 e0       	ldi	r27, 0x00	; 0
    5734:	e3 e5       	ldi	r30, 0x53	; 83
    5736:	f0 e0       	ldi	r31, 0x00	; 0
    5738:	80 81       	ld	r24, Z
    573a:	8e 7f       	andi	r24, 0xFE	; 254
    573c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,2);
	SET_BIT(TCCR0_REG,1);
	SET_BIT(TCCR0_REG,0);

#endif
}
    573e:	cf 91       	pop	r28
    5740:	df 91       	pop	r29
    5742:	08 95       	ret

00005744 <TIMER0_vidEnableAllInterrupt>:


void TIMER0_vidEnableAllInterrupt(void)
{
    5744:	df 93       	push	r29
    5746:	cf 93       	push	r28
    5748:	cd b7       	in	r28, 0x3d	; 61
    574a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SR_REG,7);
    574c:	af e5       	ldi	r26, 0x5F	; 95
    574e:	b0 e0       	ldi	r27, 0x00	; 0
    5750:	ef e5       	ldi	r30, 0x5F	; 95
    5752:	f0 e0       	ldi	r31, 0x00	; 0
    5754:	80 81       	ld	r24, Z
    5756:	80 68       	ori	r24, 0x80	; 128
    5758:	8c 93       	st	X, r24
}
    575a:	cf 91       	pop	r28
    575c:	df 91       	pop	r29
    575e:	08 95       	ret

00005760 <TIMER0_vidDisableAllInterrupt>:
void TIMER0_vidDisableAllInterrupt(void)
{
    5760:	df 93       	push	r29
    5762:	cf 93       	push	r28
    5764:	cd b7       	in	r28, 0x3d	; 61
    5766:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SR_REG,7);
    5768:	af e5       	ldi	r26, 0x5F	; 95
    576a:	b0 e0       	ldi	r27, 0x00	; 0
    576c:	ef e5       	ldi	r30, 0x5F	; 95
    576e:	f0 e0       	ldi	r31, 0x00	; 0
    5770:	80 81       	ld	r24, Z
    5772:	8f 77       	andi	r24, 0x7F	; 127
    5774:	8c 93       	st	X, r24
}
    5776:	cf 91       	pop	r28
    5778:	df 91       	pop	r29
    577a:	08 95       	ret

0000577c <__vector_11>:


void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    577c:	1f 92       	push	r1
    577e:	0f 92       	push	r0
    5780:	0f b6       	in	r0, 0x3f	; 63
    5782:	0f 92       	push	r0
    5784:	11 24       	eor	r1, r1
    5786:	2f 93       	push	r18
    5788:	3f 93       	push	r19
    578a:	4f 93       	push	r20
    578c:	5f 93       	push	r21
    578e:	6f 93       	push	r22
    5790:	7f 93       	push	r23
    5792:	8f 93       	push	r24
    5794:	9f 93       	push	r25
    5796:	af 93       	push	r26
    5798:	bf 93       	push	r27
    579a:	ef 93       	push	r30
    579c:	ff 93       	push	r31
    579e:	df 93       	push	r29
    57a0:	cf 93       	push	r28
    57a2:	cd b7       	in	r28, 0x3d	; 61
    57a4:	de b7       	in	r29, 0x3e	; 62
	Timer0_OF_Call_Back();
    57a6:	e0 91 83 01 	lds	r30, 0x0183
    57aa:	f0 91 84 01 	lds	r31, 0x0184
    57ae:	09 95       	icall
}
    57b0:	cf 91       	pop	r28
    57b2:	df 91       	pop	r29
    57b4:	ff 91       	pop	r31
    57b6:	ef 91       	pop	r30
    57b8:	bf 91       	pop	r27
    57ba:	af 91       	pop	r26
    57bc:	9f 91       	pop	r25
    57be:	8f 91       	pop	r24
    57c0:	7f 91       	pop	r23
    57c2:	6f 91       	pop	r22
    57c4:	5f 91       	pop	r21
    57c6:	4f 91       	pop	r20
    57c8:	3f 91       	pop	r19
    57ca:	2f 91       	pop	r18
    57cc:	0f 90       	pop	r0
    57ce:	0f be       	out	0x3f, r0	; 63
    57d0:	0f 90       	pop	r0
    57d2:	1f 90       	pop	r1
    57d4:	18 95       	reti

000057d6 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    57d6:	1f 92       	push	r1
    57d8:	0f 92       	push	r0
    57da:	0f b6       	in	r0, 0x3f	; 63
    57dc:	0f 92       	push	r0
    57de:	11 24       	eor	r1, r1
    57e0:	2f 93       	push	r18
    57e2:	3f 93       	push	r19
    57e4:	4f 93       	push	r20
    57e6:	5f 93       	push	r21
    57e8:	6f 93       	push	r22
    57ea:	7f 93       	push	r23
    57ec:	8f 93       	push	r24
    57ee:	9f 93       	push	r25
    57f0:	af 93       	push	r26
    57f2:	bf 93       	push	r27
    57f4:	ef 93       	push	r30
    57f6:	ff 93       	push	r31
    57f8:	df 93       	push	r29
    57fa:	cf 93       	push	r28
    57fc:	cd b7       	in	r28, 0x3d	; 61
    57fe:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_Call_Back();
    5800:	e0 91 81 01 	lds	r30, 0x0181
    5804:	f0 91 82 01 	lds	r31, 0x0182
    5808:	09 95       	icall
}
    580a:	cf 91       	pop	r28
    580c:	df 91       	pop	r29
    580e:	ff 91       	pop	r31
    5810:	ef 91       	pop	r30
    5812:	bf 91       	pop	r27
    5814:	af 91       	pop	r26
    5816:	9f 91       	pop	r25
    5818:	8f 91       	pop	r24
    581a:	7f 91       	pop	r23
    581c:	6f 91       	pop	r22
    581e:	5f 91       	pop	r21
    5820:	4f 91       	pop	r20
    5822:	3f 91       	pop	r19
    5824:	2f 91       	pop	r18
    5826:	0f 90       	pop	r0
    5828:	0f be       	out	0x3f, r0	; 63
    582a:	0f 90       	pop	r0
    582c:	1f 90       	pop	r1
    582e:	18 95       	reti

00005830 <main>:

/*Counting One Second*/
void Sec_Timing(void);

int main()
{
    5830:	df 93       	push	r29
    5832:	cf 93       	push	r28
    5834:	cd b7       	in	r28, 0x3d	; 61
    5836:	de b7       	in	r29, 0x3e	; 62
	TIMER0_vidInit();
    5838:	0e 94 e5 27 	call	0x4fca	; 0x4fca <TIMER0_vidInit>
	LCD_vidInit();
    583c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <LCD_vidInit>

	DIO_vidSetPinDir(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    5840:	83 e0       	ldi	r24, 0x03	; 3
    5842:	62 e0       	ldi	r22, 0x02	; 2
    5844:	40 e0       	ldi	r20, 0x00	; 0
    5846:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTD,DIO_PIN3,DIO_INPUT);
    584a:	83 e0       	ldi	r24, 0x03	; 3
    584c:	63 e0       	ldi	r22, 0x03	; 3
    584e:	40 e0       	ldi	r20, 0x00	; 0
    5850:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTD,DIO_PIN4,DIO_INPUT);
    5854:	83 e0       	ldi	r24, 0x03	; 3
    5856:	64 e0       	ldi	r22, 0x04	; 4
    5858:	40 e0       	ldi	r20, 0x00	; 0
    585a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTD,DIO_PIN5,DIO_INPUT);
    585e:	83 e0       	ldi	r24, 0x03	; 3
    5860:	65 e0       	ldi	r22, 0x05	; 5
    5862:	40 e0       	ldi	r20, 0x00	; 0
    5864:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTD,DIO_PIN6,DIO_INPUT);
    5868:	83 e0       	ldi	r24, 0x03	; 3
    586a:	66 e0       	ldi	r22, 0x06	; 6
    586c:	40 e0       	ldi	r20, 0x00	; 0
    586e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <DIO_vidSetPinDir>

	DIO_vidEnablePullUpRes(DIO_PORTD,DIO_PIN2);
    5872:	83 e0       	ldi	r24, 0x03	; 3
    5874:	62 e0       	ldi	r22, 0x02	; 2
    5876:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <DIO_vidEnablePullUpRes>
	DIO_vidEnablePullUpRes(DIO_PORTD,DIO_PIN3);
    587a:	83 e0       	ldi	r24, 0x03	; 3
    587c:	63 e0       	ldi	r22, 0x03	; 3
    587e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <DIO_vidEnablePullUpRes>
	DIO_vidEnablePullUpRes(DIO_PORTD,DIO_PIN4);
    5882:	83 e0       	ldi	r24, 0x03	; 3
    5884:	64 e0       	ldi	r22, 0x04	; 4
    5886:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <DIO_vidEnablePullUpRes>
	DIO_vidEnablePullUpRes(DIO_PORTD,DIO_PIN5);
    588a:	83 e0       	ldi	r24, 0x03	; 3
    588c:	65 e0       	ldi	r22, 0x05	; 5
    588e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <DIO_vidEnablePullUpRes>
	DIO_vidEnablePullUpRes(DIO_PORTD,DIO_PIN6);
    5892:	83 e0       	ldi	r24, 0x03	; 3
    5894:	66 e0       	ldi	r22, 0x06	; 6
    5896:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <DIO_vidEnablePullUpRes>

	DIO_vidEnableIntrupt(DIO_INT_NUM0,DIO_INT_F_EDGE);
    589a:	80 e0       	ldi	r24, 0x00	; 0
    589c:	62 e0       	ldi	r22, 0x02	; 2
    589e:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_vidEnableIntrupt>

	LCD_vidSendCommand(LCD_CURSUROFF_BLINKOFF);
    58a2:	8c e0       	ldi	r24, 0x0C	; 12
    58a4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
	Timer0_CTC_Call_Back = Sec_Timing;
    58a8:	82 ec       	ldi	r24, 0xC2	; 194
    58aa:	95 e3       	ldi	r25, 0x35	; 53
    58ac:	90 93 82 01 	sts	0x0182, r25
    58b0:	80 93 81 01 	sts	0x0181, r24
	DIO_INT0_Call_Back = Mode_Chang;
    58b4:	87 e3       	ldi	r24, 0x37	; 55
    58b6:	96 e3       	ldi	r25, 0x36	; 54
    58b8:	90 93 80 01 	sts	0x0180, r25
    58bc:	80 93 7f 01 	sts	0x017F, r24


	LCD_vidWriteStringAtPossition((u8 *)"Time: ",0,0);
    58c0:	80 e6       	ldi	r24, 0x60	; 96
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	60 e0       	ldi	r22, 0x00	; 0
    58c6:	40 e0       	ldi	r20, 0x00	; 0
    58c8:	0e 94 c9 21 	call	0x4392	; 0x4392 <LCD_vidWriteStringAtPossition>
	LCD_vidWriteCharctr('0');
    58cc:	80 e3       	ldi	r24, 0x30	; 48
    58ce:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr('0');
    58d2:	80 e3       	ldi	r24, 0x30	; 48
    58d4:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr(':');
    58d8:	8a e3       	ldi	r24, 0x3A	; 58
    58da:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr('0');
    58de:	80 e3       	ldi	r24, 0x30	; 48
    58e0:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr('0');
    58e4:	80 e3       	ldi	r24, 0x30	; 48
    58e6:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr(':');
    58ea:	8a e3       	ldi	r24, 0x3A	; 58
    58ec:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr('0');
    58f0:	80 e3       	ldi	r24, 0x30	; 48
    58f2:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr('0');
    58f6:	80 e3       	ldi	r24, 0x30	; 48
    58f8:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>

	LCD_vidWriteStringAtPossition((u8 *)"Date: ",1,0);
    58fc:	87 e6       	ldi	r24, 0x67	; 103
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	61 e0       	ldi	r22, 0x01	; 1
    5902:	40 e0       	ldi	r20, 0x00	; 0
    5904:	0e 94 c9 21 	call	0x4392	; 0x4392 <LCD_vidWriteStringAtPossition>
	LCD_vidWriteCharctr('0');
    5908:	80 e3       	ldi	r24, 0x30	; 48
    590a:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr('1');
    590e:	81 e3       	ldi	r24, 0x31	; 49
    5910:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr(':');
    5914:	8a e3       	ldi	r24, 0x3A	; 58
    5916:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr('0');
    591a:	80 e3       	ldi	r24, 0x30	; 48
    591c:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
	LCD_vidWriteCharctr('1');
    5920:	81 e3       	ldi	r24, 0x31	; 49
    5922:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>


	TIMER0_vidStartTimer_CTCMode(0,250,TIMER0_CTC_CM_INTRUPT);
    5926:	80 e0       	ldi	r24, 0x00	; 0
    5928:	6a ef       	ldi	r22, 0xFA	; 250
    592a:	40 e0       	ldi	r20, 0x00	; 0
    592c:	0e 94 2a 28 	call	0x5054	; 0x5054 <TIMER0_vidStartTimer_CTCMode>
    5930:	f8 c0       	rjmp	.+496    	; 0x5b22 <main+0x2f2>
while(1)
{

while (Mode == MODE1)
		{
			if(Sec_Counter >= 60)
    5932:	80 91 7b 01 	lds	r24, 0x017B
    5936:	8c 33       	cpi	r24, 0x3C	; 60
    5938:	08 f4       	brcc	.+2      	; 0x593c <main+0x10c>
    593a:	f3 c0       	rjmp	.+486    	; 0x5b22 <main+0x2f2>
			{
				Sec_Counter = 0;
    593c:	10 92 7b 01 	sts	0x017B, r1
				Min_Counter++;
    5940:	80 91 7c 01 	lds	r24, 0x017C
    5944:	8f 5f       	subi	r24, 0xFF	; 255
    5946:	80 93 7c 01 	sts	0x017C, r24
				if(Min_Counter >=60)
    594a:	80 91 7c 01 	lds	r24, 0x017C
    594e:	8c 33       	cpi	r24, 0x3C	; 60
    5950:	08 f4       	brcc	.+2      	; 0x5954 <main+0x124>
    5952:	b7 c0       	rjmp	.+366    	; 0x5ac2 <main+0x292>
				{
					Min_Counter = 0;
    5954:	10 92 7c 01 	sts	0x017C, r1
					Hour_Counter++;
    5958:	80 91 7d 01 	lds	r24, 0x017D
    595c:	8f 5f       	subi	r24, 0xFF	; 255
    595e:	80 93 7d 01 	sts	0x017D, r24
					if(Hour_Counter >=24)
    5962:	80 91 7d 01 	lds	r24, 0x017D
    5966:	88 31       	cpi	r24, 0x18	; 24
    5968:	08 f4       	brcc	.+2      	; 0x596c <main+0x13c>
    596a:	7b c0       	rjmp	.+246    	; 0x5a62 <main+0x232>
					{
						Hour_Counter = 0;
    596c:	10 92 7d 01 	sts	0x017D, r1
						Day_Counter++;
    5970:	80 91 76 01 	lds	r24, 0x0176
    5974:	8f 5f       	subi	r24, 0xFF	; 255
    5976:	80 93 76 01 	sts	0x0176, r24
						if(Day_Counter >=31)
    597a:	80 91 76 01 	lds	r24, 0x0176
    597e:	8f 31       	cpi	r24, 0x1F	; 31
    5980:	08 f4       	brcc	.+2      	; 0x5984 <main+0x154>
    5982:	3f c0       	rjmp	.+126    	; 0x5a02 <main+0x1d2>
						{
							Day_Counter = 1;
    5984:	81 e0       	ldi	r24, 0x01	; 1
    5986:	80 93 76 01 	sts	0x0176, r24
							Mon_Counter++;
    598a:	80 91 77 01 	lds	r24, 0x0177
    598e:	8f 5f       	subi	r24, 0xFF	; 255
    5990:	80 93 77 01 	sts	0x0177, r24
							if(Mon_Counter >=13)
    5994:	80 91 77 01 	lds	r24, 0x0177
    5998:	8d 30       	cpi	r24, 0x0D	; 13
    599a:	18 f0       	brcs	.+6      	; 0x59a2 <main+0x172>
							{
								Mon_Counter = 1;
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	80 93 77 01 	sts	0x0177, r24
							}
							if(Mon_Counter <10)
    59a2:	80 91 77 01 	lds	r24, 0x0177
    59a6:	8a 30       	cpi	r24, 0x0A	; 10
    59a8:	c0 f4       	brcc	.+48     	; 0x59da <main+0x1aa>
							{
								LCD_vidGotoxy(1,9);
    59aa:	81 e0       	ldi	r24, 0x01	; 1
    59ac:	69 e0       	ldi	r22, 0x09	; 9
    59ae:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
								LCD_vidWriteCharctr('0');
    59b2:	80 e3       	ldi	r24, 0x30	; 48
    59b4:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
								LCD_vidWriteflt((f32)Mon_Counter);
    59b8:	80 91 77 01 	lds	r24, 0x0177
    59bc:	88 2f       	mov	r24, r24
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	a0 e0       	ldi	r26, 0x00	; 0
    59c2:	b0 e0       	ldi	r27, 0x00	; 0
    59c4:	bc 01       	movw	r22, r24
    59c6:	cd 01       	movw	r24, r26
    59c8:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    59cc:	dc 01       	movw	r26, r24
    59ce:	cb 01       	movw	r24, r22
    59d0:	bc 01       	movw	r22, r24
    59d2:	cd 01       	movw	r24, r26
    59d4:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    59d8:	14 c0       	rjmp	.+40     	; 0x5a02 <main+0x1d2>
							}
							else
							{
								LCD_vidGotoxy(1,9);
    59da:	81 e0       	ldi	r24, 0x01	; 1
    59dc:	69 e0       	ldi	r22, 0x09	; 9
    59de:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
								LCD_vidWriteflt((f32)Mon_Counter);
    59e2:	80 91 77 01 	lds	r24, 0x0177
    59e6:	88 2f       	mov	r24, r24
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	a0 e0       	ldi	r26, 0x00	; 0
    59ec:	b0 e0       	ldi	r27, 0x00	; 0
    59ee:	bc 01       	movw	r22, r24
    59f0:	cd 01       	movw	r24, r26
    59f2:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    59f6:	dc 01       	movw	r26, r24
    59f8:	cb 01       	movw	r24, r22
    59fa:	bc 01       	movw	r22, r24
    59fc:	cd 01       	movw	r24, r26
    59fe:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
							}
						}
						if(Day_Counter <10)
    5a02:	80 91 76 01 	lds	r24, 0x0176
    5a06:	8a 30       	cpi	r24, 0x0A	; 10
    5a08:	c0 f4       	brcc	.+48     	; 0x5a3a <main+0x20a>
						{
							LCD_vidGotoxy(1,6);
    5a0a:	81 e0       	ldi	r24, 0x01	; 1
    5a0c:	66 e0       	ldi	r22, 0x06	; 6
    5a0e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteCharctr('0');
    5a12:	80 e3       	ldi	r24, 0x30	; 48
    5a14:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
							LCD_vidWriteflt((f32)Day_Counter);
    5a18:	80 91 76 01 	lds	r24, 0x0176
    5a1c:	88 2f       	mov	r24, r24
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	a0 e0       	ldi	r26, 0x00	; 0
    5a22:	b0 e0       	ldi	r27, 0x00	; 0
    5a24:	bc 01       	movw	r22, r24
    5a26:	cd 01       	movw	r24, r26
    5a28:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5a2c:	dc 01       	movw	r26, r24
    5a2e:	cb 01       	movw	r24, r22
    5a30:	bc 01       	movw	r22, r24
    5a32:	cd 01       	movw	r24, r26
    5a34:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5a38:	14 c0       	rjmp	.+40     	; 0x5a62 <main+0x232>
						}
						else
						{
							LCD_vidGotoxy(1,6);
    5a3a:	81 e0       	ldi	r24, 0x01	; 1
    5a3c:	66 e0       	ldi	r22, 0x06	; 6
    5a3e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteflt((f32)Day_Counter);
    5a42:	80 91 76 01 	lds	r24, 0x0176
    5a46:	88 2f       	mov	r24, r24
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	a0 e0       	ldi	r26, 0x00	; 0
    5a4c:	b0 e0       	ldi	r27, 0x00	; 0
    5a4e:	bc 01       	movw	r22, r24
    5a50:	cd 01       	movw	r24, r26
    5a52:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5a56:	dc 01       	movw	r26, r24
    5a58:	cb 01       	movw	r24, r22
    5a5a:	bc 01       	movw	r22, r24
    5a5c:	cd 01       	movw	r24, r26
    5a5e:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
						}

					}

					if(Hour_Counter <10)
    5a62:	80 91 7d 01 	lds	r24, 0x017D
    5a66:	8a 30       	cpi	r24, 0x0A	; 10
    5a68:	c0 f4       	brcc	.+48     	; 0x5a9a <main+0x26a>
					{
						LCD_vidGotoxy(0,6);
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	66 e0       	ldi	r22, 0x06	; 6
    5a6e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteCharctr('0');
    5a72:	80 e3       	ldi	r24, 0x30	; 48
    5a74:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
						LCD_vidWriteflt((f32)Hour_Counter);
    5a78:	80 91 7d 01 	lds	r24, 0x017D
    5a7c:	88 2f       	mov	r24, r24
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	a0 e0       	ldi	r26, 0x00	; 0
    5a82:	b0 e0       	ldi	r27, 0x00	; 0
    5a84:	bc 01       	movw	r22, r24
    5a86:	cd 01       	movw	r24, r26
    5a88:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5a8c:	dc 01       	movw	r26, r24
    5a8e:	cb 01       	movw	r24, r22
    5a90:	bc 01       	movw	r22, r24
    5a92:	cd 01       	movw	r24, r26
    5a94:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5a98:	14 c0       	rjmp	.+40     	; 0x5ac2 <main+0x292>
					}
					else
					{
						LCD_vidGotoxy(0,6);
    5a9a:	80 e0       	ldi	r24, 0x00	; 0
    5a9c:	66 e0       	ldi	r22, 0x06	; 6
    5a9e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteflt((f32)Hour_Counter);
    5aa2:	80 91 7d 01 	lds	r24, 0x017D
    5aa6:	88 2f       	mov	r24, r24
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	a0 e0       	ldi	r26, 0x00	; 0
    5aac:	b0 e0       	ldi	r27, 0x00	; 0
    5aae:	bc 01       	movw	r22, r24
    5ab0:	cd 01       	movw	r24, r26
    5ab2:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5ab6:	dc 01       	movw	r26, r24
    5ab8:	cb 01       	movw	r24, r22
    5aba:	bc 01       	movw	r22, r24
    5abc:	cd 01       	movw	r24, r26
    5abe:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
					}
				}

				if(Min_Counter <10)
    5ac2:	80 91 7c 01 	lds	r24, 0x017C
    5ac6:	8a 30       	cpi	r24, 0x0A	; 10
    5ac8:	c0 f4       	brcc	.+48     	; 0x5afa <main+0x2ca>
				{
					LCD_vidGotoxy(0,9);
    5aca:	80 e0       	ldi	r24, 0x00	; 0
    5acc:	69 e0       	ldi	r22, 0x09	; 9
    5ace:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    5ad2:	80 e3       	ldi	r24, 0x30	; 48
    5ad4:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Min_Counter);
    5ad8:	80 91 7c 01 	lds	r24, 0x017C
    5adc:	88 2f       	mov	r24, r24
    5ade:	90 e0       	ldi	r25, 0x00	; 0
    5ae0:	a0 e0       	ldi	r26, 0x00	; 0
    5ae2:	b0 e0       	ldi	r27, 0x00	; 0
    5ae4:	bc 01       	movw	r22, r24
    5ae6:	cd 01       	movw	r24, r26
    5ae8:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5aec:	dc 01       	movw	r26, r24
    5aee:	cb 01       	movw	r24, r22
    5af0:	bc 01       	movw	r22, r24
    5af2:	cd 01       	movw	r24, r26
    5af4:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5af8:	14 c0       	rjmp	.+40     	; 0x5b22 <main+0x2f2>
				}
				else
				{
					LCD_vidGotoxy(0,9);
    5afa:	80 e0       	ldi	r24, 0x00	; 0
    5afc:	69 e0       	ldi	r22, 0x09	; 9
    5afe:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Min_Counter);
    5b02:	80 91 7c 01 	lds	r24, 0x017C
    5b06:	88 2f       	mov	r24, r24
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	a0 e0       	ldi	r26, 0x00	; 0
    5b0c:	b0 e0       	ldi	r27, 0x00	; 0
    5b0e:	bc 01       	movw	r22, r24
    5b10:	cd 01       	movw	r24, r26
    5b12:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5b16:	dc 01       	movw	r26, r24
    5b18:	cb 01       	movw	r24, r22
    5b1a:	bc 01       	movw	r22, r24
    5b1c:	cd 01       	movw	r24, r26
    5b1e:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
	TIMER0_vidStartTimer_CTCMode(0,250,TIMER0_CTC_CM_INTRUPT);

while(1)
{

while (Mode == MODE1)
    5b22:	80 91 78 01 	lds	r24, 0x0178
    5b26:	81 30       	cpi	r24, 0x01	; 1
    5b28:	09 f4       	brne	.+2      	; 0x5b2c <main+0x2fc>
    5b2a:	03 cf       	rjmp	.-506    	; 0x5932 <main+0x102>
					LCD_vidWriteflt((f32)Min_Counter);
				}
			}
		}

		LCD_vidGotoxy(0,7);
    5b2c:	80 e0       	ldi	r24, 0x00	; 0
    5b2e:	67 e0       	ldi	r22, 0x07	; 7
    5b30:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    5b34:	0c 94 ba 35 	jmp	0x6b74	; 0x6b74 <main+0x1344>

while (Mode == MODE2)
	{
		/*Up*/
		if((DIO_u8GetPinVal(DIO_PORTD,DIO_PIN3) == 0))
    5b38:	83 e0       	ldi	r24, 0x03	; 3
    5b3a:	63 e0       	ldi	r22, 0x03	; 3
    5b3c:	0e 94 3d 18 	call	0x307a	; 0x307a <DIO_u8GetPinVal>
    5b40:	88 23       	and	r24, r24
    5b42:	09 f0       	breq	.+2      	; 0x5b46 <main+0x316>
    5b44:	c0 c3       	rjmp	.+1920   	; 0x62c6 <main+0xa96>
		{
			while(DIO_u8GetPinVal(DIO_PORTD,DIO_PIN3) == 0);
    5b46:	83 e0       	ldi	r24, 0x03	; 3
    5b48:	63 e0       	ldi	r22, 0x03	; 3
    5b4a:	0e 94 3d 18 	call	0x307a	; 0x307a <DIO_u8GetPinVal>
    5b4e:	88 23       	and	r24, r24
    5b50:	d1 f3       	breq	.-12     	; 0x5b46 <main+0x316>
			if(Location == 0)
    5b52:	80 91 7e 01 	lds	r24, 0x017E
    5b56:	88 23       	and	r24, r24
    5b58:	09 f0       	breq	.+2      	; 0x5b5c <main+0x32c>
    5b5a:	ba c0       	rjmp	.+372    	; 0x5cd0 <main+0x4a0>
			{
				Hour_Counter++;
    5b5c:	80 91 7d 01 	lds	r24, 0x017D
    5b60:	8f 5f       	subi	r24, 0xFF	; 255
    5b62:	80 93 7d 01 	sts	0x017D, r24
				if(Hour_Counter >=24)
    5b66:	80 91 7d 01 	lds	r24, 0x017D
    5b6a:	88 31       	cpi	r24, 0x18	; 24
    5b6c:	08 f4       	brcc	.+2      	; 0x5b70 <main+0x340>
    5b6e:	7b c0       	rjmp	.+246    	; 0x5c66 <main+0x436>
				{
					Hour_Counter = 0;
    5b70:	10 92 7d 01 	sts	0x017D, r1
					Day_Counter++;
    5b74:	80 91 76 01 	lds	r24, 0x0176
    5b78:	8f 5f       	subi	r24, 0xFF	; 255
    5b7a:	80 93 76 01 	sts	0x0176, r24
					if(Day_Counter >=31)
    5b7e:	80 91 76 01 	lds	r24, 0x0176
    5b82:	8f 31       	cpi	r24, 0x1F	; 31
    5b84:	08 f4       	brcc	.+2      	; 0x5b88 <main+0x358>
    5b86:	3f c0       	rjmp	.+126    	; 0x5c06 <main+0x3d6>
					{
						Day_Counter = 1;
    5b88:	81 e0       	ldi	r24, 0x01	; 1
    5b8a:	80 93 76 01 	sts	0x0176, r24
						Mon_Counter++;
    5b8e:	80 91 77 01 	lds	r24, 0x0177
    5b92:	8f 5f       	subi	r24, 0xFF	; 255
    5b94:	80 93 77 01 	sts	0x0177, r24
						if(Mon_Counter >=13)
    5b98:	80 91 77 01 	lds	r24, 0x0177
    5b9c:	8d 30       	cpi	r24, 0x0D	; 13
    5b9e:	18 f0       	brcs	.+6      	; 0x5ba6 <main+0x376>
						{
							Mon_Counter = 1;
    5ba0:	81 e0       	ldi	r24, 0x01	; 1
    5ba2:	80 93 77 01 	sts	0x0177, r24
						}
						if(Mon_Counter <10)
    5ba6:	80 91 77 01 	lds	r24, 0x0177
    5baa:	8a 30       	cpi	r24, 0x0A	; 10
    5bac:	c0 f4       	brcc	.+48     	; 0x5bde <main+0x3ae>
						{
							LCD_vidGotoxy(1,9);
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	69 e0       	ldi	r22, 0x09	; 9
    5bb2:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteCharctr('0');
    5bb6:	80 e3       	ldi	r24, 0x30	; 48
    5bb8:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
							LCD_vidWriteflt((f32)Mon_Counter);
    5bbc:	80 91 77 01 	lds	r24, 0x0177
    5bc0:	88 2f       	mov	r24, r24
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	a0 e0       	ldi	r26, 0x00	; 0
    5bc6:	b0 e0       	ldi	r27, 0x00	; 0
    5bc8:	bc 01       	movw	r22, r24
    5bca:	cd 01       	movw	r24, r26
    5bcc:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5bd0:	dc 01       	movw	r26, r24
    5bd2:	cb 01       	movw	r24, r22
    5bd4:	bc 01       	movw	r22, r24
    5bd6:	cd 01       	movw	r24, r26
    5bd8:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5bdc:	14 c0       	rjmp	.+40     	; 0x5c06 <main+0x3d6>
						}
						else
						{
							LCD_vidGotoxy(1,9);
    5bde:	81 e0       	ldi	r24, 0x01	; 1
    5be0:	69 e0       	ldi	r22, 0x09	; 9
    5be2:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteflt((f32)Mon_Counter);
    5be6:	80 91 77 01 	lds	r24, 0x0177
    5bea:	88 2f       	mov	r24, r24
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	a0 e0       	ldi	r26, 0x00	; 0
    5bf0:	b0 e0       	ldi	r27, 0x00	; 0
    5bf2:	bc 01       	movw	r22, r24
    5bf4:	cd 01       	movw	r24, r26
    5bf6:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5bfa:	dc 01       	movw	r26, r24
    5bfc:	cb 01       	movw	r24, r22
    5bfe:	bc 01       	movw	r22, r24
    5c00:	cd 01       	movw	r24, r26
    5c02:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
						}
					}
					if(Day_Counter <10)
    5c06:	80 91 76 01 	lds	r24, 0x0176
    5c0a:	8a 30       	cpi	r24, 0x0A	; 10
    5c0c:	c0 f4       	brcc	.+48     	; 0x5c3e <main+0x40e>
					{
						LCD_vidGotoxy(1,6);
    5c0e:	81 e0       	ldi	r24, 0x01	; 1
    5c10:	66 e0       	ldi	r22, 0x06	; 6
    5c12:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteCharctr('0');
    5c16:	80 e3       	ldi	r24, 0x30	; 48
    5c18:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
						LCD_vidWriteflt((f32)Day_Counter);
    5c1c:	80 91 76 01 	lds	r24, 0x0176
    5c20:	88 2f       	mov	r24, r24
    5c22:	90 e0       	ldi	r25, 0x00	; 0
    5c24:	a0 e0       	ldi	r26, 0x00	; 0
    5c26:	b0 e0       	ldi	r27, 0x00	; 0
    5c28:	bc 01       	movw	r22, r24
    5c2a:	cd 01       	movw	r24, r26
    5c2c:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5c30:	dc 01       	movw	r26, r24
    5c32:	cb 01       	movw	r24, r22
    5c34:	bc 01       	movw	r22, r24
    5c36:	cd 01       	movw	r24, r26
    5c38:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5c3c:	14 c0       	rjmp	.+40     	; 0x5c66 <main+0x436>
					}
					else
					{
						LCD_vidGotoxy(1,6);
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	66 e0       	ldi	r22, 0x06	; 6
    5c42:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteflt((f32)Day_Counter);
    5c46:	80 91 76 01 	lds	r24, 0x0176
    5c4a:	88 2f       	mov	r24, r24
    5c4c:	90 e0       	ldi	r25, 0x00	; 0
    5c4e:	a0 e0       	ldi	r26, 0x00	; 0
    5c50:	b0 e0       	ldi	r27, 0x00	; 0
    5c52:	bc 01       	movw	r22, r24
    5c54:	cd 01       	movw	r24, r26
    5c56:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5c5a:	dc 01       	movw	r26, r24
    5c5c:	cb 01       	movw	r24, r22
    5c5e:	bc 01       	movw	r22, r24
    5c60:	cd 01       	movw	r24, r26
    5c62:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
					}

				}
				if(Hour_Counter <10)
    5c66:	80 91 7d 01 	lds	r24, 0x017D
    5c6a:	8a 30       	cpi	r24, 0x0A	; 10
    5c6c:	c0 f4       	brcc	.+48     	; 0x5c9e <main+0x46e>
				{
					LCD_vidGotoxy(0,6);
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
    5c70:	66 e0       	ldi	r22, 0x06	; 6
    5c72:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    5c76:	80 e3       	ldi	r24, 0x30	; 48
    5c78:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Hour_Counter);
    5c7c:	80 91 7d 01 	lds	r24, 0x017D
    5c80:	88 2f       	mov	r24, r24
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	a0 e0       	ldi	r26, 0x00	; 0
    5c86:	b0 e0       	ldi	r27, 0x00	; 0
    5c88:	bc 01       	movw	r22, r24
    5c8a:	cd 01       	movw	r24, r26
    5c8c:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5c90:	dc 01       	movw	r26, r24
    5c92:	cb 01       	movw	r24, r22
    5c94:	bc 01       	movw	r22, r24
    5c96:	cd 01       	movw	r24, r26
    5c98:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5c9c:	14 c0       	rjmp	.+40     	; 0x5cc6 <main+0x496>
				}
				else
				{
					LCD_vidGotoxy(0,6);
    5c9e:	80 e0       	ldi	r24, 0x00	; 0
    5ca0:	66 e0       	ldi	r22, 0x06	; 6
    5ca2:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Hour_Counter);
    5ca6:	80 91 7d 01 	lds	r24, 0x017D
    5caa:	88 2f       	mov	r24, r24
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	a0 e0       	ldi	r26, 0x00	; 0
    5cb0:	b0 e0       	ldi	r27, 0x00	; 0
    5cb2:	bc 01       	movw	r22, r24
    5cb4:	cd 01       	movw	r24, r26
    5cb6:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5cba:	dc 01       	movw	r26, r24
    5cbc:	cb 01       	movw	r24, r22
    5cbe:	bc 01       	movw	r22, r24
    5cc0:	cd 01       	movw	r24, r26
    5cc2:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}

				LCD_vidGotoxy(0,7);
    5cc6:	80 e0       	ldi	r24, 0x00	; 0
    5cc8:	67 e0       	ldi	r22, 0x07	; 7
    5cca:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    5cce:	52 c7       	rjmp	.+3748   	; 0x6b74 <main+0x1344>
			}
			else
			if(Location == 1)
    5cd0:	80 91 7e 01 	lds	r24, 0x017E
    5cd4:	81 30       	cpi	r24, 0x01	; 1
    5cd6:	09 f0       	breq	.+2      	; 0x5cda <main+0x4aa>
    5cd8:	f6 c0       	rjmp	.+492    	; 0x5ec6 <main+0x696>
			{
			Min_Counter++;
    5cda:	80 91 7c 01 	lds	r24, 0x017C
    5cde:	8f 5f       	subi	r24, 0xFF	; 255
    5ce0:	80 93 7c 01 	sts	0x017C, r24
			if(Min_Counter >=60)
    5ce4:	80 91 7c 01 	lds	r24, 0x017C
    5ce8:	8c 33       	cpi	r24, 0x3C	; 60
    5cea:	08 f4       	brcc	.+2      	; 0x5cee <main+0x4be>
    5cec:	b7 c0       	rjmp	.+366    	; 0x5e5c <main+0x62c>
			{
				Min_Counter = 0;
    5cee:	10 92 7c 01 	sts	0x017C, r1
				Hour_Counter++;
    5cf2:	80 91 7d 01 	lds	r24, 0x017D
    5cf6:	8f 5f       	subi	r24, 0xFF	; 255
    5cf8:	80 93 7d 01 	sts	0x017D, r24
				if(Hour_Counter >=24)
    5cfc:	80 91 7d 01 	lds	r24, 0x017D
    5d00:	88 31       	cpi	r24, 0x18	; 24
    5d02:	08 f4       	brcc	.+2      	; 0x5d06 <main+0x4d6>
    5d04:	7b c0       	rjmp	.+246    	; 0x5dfc <main+0x5cc>
				{
					Hour_Counter = 0;
    5d06:	10 92 7d 01 	sts	0x017D, r1
					Day_Counter++;
    5d0a:	80 91 76 01 	lds	r24, 0x0176
    5d0e:	8f 5f       	subi	r24, 0xFF	; 255
    5d10:	80 93 76 01 	sts	0x0176, r24
					if(Day_Counter >=31)
    5d14:	80 91 76 01 	lds	r24, 0x0176
    5d18:	8f 31       	cpi	r24, 0x1F	; 31
    5d1a:	08 f4       	brcc	.+2      	; 0x5d1e <main+0x4ee>
    5d1c:	3f c0       	rjmp	.+126    	; 0x5d9c <main+0x56c>
					{
						Day_Counter = 1;
    5d1e:	81 e0       	ldi	r24, 0x01	; 1
    5d20:	80 93 76 01 	sts	0x0176, r24
						Mon_Counter++;
    5d24:	80 91 77 01 	lds	r24, 0x0177
    5d28:	8f 5f       	subi	r24, 0xFF	; 255
    5d2a:	80 93 77 01 	sts	0x0177, r24
						if(Mon_Counter >=13)
    5d2e:	80 91 77 01 	lds	r24, 0x0177
    5d32:	8d 30       	cpi	r24, 0x0D	; 13
    5d34:	18 f0       	brcs	.+6      	; 0x5d3c <main+0x50c>
						{
							Mon_Counter = 1;
    5d36:	81 e0       	ldi	r24, 0x01	; 1
    5d38:	80 93 77 01 	sts	0x0177, r24
						}
						if(Mon_Counter <10)
    5d3c:	80 91 77 01 	lds	r24, 0x0177
    5d40:	8a 30       	cpi	r24, 0x0A	; 10
    5d42:	c0 f4       	brcc	.+48     	; 0x5d74 <main+0x544>
						{
							LCD_vidGotoxy(1,9);
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	69 e0       	ldi	r22, 0x09	; 9
    5d48:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteCharctr('0');
    5d4c:	80 e3       	ldi	r24, 0x30	; 48
    5d4e:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
							LCD_vidWriteflt((f32)Mon_Counter);
    5d52:	80 91 77 01 	lds	r24, 0x0177
    5d56:	88 2f       	mov	r24, r24
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	a0 e0       	ldi	r26, 0x00	; 0
    5d5c:	b0 e0       	ldi	r27, 0x00	; 0
    5d5e:	bc 01       	movw	r22, r24
    5d60:	cd 01       	movw	r24, r26
    5d62:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5d66:	dc 01       	movw	r26, r24
    5d68:	cb 01       	movw	r24, r22
    5d6a:	bc 01       	movw	r22, r24
    5d6c:	cd 01       	movw	r24, r26
    5d6e:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5d72:	14 c0       	rjmp	.+40     	; 0x5d9c <main+0x56c>
						}
						else
						{
							LCD_vidGotoxy(1,9);
    5d74:	81 e0       	ldi	r24, 0x01	; 1
    5d76:	69 e0       	ldi	r22, 0x09	; 9
    5d78:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteflt((f32)Mon_Counter);
    5d7c:	80 91 77 01 	lds	r24, 0x0177
    5d80:	88 2f       	mov	r24, r24
    5d82:	90 e0       	ldi	r25, 0x00	; 0
    5d84:	a0 e0       	ldi	r26, 0x00	; 0
    5d86:	b0 e0       	ldi	r27, 0x00	; 0
    5d88:	bc 01       	movw	r22, r24
    5d8a:	cd 01       	movw	r24, r26
    5d8c:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5d90:	dc 01       	movw	r26, r24
    5d92:	cb 01       	movw	r24, r22
    5d94:	bc 01       	movw	r22, r24
    5d96:	cd 01       	movw	r24, r26
    5d98:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
						}
					}
					if(Day_Counter <10)
    5d9c:	80 91 76 01 	lds	r24, 0x0176
    5da0:	8a 30       	cpi	r24, 0x0A	; 10
    5da2:	c0 f4       	brcc	.+48     	; 0x5dd4 <main+0x5a4>
					{
						LCD_vidGotoxy(1,6);
    5da4:	81 e0       	ldi	r24, 0x01	; 1
    5da6:	66 e0       	ldi	r22, 0x06	; 6
    5da8:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteCharctr('0');
    5dac:	80 e3       	ldi	r24, 0x30	; 48
    5dae:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
						LCD_vidWriteflt((f32)Day_Counter);
    5db2:	80 91 76 01 	lds	r24, 0x0176
    5db6:	88 2f       	mov	r24, r24
    5db8:	90 e0       	ldi	r25, 0x00	; 0
    5dba:	a0 e0       	ldi	r26, 0x00	; 0
    5dbc:	b0 e0       	ldi	r27, 0x00	; 0
    5dbe:	bc 01       	movw	r22, r24
    5dc0:	cd 01       	movw	r24, r26
    5dc2:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5dc6:	dc 01       	movw	r26, r24
    5dc8:	cb 01       	movw	r24, r22
    5dca:	bc 01       	movw	r22, r24
    5dcc:	cd 01       	movw	r24, r26
    5dce:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5dd2:	14 c0       	rjmp	.+40     	; 0x5dfc <main+0x5cc>
					}
					else
					{
						LCD_vidGotoxy(1,6);
    5dd4:	81 e0       	ldi	r24, 0x01	; 1
    5dd6:	66 e0       	ldi	r22, 0x06	; 6
    5dd8:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteflt((f32)Day_Counter);
    5ddc:	80 91 76 01 	lds	r24, 0x0176
    5de0:	88 2f       	mov	r24, r24
    5de2:	90 e0       	ldi	r25, 0x00	; 0
    5de4:	a0 e0       	ldi	r26, 0x00	; 0
    5de6:	b0 e0       	ldi	r27, 0x00	; 0
    5de8:	bc 01       	movw	r22, r24
    5dea:	cd 01       	movw	r24, r26
    5dec:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5df0:	dc 01       	movw	r26, r24
    5df2:	cb 01       	movw	r24, r22
    5df4:	bc 01       	movw	r22, r24
    5df6:	cd 01       	movw	r24, r26
    5df8:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
					}

				}

				if(Hour_Counter <10)
    5dfc:	80 91 7d 01 	lds	r24, 0x017D
    5e00:	8a 30       	cpi	r24, 0x0A	; 10
    5e02:	c0 f4       	brcc	.+48     	; 0x5e34 <main+0x604>
				{
					LCD_vidGotoxy(0,6);
    5e04:	80 e0       	ldi	r24, 0x00	; 0
    5e06:	66 e0       	ldi	r22, 0x06	; 6
    5e08:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    5e0c:	80 e3       	ldi	r24, 0x30	; 48
    5e0e:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Hour_Counter);
    5e12:	80 91 7d 01 	lds	r24, 0x017D
    5e16:	88 2f       	mov	r24, r24
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	a0 e0       	ldi	r26, 0x00	; 0
    5e1c:	b0 e0       	ldi	r27, 0x00	; 0
    5e1e:	bc 01       	movw	r22, r24
    5e20:	cd 01       	movw	r24, r26
    5e22:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5e26:	dc 01       	movw	r26, r24
    5e28:	cb 01       	movw	r24, r22
    5e2a:	bc 01       	movw	r22, r24
    5e2c:	cd 01       	movw	r24, r26
    5e2e:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5e32:	14 c0       	rjmp	.+40     	; 0x5e5c <main+0x62c>
				}
				else
				{
					LCD_vidGotoxy(0,6);
    5e34:	80 e0       	ldi	r24, 0x00	; 0
    5e36:	66 e0       	ldi	r22, 0x06	; 6
    5e38:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Hour_Counter);
    5e3c:	80 91 7d 01 	lds	r24, 0x017D
    5e40:	88 2f       	mov	r24, r24
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	a0 e0       	ldi	r26, 0x00	; 0
    5e46:	b0 e0       	ldi	r27, 0x00	; 0
    5e48:	bc 01       	movw	r22, r24
    5e4a:	cd 01       	movw	r24, r26
    5e4c:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5e50:	dc 01       	movw	r26, r24
    5e52:	cb 01       	movw	r24, r22
    5e54:	bc 01       	movw	r22, r24
    5e56:	cd 01       	movw	r24, r26
    5e58:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}
			}

				if(Min_Counter <10)
    5e5c:	80 91 7c 01 	lds	r24, 0x017C
    5e60:	8a 30       	cpi	r24, 0x0A	; 10
    5e62:	c0 f4       	brcc	.+48     	; 0x5e94 <main+0x664>
				{
					LCD_vidGotoxy(0,9);
    5e64:	80 e0       	ldi	r24, 0x00	; 0
    5e66:	69 e0       	ldi	r22, 0x09	; 9
    5e68:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    5e6c:	80 e3       	ldi	r24, 0x30	; 48
    5e6e:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Min_Counter);
    5e72:	80 91 7c 01 	lds	r24, 0x017C
    5e76:	88 2f       	mov	r24, r24
    5e78:	90 e0       	ldi	r25, 0x00	; 0
    5e7a:	a0 e0       	ldi	r26, 0x00	; 0
    5e7c:	b0 e0       	ldi	r27, 0x00	; 0
    5e7e:	bc 01       	movw	r22, r24
    5e80:	cd 01       	movw	r24, r26
    5e82:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5e86:	dc 01       	movw	r26, r24
    5e88:	cb 01       	movw	r24, r22
    5e8a:	bc 01       	movw	r22, r24
    5e8c:	cd 01       	movw	r24, r26
    5e8e:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5e92:	14 c0       	rjmp	.+40     	; 0x5ebc <main+0x68c>
				}
				else
				{
					LCD_vidGotoxy(0,9);
    5e94:	80 e0       	ldi	r24, 0x00	; 0
    5e96:	69 e0       	ldi	r22, 0x09	; 9
    5e98:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Min_Counter);
    5e9c:	80 91 7c 01 	lds	r24, 0x017C
    5ea0:	88 2f       	mov	r24, r24
    5ea2:	90 e0       	ldi	r25, 0x00	; 0
    5ea4:	a0 e0       	ldi	r26, 0x00	; 0
    5ea6:	b0 e0       	ldi	r27, 0x00	; 0
    5ea8:	bc 01       	movw	r22, r24
    5eaa:	cd 01       	movw	r24, r26
    5eac:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5eb0:	dc 01       	movw	r26, r24
    5eb2:	cb 01       	movw	r24, r22
    5eb4:	bc 01       	movw	r22, r24
    5eb6:	cd 01       	movw	r24, r26
    5eb8:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}

				LCD_vidGotoxy(0,10);
    5ebc:	80 e0       	ldi	r24, 0x00	; 0
    5ebe:	6a e0       	ldi	r22, 0x0A	; 10
    5ec0:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    5ec4:	57 c6       	rjmp	.+3246   	; 0x6b74 <main+0x1344>
			}
			else
			if(Location == 2)
    5ec6:	80 91 7e 01 	lds	r24, 0x017E
    5eca:	82 30       	cpi	r24, 0x02	; 2
    5ecc:	09 f0       	breq	.+2      	; 0x5ed0 <main+0x6a0>
    5ece:	32 c1       	rjmp	.+612    	; 0x6134 <main+0x904>
			{
				Sec_Counter++;
    5ed0:	80 91 7b 01 	lds	r24, 0x017B
    5ed4:	8f 5f       	subi	r24, 0xFF	; 255
    5ed6:	80 93 7b 01 	sts	0x017B, r24
				if(Sec_Counter >= 60)
    5eda:	80 91 7b 01 	lds	r24, 0x017B
    5ede:	8c 33       	cpi	r24, 0x3C	; 60
    5ee0:	08 f4       	brcc	.+2      	; 0x5ee4 <main+0x6b4>
    5ee2:	f3 c0       	rjmp	.+486    	; 0x60ca <main+0x89a>
				{
					Sec_Counter = 0;
    5ee4:	10 92 7b 01 	sts	0x017B, r1
					Min_Counter++;
    5ee8:	80 91 7c 01 	lds	r24, 0x017C
    5eec:	8f 5f       	subi	r24, 0xFF	; 255
    5eee:	80 93 7c 01 	sts	0x017C, r24
					if(Min_Counter >=60)
    5ef2:	80 91 7c 01 	lds	r24, 0x017C
    5ef6:	8c 33       	cpi	r24, 0x3C	; 60
    5ef8:	08 f4       	brcc	.+2      	; 0x5efc <main+0x6cc>
    5efa:	b7 c0       	rjmp	.+366    	; 0x606a <main+0x83a>
					{
						Min_Counter = 0;
    5efc:	10 92 7c 01 	sts	0x017C, r1
						Hour_Counter++;
    5f00:	80 91 7d 01 	lds	r24, 0x017D
    5f04:	8f 5f       	subi	r24, 0xFF	; 255
    5f06:	80 93 7d 01 	sts	0x017D, r24
						if(Hour_Counter >=24)
    5f0a:	80 91 7d 01 	lds	r24, 0x017D
    5f0e:	88 31       	cpi	r24, 0x18	; 24
    5f10:	08 f4       	brcc	.+2      	; 0x5f14 <main+0x6e4>
    5f12:	7b c0       	rjmp	.+246    	; 0x600a <main+0x7da>
						{
							Hour_Counter = 0;
    5f14:	10 92 7d 01 	sts	0x017D, r1
							Day_Counter++;
    5f18:	80 91 76 01 	lds	r24, 0x0176
    5f1c:	8f 5f       	subi	r24, 0xFF	; 255
    5f1e:	80 93 76 01 	sts	0x0176, r24

							if(Day_Counter >=31)
    5f22:	80 91 76 01 	lds	r24, 0x0176
    5f26:	8f 31       	cpi	r24, 0x1F	; 31
    5f28:	08 f4       	brcc	.+2      	; 0x5f2c <main+0x6fc>
    5f2a:	3f c0       	rjmp	.+126    	; 0x5faa <main+0x77a>
							{
								Day_Counter = 1;
    5f2c:	81 e0       	ldi	r24, 0x01	; 1
    5f2e:	80 93 76 01 	sts	0x0176, r24
								Mon_Counter++;
    5f32:	80 91 77 01 	lds	r24, 0x0177
    5f36:	8f 5f       	subi	r24, 0xFF	; 255
    5f38:	80 93 77 01 	sts	0x0177, r24
								if(Mon_Counter >=13)
    5f3c:	80 91 77 01 	lds	r24, 0x0177
    5f40:	8d 30       	cpi	r24, 0x0D	; 13
    5f42:	18 f0       	brcs	.+6      	; 0x5f4a <main+0x71a>
								{
									Mon_Counter = 1;
    5f44:	81 e0       	ldi	r24, 0x01	; 1
    5f46:	80 93 77 01 	sts	0x0177, r24
								}
								if(Mon_Counter <10)
    5f4a:	80 91 77 01 	lds	r24, 0x0177
    5f4e:	8a 30       	cpi	r24, 0x0A	; 10
    5f50:	c0 f4       	brcc	.+48     	; 0x5f82 <main+0x752>
								{
									LCD_vidGotoxy(1,9);
    5f52:	81 e0       	ldi	r24, 0x01	; 1
    5f54:	69 e0       	ldi	r22, 0x09	; 9
    5f56:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
									LCD_vidWriteCharctr('0');
    5f5a:	80 e3       	ldi	r24, 0x30	; 48
    5f5c:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
									LCD_vidWriteflt((f32)Mon_Counter);
    5f60:	80 91 77 01 	lds	r24, 0x0177
    5f64:	88 2f       	mov	r24, r24
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	a0 e0       	ldi	r26, 0x00	; 0
    5f6a:	b0 e0       	ldi	r27, 0x00	; 0
    5f6c:	bc 01       	movw	r22, r24
    5f6e:	cd 01       	movw	r24, r26
    5f70:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5f74:	dc 01       	movw	r26, r24
    5f76:	cb 01       	movw	r24, r22
    5f78:	bc 01       	movw	r22, r24
    5f7a:	cd 01       	movw	r24, r26
    5f7c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5f80:	14 c0       	rjmp	.+40     	; 0x5faa <main+0x77a>
								}
								else
								{
									LCD_vidGotoxy(1,9);
    5f82:	81 e0       	ldi	r24, 0x01	; 1
    5f84:	69 e0       	ldi	r22, 0x09	; 9
    5f86:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
									LCD_vidWriteflt((f32)Mon_Counter);
    5f8a:	80 91 77 01 	lds	r24, 0x0177
    5f8e:	88 2f       	mov	r24, r24
    5f90:	90 e0       	ldi	r25, 0x00	; 0
    5f92:	a0 e0       	ldi	r26, 0x00	; 0
    5f94:	b0 e0       	ldi	r27, 0x00	; 0
    5f96:	bc 01       	movw	r22, r24
    5f98:	cd 01       	movw	r24, r26
    5f9a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5f9e:	dc 01       	movw	r26, r24
    5fa0:	cb 01       	movw	r24, r22
    5fa2:	bc 01       	movw	r22, r24
    5fa4:	cd 01       	movw	r24, r26
    5fa6:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
								}
							}
							if(Day_Counter <10)
    5faa:	80 91 76 01 	lds	r24, 0x0176
    5fae:	8a 30       	cpi	r24, 0x0A	; 10
    5fb0:	c0 f4       	brcc	.+48     	; 0x5fe2 <main+0x7b2>
							{
								LCD_vidGotoxy(1,6);
    5fb2:	81 e0       	ldi	r24, 0x01	; 1
    5fb4:	66 e0       	ldi	r22, 0x06	; 6
    5fb6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
								LCD_vidWriteCharctr('0');
    5fba:	80 e3       	ldi	r24, 0x30	; 48
    5fbc:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
								LCD_vidWriteflt((f32)Day_Counter);
    5fc0:	80 91 76 01 	lds	r24, 0x0176
    5fc4:	88 2f       	mov	r24, r24
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	a0 e0       	ldi	r26, 0x00	; 0
    5fca:	b0 e0       	ldi	r27, 0x00	; 0
    5fcc:	bc 01       	movw	r22, r24
    5fce:	cd 01       	movw	r24, r26
    5fd0:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5fd4:	dc 01       	movw	r26, r24
    5fd6:	cb 01       	movw	r24, r22
    5fd8:	bc 01       	movw	r22, r24
    5fda:	cd 01       	movw	r24, r26
    5fdc:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    5fe0:	14 c0       	rjmp	.+40     	; 0x600a <main+0x7da>
							}
							else
							{
								LCD_vidGotoxy(1,6);
    5fe2:	81 e0       	ldi	r24, 0x01	; 1
    5fe4:	66 e0       	ldi	r22, 0x06	; 6
    5fe6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
								LCD_vidWriteflt((f32)Day_Counter);
    5fea:	80 91 76 01 	lds	r24, 0x0176
    5fee:	88 2f       	mov	r24, r24
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	a0 e0       	ldi	r26, 0x00	; 0
    5ff4:	b0 e0       	ldi	r27, 0x00	; 0
    5ff6:	bc 01       	movw	r22, r24
    5ff8:	cd 01       	movw	r24, r26
    5ffa:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    5ffe:	dc 01       	movw	r26, r24
    6000:	cb 01       	movw	r24, r22
    6002:	bc 01       	movw	r22, r24
    6004:	cd 01       	movw	r24, r26
    6006:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
							}

						}
						if(Hour_Counter <10)
    600a:	80 91 7d 01 	lds	r24, 0x017D
    600e:	8a 30       	cpi	r24, 0x0A	; 10
    6010:	c0 f4       	brcc	.+48     	; 0x6042 <main+0x812>
						{
							LCD_vidGotoxy(0,6);
    6012:	80 e0       	ldi	r24, 0x00	; 0
    6014:	66 e0       	ldi	r22, 0x06	; 6
    6016:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteCharctr('0');
    601a:	80 e3       	ldi	r24, 0x30	; 48
    601c:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
							LCD_vidWriteflt((f32)Hour_Counter);
    6020:	80 91 7d 01 	lds	r24, 0x017D
    6024:	88 2f       	mov	r24, r24
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	a0 e0       	ldi	r26, 0x00	; 0
    602a:	b0 e0       	ldi	r27, 0x00	; 0
    602c:	bc 01       	movw	r22, r24
    602e:	cd 01       	movw	r24, r26
    6030:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6034:	dc 01       	movw	r26, r24
    6036:	cb 01       	movw	r24, r22
    6038:	bc 01       	movw	r22, r24
    603a:	cd 01       	movw	r24, r26
    603c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6040:	14 c0       	rjmp	.+40     	; 0x606a <main+0x83a>
						}
						else
						{
							LCD_vidGotoxy(0,6);
    6042:	80 e0       	ldi	r24, 0x00	; 0
    6044:	66 e0       	ldi	r22, 0x06	; 6
    6046:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteflt((f32)Hour_Counter);
    604a:	80 91 7d 01 	lds	r24, 0x017D
    604e:	88 2f       	mov	r24, r24
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	a0 e0       	ldi	r26, 0x00	; 0
    6054:	b0 e0       	ldi	r27, 0x00	; 0
    6056:	bc 01       	movw	r22, r24
    6058:	cd 01       	movw	r24, r26
    605a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    605e:	dc 01       	movw	r26, r24
    6060:	cb 01       	movw	r24, r22
    6062:	bc 01       	movw	r22, r24
    6064:	cd 01       	movw	r24, r26
    6066:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
						}
					}

					if(Min_Counter <10)
    606a:	80 91 7c 01 	lds	r24, 0x017C
    606e:	8a 30       	cpi	r24, 0x0A	; 10
    6070:	c0 f4       	brcc	.+48     	; 0x60a2 <main+0x872>
					{
						LCD_vidGotoxy(0,9);
    6072:	80 e0       	ldi	r24, 0x00	; 0
    6074:	69 e0       	ldi	r22, 0x09	; 9
    6076:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteCharctr('0');
    607a:	80 e3       	ldi	r24, 0x30	; 48
    607c:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
						LCD_vidWriteflt((f32)Min_Counter);
    6080:	80 91 7c 01 	lds	r24, 0x017C
    6084:	88 2f       	mov	r24, r24
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	a0 e0       	ldi	r26, 0x00	; 0
    608a:	b0 e0       	ldi	r27, 0x00	; 0
    608c:	bc 01       	movw	r22, r24
    608e:	cd 01       	movw	r24, r26
    6090:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6094:	dc 01       	movw	r26, r24
    6096:	cb 01       	movw	r24, r22
    6098:	bc 01       	movw	r22, r24
    609a:	cd 01       	movw	r24, r26
    609c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    60a0:	14 c0       	rjmp	.+40     	; 0x60ca <main+0x89a>
					}
					else
					{
						LCD_vidGotoxy(0,9);
    60a2:	80 e0       	ldi	r24, 0x00	; 0
    60a4:	69 e0       	ldi	r22, 0x09	; 9
    60a6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteflt((f32)Min_Counter);
    60aa:	80 91 7c 01 	lds	r24, 0x017C
    60ae:	88 2f       	mov	r24, r24
    60b0:	90 e0       	ldi	r25, 0x00	; 0
    60b2:	a0 e0       	ldi	r26, 0x00	; 0
    60b4:	b0 e0       	ldi	r27, 0x00	; 0
    60b6:	bc 01       	movw	r22, r24
    60b8:	cd 01       	movw	r24, r26
    60ba:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    60be:	dc 01       	movw	r26, r24
    60c0:	cb 01       	movw	r24, r22
    60c2:	bc 01       	movw	r22, r24
    60c4:	cd 01       	movw	r24, r26
    60c6:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
					}
				}

				if(Sec_Counter<10)
    60ca:	80 91 7b 01 	lds	r24, 0x017B
    60ce:	8a 30       	cpi	r24, 0x0A	; 10
    60d0:	c0 f4       	brcc	.+48     	; 0x6102 <main+0x8d2>
				{
					LCD_vidGotoxy(0,12);
    60d2:	80 e0       	ldi	r24, 0x00	; 0
    60d4:	6c e0       	ldi	r22, 0x0C	; 12
    60d6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    60da:	80 e3       	ldi	r24, 0x30	; 48
    60dc:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Sec_Counter);
    60e0:	80 91 7b 01 	lds	r24, 0x017B
    60e4:	88 2f       	mov	r24, r24
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	a0 e0       	ldi	r26, 0x00	; 0
    60ea:	b0 e0       	ldi	r27, 0x00	; 0
    60ec:	bc 01       	movw	r22, r24
    60ee:	cd 01       	movw	r24, r26
    60f0:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    60f4:	dc 01       	movw	r26, r24
    60f6:	cb 01       	movw	r24, r22
    60f8:	bc 01       	movw	r22, r24
    60fa:	cd 01       	movw	r24, r26
    60fc:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6100:	14 c0       	rjmp	.+40     	; 0x612a <main+0x8fa>
				}
				else
				{
					LCD_vidGotoxy(0,12);
    6102:	80 e0       	ldi	r24, 0x00	; 0
    6104:	6c e0       	ldi	r22, 0x0C	; 12
    6106:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Sec_Counter);
    610a:	80 91 7b 01 	lds	r24, 0x017B
    610e:	88 2f       	mov	r24, r24
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	a0 e0       	ldi	r26, 0x00	; 0
    6114:	b0 e0       	ldi	r27, 0x00	; 0
    6116:	bc 01       	movw	r22, r24
    6118:	cd 01       	movw	r24, r26
    611a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    611e:	dc 01       	movw	r26, r24
    6120:	cb 01       	movw	r24, r22
    6122:	bc 01       	movw	r22, r24
    6124:	cd 01       	movw	r24, r26
    6126:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}
				LCD_vidGotoxy(0,13);
    612a:	80 e0       	ldi	r24, 0x00	; 0
    612c:	6d e0       	ldi	r22, 0x0D	; 13
    612e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6132:	20 c5       	rjmp	.+2624   	; 0x6b74 <main+0x1344>
			}
			else if(Location == 3)
    6134:	80 91 7e 01 	lds	r24, 0x017E
    6138:	83 30       	cpi	r24, 0x03	; 3
    613a:	09 f0       	breq	.+2      	; 0x613e <main+0x90e>
    613c:	7e c0       	rjmp	.+252    	; 0x623a <main+0xa0a>
			{
				Day_Counter++;
    613e:	80 91 76 01 	lds	r24, 0x0176
    6142:	8f 5f       	subi	r24, 0xFF	; 255
    6144:	80 93 76 01 	sts	0x0176, r24
				if(Day_Counter >=31)
    6148:	80 91 76 01 	lds	r24, 0x0176
    614c:	8f 31       	cpi	r24, 0x1F	; 31
    614e:	08 f4       	brcc	.+2      	; 0x6152 <main+0x922>
    6150:	3f c0       	rjmp	.+126    	; 0x61d0 <main+0x9a0>
				{
					Day_Counter = 1;
    6152:	81 e0       	ldi	r24, 0x01	; 1
    6154:	80 93 76 01 	sts	0x0176, r24
					Mon_Counter++;
    6158:	80 91 77 01 	lds	r24, 0x0177
    615c:	8f 5f       	subi	r24, 0xFF	; 255
    615e:	80 93 77 01 	sts	0x0177, r24
					if(Mon_Counter >=13)
    6162:	80 91 77 01 	lds	r24, 0x0177
    6166:	8d 30       	cpi	r24, 0x0D	; 13
    6168:	18 f0       	brcs	.+6      	; 0x6170 <main+0x940>
					{
						Mon_Counter = 1;
    616a:	81 e0       	ldi	r24, 0x01	; 1
    616c:	80 93 77 01 	sts	0x0177, r24
					}
					if(Mon_Counter <10)
    6170:	80 91 77 01 	lds	r24, 0x0177
    6174:	8a 30       	cpi	r24, 0x0A	; 10
    6176:	c0 f4       	brcc	.+48     	; 0x61a8 <main+0x978>
					{
						LCD_vidGotoxy(1,9);
    6178:	81 e0       	ldi	r24, 0x01	; 1
    617a:	69 e0       	ldi	r22, 0x09	; 9
    617c:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteCharctr('0');
    6180:	80 e3       	ldi	r24, 0x30	; 48
    6182:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
						LCD_vidWriteflt((f32)Mon_Counter);
    6186:	80 91 77 01 	lds	r24, 0x0177
    618a:	88 2f       	mov	r24, r24
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	a0 e0       	ldi	r26, 0x00	; 0
    6190:	b0 e0       	ldi	r27, 0x00	; 0
    6192:	bc 01       	movw	r22, r24
    6194:	cd 01       	movw	r24, r26
    6196:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    619a:	dc 01       	movw	r26, r24
    619c:	cb 01       	movw	r24, r22
    619e:	bc 01       	movw	r22, r24
    61a0:	cd 01       	movw	r24, r26
    61a2:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    61a6:	14 c0       	rjmp	.+40     	; 0x61d0 <main+0x9a0>
					}
					else
					{
						LCD_vidGotoxy(1,9);
    61a8:	81 e0       	ldi	r24, 0x01	; 1
    61aa:	69 e0       	ldi	r22, 0x09	; 9
    61ac:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteflt((f32)Mon_Counter);
    61b0:	80 91 77 01 	lds	r24, 0x0177
    61b4:	88 2f       	mov	r24, r24
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	a0 e0       	ldi	r26, 0x00	; 0
    61ba:	b0 e0       	ldi	r27, 0x00	; 0
    61bc:	bc 01       	movw	r22, r24
    61be:	cd 01       	movw	r24, r26
    61c0:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    61c4:	dc 01       	movw	r26, r24
    61c6:	cb 01       	movw	r24, r22
    61c8:	bc 01       	movw	r22, r24
    61ca:	cd 01       	movw	r24, r26
    61cc:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
					}
				}
				if(Day_Counter <10)
    61d0:	80 91 76 01 	lds	r24, 0x0176
    61d4:	8a 30       	cpi	r24, 0x0A	; 10
    61d6:	c0 f4       	brcc	.+48     	; 0x6208 <main+0x9d8>
				{
					LCD_vidGotoxy(1,6);
    61d8:	81 e0       	ldi	r24, 0x01	; 1
    61da:	66 e0       	ldi	r22, 0x06	; 6
    61dc:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    61e0:	80 e3       	ldi	r24, 0x30	; 48
    61e2:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Day_Counter);
    61e6:	80 91 76 01 	lds	r24, 0x0176
    61ea:	88 2f       	mov	r24, r24
    61ec:	90 e0       	ldi	r25, 0x00	; 0
    61ee:	a0 e0       	ldi	r26, 0x00	; 0
    61f0:	b0 e0       	ldi	r27, 0x00	; 0
    61f2:	bc 01       	movw	r22, r24
    61f4:	cd 01       	movw	r24, r26
    61f6:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    61fa:	dc 01       	movw	r26, r24
    61fc:	cb 01       	movw	r24, r22
    61fe:	bc 01       	movw	r22, r24
    6200:	cd 01       	movw	r24, r26
    6202:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6206:	14 c0       	rjmp	.+40     	; 0x6230 <main+0xa00>
				}
				else
				{
					LCD_vidGotoxy(1,6);
    6208:	81 e0       	ldi	r24, 0x01	; 1
    620a:	66 e0       	ldi	r22, 0x06	; 6
    620c:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Day_Counter);
    6210:	80 91 76 01 	lds	r24, 0x0176
    6214:	88 2f       	mov	r24, r24
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	a0 e0       	ldi	r26, 0x00	; 0
    621a:	b0 e0       	ldi	r27, 0x00	; 0
    621c:	bc 01       	movw	r22, r24
    621e:	cd 01       	movw	r24, r26
    6220:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6224:	dc 01       	movw	r26, r24
    6226:	cb 01       	movw	r24, r22
    6228:	bc 01       	movw	r22, r24
    622a:	cd 01       	movw	r24, r26
    622c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}
			LCD_vidGotoxy(1,7);
    6230:	81 e0       	ldi	r24, 0x01	; 1
    6232:	67 e0       	ldi	r22, 0x07	; 7
    6234:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6238:	9d c4       	rjmp	.+2362   	; 0x6b74 <main+0x1344>
			}
			else if(Location == 4)
    623a:	80 91 7e 01 	lds	r24, 0x017E
    623e:	84 30       	cpi	r24, 0x04	; 4
    6240:	09 f0       	breq	.+2      	; 0x6244 <main+0xa14>
    6242:	98 c4       	rjmp	.+2352   	; 0x6b74 <main+0x1344>
			{
				Mon_Counter++;
    6244:	80 91 77 01 	lds	r24, 0x0177
    6248:	8f 5f       	subi	r24, 0xFF	; 255
    624a:	80 93 77 01 	sts	0x0177, r24
				if(Mon_Counter >=13)
    624e:	80 91 77 01 	lds	r24, 0x0177
    6252:	8d 30       	cpi	r24, 0x0D	; 13
    6254:	18 f0       	brcs	.+6      	; 0x625c <main+0xa2c>
				{
					Mon_Counter = 1;
    6256:	81 e0       	ldi	r24, 0x01	; 1
    6258:	80 93 77 01 	sts	0x0177, r24
				}
				if(Mon_Counter <10)
    625c:	80 91 77 01 	lds	r24, 0x0177
    6260:	8a 30       	cpi	r24, 0x0A	; 10
    6262:	c0 f4       	brcc	.+48     	; 0x6294 <main+0xa64>
				{
					LCD_vidGotoxy(1,9);
    6264:	81 e0       	ldi	r24, 0x01	; 1
    6266:	69 e0       	ldi	r22, 0x09	; 9
    6268:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    626c:	80 e3       	ldi	r24, 0x30	; 48
    626e:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Mon_Counter);
    6272:	80 91 77 01 	lds	r24, 0x0177
    6276:	88 2f       	mov	r24, r24
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	a0 e0       	ldi	r26, 0x00	; 0
    627c:	b0 e0       	ldi	r27, 0x00	; 0
    627e:	bc 01       	movw	r22, r24
    6280:	cd 01       	movw	r24, r26
    6282:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6286:	dc 01       	movw	r26, r24
    6288:	cb 01       	movw	r24, r22
    628a:	bc 01       	movw	r22, r24
    628c:	cd 01       	movw	r24, r26
    628e:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6292:	14 c0       	rjmp	.+40     	; 0x62bc <main+0xa8c>
				}
				else
				{
					LCD_vidGotoxy(1,9);
    6294:	81 e0       	ldi	r24, 0x01	; 1
    6296:	69 e0       	ldi	r22, 0x09	; 9
    6298:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Mon_Counter);
    629c:	80 91 77 01 	lds	r24, 0x0177
    62a0:	88 2f       	mov	r24, r24
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	a0 e0       	ldi	r26, 0x00	; 0
    62a6:	b0 e0       	ldi	r27, 0x00	; 0
    62a8:	bc 01       	movw	r22, r24
    62aa:	cd 01       	movw	r24, r26
    62ac:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    62b0:	dc 01       	movw	r26, r24
    62b2:	cb 01       	movw	r24, r22
    62b4:	bc 01       	movw	r22, r24
    62b6:	cd 01       	movw	r24, r26
    62b8:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}
			LCD_vidGotoxy(1,10);
    62bc:	81 e0       	ldi	r24, 0x01	; 1
    62be:	6a e0       	ldi	r22, 0x0A	; 10
    62c0:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    62c4:	57 c4       	rjmp	.+2222   	; 0x6b74 <main+0x1344>
		}

		}
		/*Down*/
		else if((DIO_u8GetPinVal(DIO_PORTD,DIO_PIN4) == 0))
    62c6:	83 e0       	ldi	r24, 0x03	; 3
    62c8:	64 e0       	ldi	r22, 0x04	; 4
    62ca:	0e 94 3d 18 	call	0x307a	; 0x307a <DIO_u8GetPinVal>
    62ce:	88 23       	and	r24, r24
    62d0:	09 f0       	breq	.+2      	; 0x62d4 <main+0xaa4>
    62d2:	c6 c3       	rjmp	.+1932   	; 0x6a60 <main+0x1230>
			 {
			while(DIO_u8GetPinVal(DIO_PORTD,DIO_PIN4) == 0);
    62d4:	83 e0       	ldi	r24, 0x03	; 3
    62d6:	64 e0       	ldi	r22, 0x04	; 4
    62d8:	0e 94 3d 18 	call	0x307a	; 0x307a <DIO_u8GetPinVal>
    62dc:	88 23       	and	r24, r24
    62de:	d1 f3       	breq	.-12     	; 0x62d4 <main+0xaa4>

			if(Location == 2)
    62e0:	80 91 7e 01 	lds	r24, 0x017E
    62e4:	82 30       	cpi	r24, 0x02	; 2
    62e6:	09 f0       	breq	.+2      	; 0x62ea <main+0xaba>
    62e8:	35 c1       	rjmp	.+618    	; 0x6554 <main+0xd24>
			{
				Sec_Counter--;
    62ea:	80 91 7b 01 	lds	r24, 0x017B
    62ee:	81 50       	subi	r24, 0x01	; 1
    62f0:	80 93 7b 01 	sts	0x017B, r24
				if(Sec_Counter == 255)
    62f4:	80 91 7b 01 	lds	r24, 0x017B
    62f8:	8f 3f       	cpi	r24, 0xFF	; 255
    62fa:	09 f0       	breq	.+2      	; 0x62fe <main+0xace>
    62fc:	f6 c0       	rjmp	.+492    	; 0x64ea <main+0xcba>
				{
				Sec_Counter = 59;
    62fe:	8b e3       	ldi	r24, 0x3B	; 59
    6300:	80 93 7b 01 	sts	0x017B, r24
				Min_Counter--;
    6304:	80 91 7c 01 	lds	r24, 0x017C
    6308:	81 50       	subi	r24, 0x01	; 1
    630a:	80 93 7c 01 	sts	0x017C, r24
				if(Min_Counter == 255)
    630e:	80 91 7c 01 	lds	r24, 0x017C
    6312:	8f 3f       	cpi	r24, 0xFF	; 255
    6314:	09 f0       	breq	.+2      	; 0x6318 <main+0xae8>
    6316:	b9 c0       	rjmp	.+370    	; 0x648a <main+0xc5a>
				{
					Min_Counter = 59;
    6318:	8b e3       	ldi	r24, 0x3B	; 59
    631a:	80 93 7c 01 	sts	0x017C, r24
					Hour_Counter--;
    631e:	80 91 7d 01 	lds	r24, 0x017D
    6322:	81 50       	subi	r24, 0x01	; 1
    6324:	80 93 7d 01 	sts	0x017D, r24
					if(Hour_Counter == 255)
    6328:	80 91 7d 01 	lds	r24, 0x017D
    632c:	8f 3f       	cpi	r24, 0xFF	; 255
    632e:	09 f0       	breq	.+2      	; 0x6332 <main+0xb02>
    6330:	7c c0       	rjmp	.+248    	; 0x642a <main+0xbfa>
					{
						Hour_Counter = 23;
    6332:	87 e1       	ldi	r24, 0x17	; 23
    6334:	80 93 7d 01 	sts	0x017D, r24
						Day_Counter--;
    6338:	80 91 76 01 	lds	r24, 0x0176
    633c:	81 50       	subi	r24, 0x01	; 1
    633e:	80 93 76 01 	sts	0x0176, r24
						if(Day_Counter == 0)
    6342:	80 91 76 01 	lds	r24, 0x0176
    6346:	88 23       	and	r24, r24
    6348:	09 f0       	breq	.+2      	; 0x634c <main+0xb1c>
    634a:	3f c0       	rjmp	.+126    	; 0x63ca <main+0xb9a>
						{
							Day_Counter = 30;
    634c:	8e e1       	ldi	r24, 0x1E	; 30
    634e:	80 93 76 01 	sts	0x0176, r24
							Mon_Counter--;
    6352:	80 91 77 01 	lds	r24, 0x0177
    6356:	81 50       	subi	r24, 0x01	; 1
    6358:	80 93 77 01 	sts	0x0177, r24
							if(Mon_Counter == 0)
    635c:	80 91 77 01 	lds	r24, 0x0177
    6360:	88 23       	and	r24, r24
    6362:	19 f4       	brne	.+6      	; 0x636a <main+0xb3a>
							{
								Mon_Counter = 12;
    6364:	8c e0       	ldi	r24, 0x0C	; 12
    6366:	80 93 77 01 	sts	0x0177, r24
							}
							if(Mon_Counter <10)
    636a:	80 91 77 01 	lds	r24, 0x0177
    636e:	8a 30       	cpi	r24, 0x0A	; 10
    6370:	c0 f4       	brcc	.+48     	; 0x63a2 <main+0xb72>
							{
								LCD_vidGotoxy(1,9);
    6372:	81 e0       	ldi	r24, 0x01	; 1
    6374:	69 e0       	ldi	r22, 0x09	; 9
    6376:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
								LCD_vidWriteCharctr('0');
    637a:	80 e3       	ldi	r24, 0x30	; 48
    637c:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
								LCD_vidWriteflt((f32)Mon_Counter);
    6380:	80 91 77 01 	lds	r24, 0x0177
    6384:	88 2f       	mov	r24, r24
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	a0 e0       	ldi	r26, 0x00	; 0
    638a:	b0 e0       	ldi	r27, 0x00	; 0
    638c:	bc 01       	movw	r22, r24
    638e:	cd 01       	movw	r24, r26
    6390:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6394:	dc 01       	movw	r26, r24
    6396:	cb 01       	movw	r24, r22
    6398:	bc 01       	movw	r22, r24
    639a:	cd 01       	movw	r24, r26
    639c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    63a0:	14 c0       	rjmp	.+40     	; 0x63ca <main+0xb9a>
							}
							else
							{
								LCD_vidGotoxy(1,9);
    63a2:	81 e0       	ldi	r24, 0x01	; 1
    63a4:	69 e0       	ldi	r22, 0x09	; 9
    63a6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
								LCD_vidWriteflt((f32)Mon_Counter);
    63aa:	80 91 77 01 	lds	r24, 0x0177
    63ae:	88 2f       	mov	r24, r24
    63b0:	90 e0       	ldi	r25, 0x00	; 0
    63b2:	a0 e0       	ldi	r26, 0x00	; 0
    63b4:	b0 e0       	ldi	r27, 0x00	; 0
    63b6:	bc 01       	movw	r22, r24
    63b8:	cd 01       	movw	r24, r26
    63ba:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    63be:	dc 01       	movw	r26, r24
    63c0:	cb 01       	movw	r24, r22
    63c2:	bc 01       	movw	r22, r24
    63c4:	cd 01       	movw	r24, r26
    63c6:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
							}

						}
						if(Day_Counter <10)
    63ca:	80 91 76 01 	lds	r24, 0x0176
    63ce:	8a 30       	cpi	r24, 0x0A	; 10
    63d0:	c0 f4       	brcc	.+48     	; 0x6402 <main+0xbd2>
						{
							LCD_vidGotoxy(1,6);
    63d2:	81 e0       	ldi	r24, 0x01	; 1
    63d4:	66 e0       	ldi	r22, 0x06	; 6
    63d6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteCharctr('0');
    63da:	80 e3       	ldi	r24, 0x30	; 48
    63dc:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
							LCD_vidWriteflt((f32)Day_Counter);
    63e0:	80 91 76 01 	lds	r24, 0x0176
    63e4:	88 2f       	mov	r24, r24
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	a0 e0       	ldi	r26, 0x00	; 0
    63ea:	b0 e0       	ldi	r27, 0x00	; 0
    63ec:	bc 01       	movw	r22, r24
    63ee:	cd 01       	movw	r24, r26
    63f0:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    63f4:	dc 01       	movw	r26, r24
    63f6:	cb 01       	movw	r24, r22
    63f8:	bc 01       	movw	r22, r24
    63fa:	cd 01       	movw	r24, r26
    63fc:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6400:	14 c0       	rjmp	.+40     	; 0x642a <main+0xbfa>
						}
						else
						{
							LCD_vidGotoxy(1,6);
    6402:	81 e0       	ldi	r24, 0x01	; 1
    6404:	66 e0       	ldi	r22, 0x06	; 6
    6406:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteflt((f32)Day_Counter);
    640a:	80 91 76 01 	lds	r24, 0x0176
    640e:	88 2f       	mov	r24, r24
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	a0 e0       	ldi	r26, 0x00	; 0
    6414:	b0 e0       	ldi	r27, 0x00	; 0
    6416:	bc 01       	movw	r22, r24
    6418:	cd 01       	movw	r24, r26
    641a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    641e:	dc 01       	movw	r26, r24
    6420:	cb 01       	movw	r24, r22
    6422:	bc 01       	movw	r22, r24
    6424:	cd 01       	movw	r24, r26
    6426:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
						}
						}
						if(Hour_Counter <10)
    642a:	80 91 7d 01 	lds	r24, 0x017D
    642e:	8a 30       	cpi	r24, 0x0A	; 10
    6430:	c0 f4       	brcc	.+48     	; 0x6462 <main+0xc32>
						{
							LCD_vidGotoxy(0,6);
    6432:	80 e0       	ldi	r24, 0x00	; 0
    6434:	66 e0       	ldi	r22, 0x06	; 6
    6436:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteCharctr('0');
    643a:	80 e3       	ldi	r24, 0x30	; 48
    643c:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
							LCD_vidWriteflt((f32)Hour_Counter);
    6440:	80 91 7d 01 	lds	r24, 0x017D
    6444:	88 2f       	mov	r24, r24
    6446:	90 e0       	ldi	r25, 0x00	; 0
    6448:	a0 e0       	ldi	r26, 0x00	; 0
    644a:	b0 e0       	ldi	r27, 0x00	; 0
    644c:	bc 01       	movw	r22, r24
    644e:	cd 01       	movw	r24, r26
    6450:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6454:	dc 01       	movw	r26, r24
    6456:	cb 01       	movw	r24, r22
    6458:	bc 01       	movw	r22, r24
    645a:	cd 01       	movw	r24, r26
    645c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6460:	14 c0       	rjmp	.+40     	; 0x648a <main+0xc5a>
						}
						else
						{
							LCD_vidGotoxy(0,6);
    6462:	80 e0       	ldi	r24, 0x00	; 0
    6464:	66 e0       	ldi	r22, 0x06	; 6
    6466:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteflt((f32)Hour_Counter);
    646a:	80 91 7d 01 	lds	r24, 0x017D
    646e:	88 2f       	mov	r24, r24
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	a0 e0       	ldi	r26, 0x00	; 0
    6474:	b0 e0       	ldi	r27, 0x00	; 0
    6476:	bc 01       	movw	r22, r24
    6478:	cd 01       	movw	r24, r26
    647a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    647e:	dc 01       	movw	r26, r24
    6480:	cb 01       	movw	r24, r22
    6482:	bc 01       	movw	r22, r24
    6484:	cd 01       	movw	r24, r26
    6486:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
						}
					}
					if(Min_Counter <10)
    648a:	80 91 7c 01 	lds	r24, 0x017C
    648e:	8a 30       	cpi	r24, 0x0A	; 10
    6490:	c0 f4       	brcc	.+48     	; 0x64c2 <main+0xc92>
					{
						LCD_vidGotoxy(0,9);
    6492:	80 e0       	ldi	r24, 0x00	; 0
    6494:	69 e0       	ldi	r22, 0x09	; 9
    6496:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteCharctr('0');
    649a:	80 e3       	ldi	r24, 0x30	; 48
    649c:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
						LCD_vidWriteflt((f32)Min_Counter);
    64a0:	80 91 7c 01 	lds	r24, 0x017C
    64a4:	88 2f       	mov	r24, r24
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	a0 e0       	ldi	r26, 0x00	; 0
    64aa:	b0 e0       	ldi	r27, 0x00	; 0
    64ac:	bc 01       	movw	r22, r24
    64ae:	cd 01       	movw	r24, r26
    64b0:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    64b4:	dc 01       	movw	r26, r24
    64b6:	cb 01       	movw	r24, r22
    64b8:	bc 01       	movw	r22, r24
    64ba:	cd 01       	movw	r24, r26
    64bc:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    64c0:	14 c0       	rjmp	.+40     	; 0x64ea <main+0xcba>
					}
					else
					{
						LCD_vidGotoxy(0,9);
    64c2:	80 e0       	ldi	r24, 0x00	; 0
    64c4:	69 e0       	ldi	r22, 0x09	; 9
    64c6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteflt((f32)Min_Counter);
    64ca:	80 91 7c 01 	lds	r24, 0x017C
    64ce:	88 2f       	mov	r24, r24
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	a0 e0       	ldi	r26, 0x00	; 0
    64d4:	b0 e0       	ldi	r27, 0x00	; 0
    64d6:	bc 01       	movw	r22, r24
    64d8:	cd 01       	movw	r24, r26
    64da:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    64de:	dc 01       	movw	r26, r24
    64e0:	cb 01       	movw	r24, r22
    64e2:	bc 01       	movw	r22, r24
    64e4:	cd 01       	movw	r24, r26
    64e6:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
					}

					}

				if(Sec_Counter<10)
    64ea:	80 91 7b 01 	lds	r24, 0x017B
    64ee:	8a 30       	cpi	r24, 0x0A	; 10
    64f0:	c0 f4       	brcc	.+48     	; 0x6522 <main+0xcf2>
				{
					LCD_vidGotoxy(0,12);
    64f2:	80 e0       	ldi	r24, 0x00	; 0
    64f4:	6c e0       	ldi	r22, 0x0C	; 12
    64f6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    64fa:	80 e3       	ldi	r24, 0x30	; 48
    64fc:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Sec_Counter);
    6500:	80 91 7b 01 	lds	r24, 0x017B
    6504:	88 2f       	mov	r24, r24
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	a0 e0       	ldi	r26, 0x00	; 0
    650a:	b0 e0       	ldi	r27, 0x00	; 0
    650c:	bc 01       	movw	r22, r24
    650e:	cd 01       	movw	r24, r26
    6510:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6514:	dc 01       	movw	r26, r24
    6516:	cb 01       	movw	r24, r22
    6518:	bc 01       	movw	r22, r24
    651a:	cd 01       	movw	r24, r26
    651c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6520:	14 c0       	rjmp	.+40     	; 0x654a <main+0xd1a>
				}
				else
				{
					LCD_vidGotoxy(0,12);
    6522:	80 e0       	ldi	r24, 0x00	; 0
    6524:	6c e0       	ldi	r22, 0x0C	; 12
    6526:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Sec_Counter);
    652a:	80 91 7b 01 	lds	r24, 0x017B
    652e:	88 2f       	mov	r24, r24
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	a0 e0       	ldi	r26, 0x00	; 0
    6534:	b0 e0       	ldi	r27, 0x00	; 0
    6536:	bc 01       	movw	r22, r24
    6538:	cd 01       	movw	r24, r26
    653a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    653e:	dc 01       	movw	r26, r24
    6540:	cb 01       	movw	r24, r22
    6542:	bc 01       	movw	r22, r24
    6544:	cd 01       	movw	r24, r26
    6546:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}
					LCD_vidGotoxy(0,13);
    654a:	80 e0       	ldi	r24, 0x00	; 0
    654c:	6d e0       	ldi	r22, 0x0D	; 13
    654e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6552:	10 c3       	rjmp	.+1568   	; 0x6b74 <main+0x1344>
			}
			else
			if(Location == 1)
    6554:	80 91 7e 01 	lds	r24, 0x017E
    6558:	81 30       	cpi	r24, 0x01	; 1
    655a:	09 f0       	breq	.+2      	; 0x655e <main+0xd2e>
    655c:	f8 c0       	rjmp	.+496    	; 0x674e <main+0xf1e>
			{
				Min_Counter--;
    655e:	80 91 7c 01 	lds	r24, 0x017C
    6562:	81 50       	subi	r24, 0x01	; 1
    6564:	80 93 7c 01 	sts	0x017C, r24
				if(Min_Counter ==255)
    6568:	80 91 7c 01 	lds	r24, 0x017C
    656c:	8f 3f       	cpi	r24, 0xFF	; 255
    656e:	09 f0       	breq	.+2      	; 0x6572 <main+0xd42>
    6570:	b9 c0       	rjmp	.+370    	; 0x66e4 <main+0xeb4>
				{
					Min_Counter = 59;
    6572:	8b e3       	ldi	r24, 0x3B	; 59
    6574:	80 93 7c 01 	sts	0x017C, r24
					Hour_Counter--;
    6578:	80 91 7d 01 	lds	r24, 0x017D
    657c:	81 50       	subi	r24, 0x01	; 1
    657e:	80 93 7d 01 	sts	0x017D, r24
					if(Hour_Counter == 255)
    6582:	80 91 7d 01 	lds	r24, 0x017D
    6586:	8f 3f       	cpi	r24, 0xFF	; 255
    6588:	09 f0       	breq	.+2      	; 0x658c <main+0xd5c>
    658a:	7c c0       	rjmp	.+248    	; 0x6684 <main+0xe54>
					{
						Hour_Counter = 23;
    658c:	87 e1       	ldi	r24, 0x17	; 23
    658e:	80 93 7d 01 	sts	0x017D, r24
						Day_Counter--;
    6592:	80 91 76 01 	lds	r24, 0x0176
    6596:	81 50       	subi	r24, 0x01	; 1
    6598:	80 93 76 01 	sts	0x0176, r24
						if(Day_Counter == 0)
    659c:	80 91 76 01 	lds	r24, 0x0176
    65a0:	88 23       	and	r24, r24
    65a2:	09 f0       	breq	.+2      	; 0x65a6 <main+0xd76>
    65a4:	3f c0       	rjmp	.+126    	; 0x6624 <main+0xdf4>
						{
							Day_Counter = 30;
    65a6:	8e e1       	ldi	r24, 0x1E	; 30
    65a8:	80 93 76 01 	sts	0x0176, r24
							Mon_Counter--;
    65ac:	80 91 77 01 	lds	r24, 0x0177
    65b0:	81 50       	subi	r24, 0x01	; 1
    65b2:	80 93 77 01 	sts	0x0177, r24
							if(Mon_Counter == 0)
    65b6:	80 91 77 01 	lds	r24, 0x0177
    65ba:	88 23       	and	r24, r24
    65bc:	19 f4       	brne	.+6      	; 0x65c4 <main+0xd94>
							{
								Mon_Counter = 12;
    65be:	8c e0       	ldi	r24, 0x0C	; 12
    65c0:	80 93 77 01 	sts	0x0177, r24
							}
							if(Mon_Counter <10)
    65c4:	80 91 77 01 	lds	r24, 0x0177
    65c8:	8a 30       	cpi	r24, 0x0A	; 10
    65ca:	c0 f4       	brcc	.+48     	; 0x65fc <main+0xdcc>
							{
								LCD_vidGotoxy(1,9);
    65cc:	81 e0       	ldi	r24, 0x01	; 1
    65ce:	69 e0       	ldi	r22, 0x09	; 9
    65d0:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
								LCD_vidWriteCharctr('0');
    65d4:	80 e3       	ldi	r24, 0x30	; 48
    65d6:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
								LCD_vidWriteflt((f32)Mon_Counter);
    65da:	80 91 77 01 	lds	r24, 0x0177
    65de:	88 2f       	mov	r24, r24
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	a0 e0       	ldi	r26, 0x00	; 0
    65e4:	b0 e0       	ldi	r27, 0x00	; 0
    65e6:	bc 01       	movw	r22, r24
    65e8:	cd 01       	movw	r24, r26
    65ea:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    65ee:	dc 01       	movw	r26, r24
    65f0:	cb 01       	movw	r24, r22
    65f2:	bc 01       	movw	r22, r24
    65f4:	cd 01       	movw	r24, r26
    65f6:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    65fa:	14 c0       	rjmp	.+40     	; 0x6624 <main+0xdf4>
							}
							else
							{
								LCD_vidGotoxy(1,9);
    65fc:	81 e0       	ldi	r24, 0x01	; 1
    65fe:	69 e0       	ldi	r22, 0x09	; 9
    6600:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
								LCD_vidWriteflt((f32)Mon_Counter);
    6604:	80 91 77 01 	lds	r24, 0x0177
    6608:	88 2f       	mov	r24, r24
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	a0 e0       	ldi	r26, 0x00	; 0
    660e:	b0 e0       	ldi	r27, 0x00	; 0
    6610:	bc 01       	movw	r22, r24
    6612:	cd 01       	movw	r24, r26
    6614:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6618:	dc 01       	movw	r26, r24
    661a:	cb 01       	movw	r24, r22
    661c:	bc 01       	movw	r22, r24
    661e:	cd 01       	movw	r24, r26
    6620:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
							}

						}
						if(Day_Counter <10)
    6624:	80 91 76 01 	lds	r24, 0x0176
    6628:	8a 30       	cpi	r24, 0x0A	; 10
    662a:	c0 f4       	brcc	.+48     	; 0x665c <main+0xe2c>
						{
							LCD_vidGotoxy(1,6);
    662c:	81 e0       	ldi	r24, 0x01	; 1
    662e:	66 e0       	ldi	r22, 0x06	; 6
    6630:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteCharctr('0');
    6634:	80 e3       	ldi	r24, 0x30	; 48
    6636:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
							LCD_vidWriteflt((f32)Day_Counter);
    663a:	80 91 76 01 	lds	r24, 0x0176
    663e:	88 2f       	mov	r24, r24
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	a0 e0       	ldi	r26, 0x00	; 0
    6644:	b0 e0       	ldi	r27, 0x00	; 0
    6646:	bc 01       	movw	r22, r24
    6648:	cd 01       	movw	r24, r26
    664a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    664e:	dc 01       	movw	r26, r24
    6650:	cb 01       	movw	r24, r22
    6652:	bc 01       	movw	r22, r24
    6654:	cd 01       	movw	r24, r26
    6656:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    665a:	14 c0       	rjmp	.+40     	; 0x6684 <main+0xe54>
						}
						else
						{
							LCD_vidGotoxy(1,6);
    665c:	81 e0       	ldi	r24, 0x01	; 1
    665e:	66 e0       	ldi	r22, 0x06	; 6
    6660:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteflt((f32)Day_Counter);
    6664:	80 91 76 01 	lds	r24, 0x0176
    6668:	88 2f       	mov	r24, r24
    666a:	90 e0       	ldi	r25, 0x00	; 0
    666c:	a0 e0       	ldi	r26, 0x00	; 0
    666e:	b0 e0       	ldi	r27, 0x00	; 0
    6670:	bc 01       	movw	r22, r24
    6672:	cd 01       	movw	r24, r26
    6674:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6678:	dc 01       	movw	r26, r24
    667a:	cb 01       	movw	r24, r22
    667c:	bc 01       	movw	r22, r24
    667e:	cd 01       	movw	r24, r26
    6680:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
						}

					}
					if(Hour_Counter <10)
    6684:	80 91 7d 01 	lds	r24, 0x017D
    6688:	8a 30       	cpi	r24, 0x0A	; 10
    668a:	c0 f4       	brcc	.+48     	; 0x66bc <main+0xe8c>
					{
						LCD_vidGotoxy(0,6);
    668c:	80 e0       	ldi	r24, 0x00	; 0
    668e:	66 e0       	ldi	r22, 0x06	; 6
    6690:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteCharctr('0');
    6694:	80 e3       	ldi	r24, 0x30	; 48
    6696:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
						LCD_vidWriteflt((f32)Hour_Counter);
    669a:	80 91 7d 01 	lds	r24, 0x017D
    669e:	88 2f       	mov	r24, r24
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	a0 e0       	ldi	r26, 0x00	; 0
    66a4:	b0 e0       	ldi	r27, 0x00	; 0
    66a6:	bc 01       	movw	r22, r24
    66a8:	cd 01       	movw	r24, r26
    66aa:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    66ae:	dc 01       	movw	r26, r24
    66b0:	cb 01       	movw	r24, r22
    66b2:	bc 01       	movw	r22, r24
    66b4:	cd 01       	movw	r24, r26
    66b6:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    66ba:	14 c0       	rjmp	.+40     	; 0x66e4 <main+0xeb4>
					}
					else
					{
						LCD_vidGotoxy(0,6);
    66bc:	80 e0       	ldi	r24, 0x00	; 0
    66be:	66 e0       	ldi	r22, 0x06	; 6
    66c0:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteflt((f32)Hour_Counter);
    66c4:	80 91 7d 01 	lds	r24, 0x017D
    66c8:	88 2f       	mov	r24, r24
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	a0 e0       	ldi	r26, 0x00	; 0
    66ce:	b0 e0       	ldi	r27, 0x00	; 0
    66d0:	bc 01       	movw	r22, r24
    66d2:	cd 01       	movw	r24, r26
    66d4:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    66d8:	dc 01       	movw	r26, r24
    66da:	cb 01       	movw	r24, r22
    66dc:	bc 01       	movw	r22, r24
    66de:	cd 01       	movw	r24, r26
    66e0:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
					}

				}
				if(Min_Counter <10)
    66e4:	80 91 7c 01 	lds	r24, 0x017C
    66e8:	8a 30       	cpi	r24, 0x0A	; 10
    66ea:	c0 f4       	brcc	.+48     	; 0x671c <main+0xeec>
				{
					LCD_vidGotoxy(0,9);
    66ec:	80 e0       	ldi	r24, 0x00	; 0
    66ee:	69 e0       	ldi	r22, 0x09	; 9
    66f0:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    66f4:	80 e3       	ldi	r24, 0x30	; 48
    66f6:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Min_Counter);
    66fa:	80 91 7c 01 	lds	r24, 0x017C
    66fe:	88 2f       	mov	r24, r24
    6700:	90 e0       	ldi	r25, 0x00	; 0
    6702:	a0 e0       	ldi	r26, 0x00	; 0
    6704:	b0 e0       	ldi	r27, 0x00	; 0
    6706:	bc 01       	movw	r22, r24
    6708:	cd 01       	movw	r24, r26
    670a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    670e:	dc 01       	movw	r26, r24
    6710:	cb 01       	movw	r24, r22
    6712:	bc 01       	movw	r22, r24
    6714:	cd 01       	movw	r24, r26
    6716:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    671a:	14 c0       	rjmp	.+40     	; 0x6744 <main+0xf14>
				}
				else
				{
					LCD_vidGotoxy(0,9);
    671c:	80 e0       	ldi	r24, 0x00	; 0
    671e:	69 e0       	ldi	r22, 0x09	; 9
    6720:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Min_Counter);
    6724:	80 91 7c 01 	lds	r24, 0x017C
    6728:	88 2f       	mov	r24, r24
    672a:	90 e0       	ldi	r25, 0x00	; 0
    672c:	a0 e0       	ldi	r26, 0x00	; 0
    672e:	b0 e0       	ldi	r27, 0x00	; 0
    6730:	bc 01       	movw	r22, r24
    6732:	cd 01       	movw	r24, r26
    6734:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6738:	dc 01       	movw	r26, r24
    673a:	cb 01       	movw	r24, r22
    673c:	bc 01       	movw	r22, r24
    673e:	cd 01       	movw	r24, r26
    6740:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}
				LCD_vidGotoxy(0,10);
    6744:	80 e0       	ldi	r24, 0x00	; 0
    6746:	6a e0       	ldi	r22, 0x0A	; 10
    6748:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    674c:	13 c2       	rjmp	.+1062   	; 0x6b74 <main+0x1344>
			}
			else if(Location == 0)
    674e:	80 91 7e 01 	lds	r24, 0x017E
    6752:	88 23       	and	r24, r24
    6754:	09 f0       	breq	.+2      	; 0x6758 <main+0xf28>
    6756:	bb c0       	rjmp	.+374    	; 0x68ce <main+0x109e>
			{
				Hour_Counter--;
    6758:	80 91 7d 01 	lds	r24, 0x017D
    675c:	81 50       	subi	r24, 0x01	; 1
    675e:	80 93 7d 01 	sts	0x017D, r24
				if(Hour_Counter == 255)
    6762:	80 91 7d 01 	lds	r24, 0x017D
    6766:	8f 3f       	cpi	r24, 0xFF	; 255
    6768:	09 f0       	breq	.+2      	; 0x676c <main+0xf3c>
    676a:	7c c0       	rjmp	.+248    	; 0x6864 <main+0x1034>
				{
					Hour_Counter = 23;
    676c:	87 e1       	ldi	r24, 0x17	; 23
    676e:	80 93 7d 01 	sts	0x017D, r24
					Day_Counter--;
    6772:	80 91 76 01 	lds	r24, 0x0176
    6776:	81 50       	subi	r24, 0x01	; 1
    6778:	80 93 76 01 	sts	0x0176, r24
					if(Day_Counter == 0)
    677c:	80 91 76 01 	lds	r24, 0x0176
    6780:	88 23       	and	r24, r24
    6782:	09 f0       	breq	.+2      	; 0x6786 <main+0xf56>
    6784:	3f c0       	rjmp	.+126    	; 0x6804 <main+0xfd4>
					{
						Day_Counter = 30;
    6786:	8e e1       	ldi	r24, 0x1E	; 30
    6788:	80 93 76 01 	sts	0x0176, r24
						Mon_Counter--;
    678c:	80 91 77 01 	lds	r24, 0x0177
    6790:	81 50       	subi	r24, 0x01	; 1
    6792:	80 93 77 01 	sts	0x0177, r24
						if(Mon_Counter == 0)
    6796:	80 91 77 01 	lds	r24, 0x0177
    679a:	88 23       	and	r24, r24
    679c:	19 f4       	brne	.+6      	; 0x67a4 <main+0xf74>
						{
							Mon_Counter = 12;
    679e:	8c e0       	ldi	r24, 0x0C	; 12
    67a0:	80 93 77 01 	sts	0x0177, r24
						}
						if(Mon_Counter <10)
    67a4:	80 91 77 01 	lds	r24, 0x0177
    67a8:	8a 30       	cpi	r24, 0x0A	; 10
    67aa:	c0 f4       	brcc	.+48     	; 0x67dc <main+0xfac>
						{
							LCD_vidGotoxy(1,9);
    67ac:	81 e0       	ldi	r24, 0x01	; 1
    67ae:	69 e0       	ldi	r22, 0x09	; 9
    67b0:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteCharctr('0');
    67b4:	80 e3       	ldi	r24, 0x30	; 48
    67b6:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
							LCD_vidWriteflt((f32)Mon_Counter);
    67ba:	80 91 77 01 	lds	r24, 0x0177
    67be:	88 2f       	mov	r24, r24
    67c0:	90 e0       	ldi	r25, 0x00	; 0
    67c2:	a0 e0       	ldi	r26, 0x00	; 0
    67c4:	b0 e0       	ldi	r27, 0x00	; 0
    67c6:	bc 01       	movw	r22, r24
    67c8:	cd 01       	movw	r24, r26
    67ca:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    67ce:	dc 01       	movw	r26, r24
    67d0:	cb 01       	movw	r24, r22
    67d2:	bc 01       	movw	r22, r24
    67d4:	cd 01       	movw	r24, r26
    67d6:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    67da:	14 c0       	rjmp	.+40     	; 0x6804 <main+0xfd4>
						}
						else
						{
							LCD_vidGotoxy(1,9);
    67dc:	81 e0       	ldi	r24, 0x01	; 1
    67de:	69 e0       	ldi	r22, 0x09	; 9
    67e0:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
							LCD_vidWriteflt((f32)Mon_Counter);
    67e4:	80 91 77 01 	lds	r24, 0x0177
    67e8:	88 2f       	mov	r24, r24
    67ea:	90 e0       	ldi	r25, 0x00	; 0
    67ec:	a0 e0       	ldi	r26, 0x00	; 0
    67ee:	b0 e0       	ldi	r27, 0x00	; 0
    67f0:	bc 01       	movw	r22, r24
    67f2:	cd 01       	movw	r24, r26
    67f4:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    67f8:	dc 01       	movw	r26, r24
    67fa:	cb 01       	movw	r24, r22
    67fc:	bc 01       	movw	r22, r24
    67fe:	cd 01       	movw	r24, r26
    6800:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
						}

					}
					if(Day_Counter <10)
    6804:	80 91 76 01 	lds	r24, 0x0176
    6808:	8a 30       	cpi	r24, 0x0A	; 10
    680a:	c0 f4       	brcc	.+48     	; 0x683c <main+0x100c>
					{
						LCD_vidGotoxy(1,6);
    680c:	81 e0       	ldi	r24, 0x01	; 1
    680e:	66 e0       	ldi	r22, 0x06	; 6
    6810:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteCharctr('0');
    6814:	80 e3       	ldi	r24, 0x30	; 48
    6816:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
						LCD_vidWriteflt((f32)Day_Counter);
    681a:	80 91 76 01 	lds	r24, 0x0176
    681e:	88 2f       	mov	r24, r24
    6820:	90 e0       	ldi	r25, 0x00	; 0
    6822:	a0 e0       	ldi	r26, 0x00	; 0
    6824:	b0 e0       	ldi	r27, 0x00	; 0
    6826:	bc 01       	movw	r22, r24
    6828:	cd 01       	movw	r24, r26
    682a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    682e:	dc 01       	movw	r26, r24
    6830:	cb 01       	movw	r24, r22
    6832:	bc 01       	movw	r22, r24
    6834:	cd 01       	movw	r24, r26
    6836:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    683a:	14 c0       	rjmp	.+40     	; 0x6864 <main+0x1034>
					}
					else
					{
						LCD_vidGotoxy(1,6);
    683c:	81 e0       	ldi	r24, 0x01	; 1
    683e:	66 e0       	ldi	r22, 0x06	; 6
    6840:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteflt((f32)Day_Counter);
    6844:	80 91 76 01 	lds	r24, 0x0176
    6848:	88 2f       	mov	r24, r24
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	a0 e0       	ldi	r26, 0x00	; 0
    684e:	b0 e0       	ldi	r27, 0x00	; 0
    6850:	bc 01       	movw	r22, r24
    6852:	cd 01       	movw	r24, r26
    6854:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6858:	dc 01       	movw	r26, r24
    685a:	cb 01       	movw	r24, r22
    685c:	bc 01       	movw	r22, r24
    685e:	cd 01       	movw	r24, r26
    6860:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
					}
				}
				if(Hour_Counter <10)
    6864:	80 91 7d 01 	lds	r24, 0x017D
    6868:	8a 30       	cpi	r24, 0x0A	; 10
    686a:	c0 f4       	brcc	.+48     	; 0x689c <main+0x106c>
				{
					LCD_vidGotoxy(0,6);
    686c:	80 e0       	ldi	r24, 0x00	; 0
    686e:	66 e0       	ldi	r22, 0x06	; 6
    6870:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    6874:	80 e3       	ldi	r24, 0x30	; 48
    6876:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Hour_Counter);
    687a:	80 91 7d 01 	lds	r24, 0x017D
    687e:	88 2f       	mov	r24, r24
    6880:	90 e0       	ldi	r25, 0x00	; 0
    6882:	a0 e0       	ldi	r26, 0x00	; 0
    6884:	b0 e0       	ldi	r27, 0x00	; 0
    6886:	bc 01       	movw	r22, r24
    6888:	cd 01       	movw	r24, r26
    688a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    688e:	dc 01       	movw	r26, r24
    6890:	cb 01       	movw	r24, r22
    6892:	bc 01       	movw	r22, r24
    6894:	cd 01       	movw	r24, r26
    6896:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    689a:	14 c0       	rjmp	.+40     	; 0x68c4 <main+0x1094>
				}
				else
				{
					LCD_vidGotoxy(0,6);
    689c:	80 e0       	ldi	r24, 0x00	; 0
    689e:	66 e0       	ldi	r22, 0x06	; 6
    68a0:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Hour_Counter);
    68a4:	80 91 7d 01 	lds	r24, 0x017D
    68a8:	88 2f       	mov	r24, r24
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	a0 e0       	ldi	r26, 0x00	; 0
    68ae:	b0 e0       	ldi	r27, 0x00	; 0
    68b0:	bc 01       	movw	r22, r24
    68b2:	cd 01       	movw	r24, r26
    68b4:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    68b8:	dc 01       	movw	r26, r24
    68ba:	cb 01       	movw	r24, r22
    68bc:	bc 01       	movw	r22, r24
    68be:	cd 01       	movw	r24, r26
    68c0:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}
				LCD_vidGotoxy(0,7);
    68c4:	80 e0       	ldi	r24, 0x00	; 0
    68c6:	67 e0       	ldi	r22, 0x07	; 7
    68c8:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    68cc:	53 c1       	rjmp	.+678    	; 0x6b74 <main+0x1344>
			}
			else if(Location == 3)
    68ce:	80 91 7e 01 	lds	r24, 0x017E
    68d2:	83 30       	cpi	r24, 0x03	; 3
    68d4:	09 f0       	breq	.+2      	; 0x68d8 <main+0x10a8>
    68d6:	7e c0       	rjmp	.+252    	; 0x69d4 <main+0x11a4>
			{
				Day_Counter--;
    68d8:	80 91 76 01 	lds	r24, 0x0176
    68dc:	81 50       	subi	r24, 0x01	; 1
    68de:	80 93 76 01 	sts	0x0176, r24
				if(Day_Counter == 0)
    68e2:	80 91 76 01 	lds	r24, 0x0176
    68e6:	88 23       	and	r24, r24
    68e8:	09 f0       	breq	.+2      	; 0x68ec <main+0x10bc>
    68ea:	3f c0       	rjmp	.+126    	; 0x696a <main+0x113a>
				{
					Day_Counter = 30;
    68ec:	8e e1       	ldi	r24, 0x1E	; 30
    68ee:	80 93 76 01 	sts	0x0176, r24
					Mon_Counter--;
    68f2:	80 91 77 01 	lds	r24, 0x0177
    68f6:	81 50       	subi	r24, 0x01	; 1
    68f8:	80 93 77 01 	sts	0x0177, r24
					if(Mon_Counter == 0)
    68fc:	80 91 77 01 	lds	r24, 0x0177
    6900:	88 23       	and	r24, r24
    6902:	19 f4       	brne	.+6      	; 0x690a <main+0x10da>
					{
						Mon_Counter = 12;
    6904:	8c e0       	ldi	r24, 0x0C	; 12
    6906:	80 93 77 01 	sts	0x0177, r24
					}
					if(Mon_Counter <10)
    690a:	80 91 77 01 	lds	r24, 0x0177
    690e:	8a 30       	cpi	r24, 0x0A	; 10
    6910:	c0 f4       	brcc	.+48     	; 0x6942 <main+0x1112>
					{
						LCD_vidGotoxy(1,9);
    6912:	81 e0       	ldi	r24, 0x01	; 1
    6914:	69 e0       	ldi	r22, 0x09	; 9
    6916:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteCharctr('0');
    691a:	80 e3       	ldi	r24, 0x30	; 48
    691c:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
						LCD_vidWriteflt((f32)Mon_Counter);
    6920:	80 91 77 01 	lds	r24, 0x0177
    6924:	88 2f       	mov	r24, r24
    6926:	90 e0       	ldi	r25, 0x00	; 0
    6928:	a0 e0       	ldi	r26, 0x00	; 0
    692a:	b0 e0       	ldi	r27, 0x00	; 0
    692c:	bc 01       	movw	r22, r24
    692e:	cd 01       	movw	r24, r26
    6930:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6934:	dc 01       	movw	r26, r24
    6936:	cb 01       	movw	r24, r22
    6938:	bc 01       	movw	r22, r24
    693a:	cd 01       	movw	r24, r26
    693c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6940:	14 c0       	rjmp	.+40     	; 0x696a <main+0x113a>
					}
					else
					{
						LCD_vidGotoxy(1,9);
    6942:	81 e0       	ldi	r24, 0x01	; 1
    6944:	69 e0       	ldi	r22, 0x09	; 9
    6946:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						LCD_vidWriteflt((f32)Mon_Counter);
    694a:	80 91 77 01 	lds	r24, 0x0177
    694e:	88 2f       	mov	r24, r24
    6950:	90 e0       	ldi	r25, 0x00	; 0
    6952:	a0 e0       	ldi	r26, 0x00	; 0
    6954:	b0 e0       	ldi	r27, 0x00	; 0
    6956:	bc 01       	movw	r22, r24
    6958:	cd 01       	movw	r24, r26
    695a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    695e:	dc 01       	movw	r26, r24
    6960:	cb 01       	movw	r24, r22
    6962:	bc 01       	movw	r22, r24
    6964:	cd 01       	movw	r24, r26
    6966:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
					}

				}
				if(Day_Counter <10)
    696a:	80 91 76 01 	lds	r24, 0x0176
    696e:	8a 30       	cpi	r24, 0x0A	; 10
    6970:	c0 f4       	brcc	.+48     	; 0x69a2 <main+0x1172>
				{
					LCD_vidGotoxy(1,6);
    6972:	81 e0       	ldi	r24, 0x01	; 1
    6974:	66 e0       	ldi	r22, 0x06	; 6
    6976:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    697a:	80 e3       	ldi	r24, 0x30	; 48
    697c:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Day_Counter);
    6980:	80 91 76 01 	lds	r24, 0x0176
    6984:	88 2f       	mov	r24, r24
    6986:	90 e0       	ldi	r25, 0x00	; 0
    6988:	a0 e0       	ldi	r26, 0x00	; 0
    698a:	b0 e0       	ldi	r27, 0x00	; 0
    698c:	bc 01       	movw	r22, r24
    698e:	cd 01       	movw	r24, r26
    6990:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6994:	dc 01       	movw	r26, r24
    6996:	cb 01       	movw	r24, r22
    6998:	bc 01       	movw	r22, r24
    699a:	cd 01       	movw	r24, r26
    699c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    69a0:	14 c0       	rjmp	.+40     	; 0x69ca <main+0x119a>
				}
				else
				{
					LCD_vidGotoxy(1,6);
    69a2:	81 e0       	ldi	r24, 0x01	; 1
    69a4:	66 e0       	ldi	r22, 0x06	; 6
    69a6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Day_Counter);
    69aa:	80 91 76 01 	lds	r24, 0x0176
    69ae:	88 2f       	mov	r24, r24
    69b0:	90 e0       	ldi	r25, 0x00	; 0
    69b2:	a0 e0       	ldi	r26, 0x00	; 0
    69b4:	b0 e0       	ldi	r27, 0x00	; 0
    69b6:	bc 01       	movw	r22, r24
    69b8:	cd 01       	movw	r24, r26
    69ba:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    69be:	dc 01       	movw	r26, r24
    69c0:	cb 01       	movw	r24, r22
    69c2:	bc 01       	movw	r22, r24
    69c4:	cd 01       	movw	r24, r26
    69c6:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}
				LCD_vidGotoxy(1,7);
    69ca:	81 e0       	ldi	r24, 0x01	; 1
    69cc:	67 e0       	ldi	r22, 0x07	; 7
    69ce:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    69d2:	d0 c0       	rjmp	.+416    	; 0x6b74 <main+0x1344>
			}
			else if(Location == 4)
    69d4:	80 91 7e 01 	lds	r24, 0x017E
    69d8:	84 30       	cpi	r24, 0x04	; 4
    69da:	09 f0       	breq	.+2      	; 0x69de <main+0x11ae>
    69dc:	cb c0       	rjmp	.+406    	; 0x6b74 <main+0x1344>
			{
				Mon_Counter--;
    69de:	80 91 77 01 	lds	r24, 0x0177
    69e2:	81 50       	subi	r24, 0x01	; 1
    69e4:	80 93 77 01 	sts	0x0177, r24
				if(Mon_Counter == 0)
    69e8:	80 91 77 01 	lds	r24, 0x0177
    69ec:	88 23       	and	r24, r24
    69ee:	19 f4       	brne	.+6      	; 0x69f6 <main+0x11c6>
				{
					Mon_Counter = 12;
    69f0:	8c e0       	ldi	r24, 0x0C	; 12
    69f2:	80 93 77 01 	sts	0x0177, r24
				}
				if(Mon_Counter <10)
    69f6:	80 91 77 01 	lds	r24, 0x0177
    69fa:	8a 30       	cpi	r24, 0x0A	; 10
    69fc:	c0 f4       	brcc	.+48     	; 0x6a2e <main+0x11fe>
				{
					LCD_vidGotoxy(1,9);
    69fe:	81 e0       	ldi	r24, 0x01	; 1
    6a00:	69 e0       	ldi	r22, 0x09	; 9
    6a02:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteCharctr('0');
    6a06:	80 e3       	ldi	r24, 0x30	; 48
    6a08:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
					LCD_vidWriteflt((f32)Mon_Counter);
    6a0c:	80 91 77 01 	lds	r24, 0x0177
    6a10:	88 2f       	mov	r24, r24
    6a12:	90 e0       	ldi	r25, 0x00	; 0
    6a14:	a0 e0       	ldi	r26, 0x00	; 0
    6a16:	b0 e0       	ldi	r27, 0x00	; 0
    6a18:	bc 01       	movw	r22, r24
    6a1a:	cd 01       	movw	r24, r26
    6a1c:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6a20:	dc 01       	movw	r26, r24
    6a22:	cb 01       	movw	r24, r22
    6a24:	bc 01       	movw	r22, r24
    6a26:	cd 01       	movw	r24, r26
    6a28:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6a2c:	14 c0       	rjmp	.+40     	; 0x6a56 <main+0x1226>
				}
				else
				{
					LCD_vidGotoxy(1,9);
    6a2e:	81 e0       	ldi	r24, 0x01	; 1
    6a30:	69 e0       	ldi	r22, 0x09	; 9
    6a32:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
					LCD_vidWriteflt((f32)Mon_Counter);
    6a36:	80 91 77 01 	lds	r24, 0x0177
    6a3a:	88 2f       	mov	r24, r24
    6a3c:	90 e0       	ldi	r25, 0x00	; 0
    6a3e:	a0 e0       	ldi	r26, 0x00	; 0
    6a40:	b0 e0       	ldi	r27, 0x00	; 0
    6a42:	bc 01       	movw	r22, r24
    6a44:	cd 01       	movw	r24, r26
    6a46:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6a4a:	dc 01       	movw	r26, r24
    6a4c:	cb 01       	movw	r24, r22
    6a4e:	bc 01       	movw	r22, r24
    6a50:	cd 01       	movw	r24, r26
    6a52:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
				}
				LCD_vidGotoxy(1,10);
    6a56:	81 e0       	ldi	r24, 0x01	; 1
    6a58:	6a e0       	ldi	r22, 0x0A	; 10
    6a5a:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6a5e:	8a c0       	rjmp	.+276    	; 0x6b74 <main+0x1344>
			}
	}
			/*Right*/
			else if((DIO_u8GetPinVal(DIO_PORTD,DIO_PIN5) == 0))
    6a60:	83 e0       	ldi	r24, 0x03	; 3
    6a62:	65 e0       	ldi	r22, 0x05	; 5
    6a64:	0e 94 3d 18 	call	0x307a	; 0x307a <DIO_u8GetPinVal>
    6a68:	88 23       	and	r24, r24
    6a6a:	09 f0       	breq	.+2      	; 0x6a6e <main+0x123e>
    6a6c:	3e c0       	rjmp	.+124    	; 0x6aea <main+0x12ba>
				 {
				while(DIO_u8GetPinVal(DIO_PORTD,DIO_PIN5) == 0);
    6a6e:	83 e0       	ldi	r24, 0x03	; 3
    6a70:	65 e0       	ldi	r22, 0x05	; 5
    6a72:	0e 94 3d 18 	call	0x307a	; 0x307a <DIO_u8GetPinVal>
    6a76:	88 23       	and	r24, r24
    6a78:	d1 f3       	breq	.-12     	; 0x6a6e <main+0x123e>

				if(Location==0)
    6a7a:	80 91 7e 01 	lds	r24, 0x017E
    6a7e:	88 23       	and	r24, r24
    6a80:	41 f4       	brne	.+16     	; 0x6a92 <main+0x1262>
					{
						Location=1;
    6a82:	81 e0       	ldi	r24, 0x01	; 1
    6a84:	80 93 7e 01 	sts	0x017E, r24
						LCD_vidGotoxy(0,10);
    6a88:	80 e0       	ldi	r24, 0x00	; 0
    6a8a:	6a e0       	ldi	r22, 0x0A	; 10
    6a8c:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6a90:	71 c0       	rjmp	.+226    	; 0x6b74 <main+0x1344>
					}
					else if(Location==1)
    6a92:	80 91 7e 01 	lds	r24, 0x017E
    6a96:	81 30       	cpi	r24, 0x01	; 1
    6a98:	41 f4       	brne	.+16     	; 0x6aaa <main+0x127a>
					{
						Location=2;
    6a9a:	82 e0       	ldi	r24, 0x02	; 2
    6a9c:	80 93 7e 01 	sts	0x017E, r24
						LCD_vidGotoxy(0,13);
    6aa0:	80 e0       	ldi	r24, 0x00	; 0
    6aa2:	6d e0       	ldi	r22, 0x0D	; 13
    6aa4:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6aa8:	65 c0       	rjmp	.+202    	; 0x6b74 <main+0x1344>
					}
					else if( Location == 2)
    6aaa:	80 91 7e 01 	lds	r24, 0x017E
    6aae:	82 30       	cpi	r24, 0x02	; 2
    6ab0:	41 f4       	brne	.+16     	; 0x6ac2 <main+0x1292>
					{
						Location=3;
    6ab2:	83 e0       	ldi	r24, 0x03	; 3
    6ab4:	80 93 7e 01 	sts	0x017E, r24
						LCD_vidGotoxy(1,7);
    6ab8:	81 e0       	ldi	r24, 0x01	; 1
    6aba:	67 e0       	ldi	r22, 0x07	; 7
    6abc:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6ac0:	59 c0       	rjmp	.+178    	; 0x6b74 <main+0x1344>
					}

					else if(Location == 3)
    6ac2:	80 91 7e 01 	lds	r24, 0x017E
    6ac6:	83 30       	cpi	r24, 0x03	; 3
    6ac8:	41 f4       	brne	.+16     	; 0x6ada <main+0x12aa>
					{
						Location=4;
    6aca:	84 e0       	ldi	r24, 0x04	; 4
    6acc:	80 93 7e 01 	sts	0x017E, r24
						LCD_vidGotoxy(1,10);
    6ad0:	81 e0       	ldi	r24, 0x01	; 1
    6ad2:	6a e0       	ldi	r22, 0x0A	; 10
    6ad4:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6ad8:	4d c0       	rjmp	.+154    	; 0x6b74 <main+0x1344>
					}

					else{
						Location = 4;
    6ada:	84 e0       	ldi	r24, 0x04	; 4
    6adc:	80 93 7e 01 	sts	0x017E, r24
						LCD_vidGotoxy(1,10);
    6ae0:	81 e0       	ldi	r24, 0x01	; 1
    6ae2:	6a e0       	ldi	r22, 0x0A	; 10
    6ae4:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6ae8:	45 c0       	rjmp	.+138    	; 0x6b74 <main+0x1344>

					}

				 }
				/*Left*/
				else if((DIO_u8GetPinVal(DIO_PORTD,DIO_PIN6) == 0))
    6aea:	83 e0       	ldi	r24, 0x03	; 3
    6aec:	66 e0       	ldi	r22, 0x06	; 6
    6aee:	0e 94 3d 18 	call	0x307a	; 0x307a <DIO_u8GetPinVal>
    6af2:	88 23       	and	r24, r24
    6af4:	09 f0       	breq	.+2      	; 0x6af8 <main+0x12c8>
    6af6:	3e c0       	rjmp	.+124    	; 0x6b74 <main+0x1344>
					 {
					while(DIO_u8GetPinVal(DIO_PORTD,DIO_PIN6) == 0);
    6af8:	83 e0       	ldi	r24, 0x03	; 3
    6afa:	66 e0       	ldi	r22, 0x06	; 6
    6afc:	0e 94 3d 18 	call	0x307a	; 0x307a <DIO_u8GetPinVal>
    6b00:	88 23       	and	r24, r24
    6b02:	d1 f3       	breq	.-12     	; 0x6af8 <main+0x12c8>
						if(Location==0)
    6b04:	80 91 7e 01 	lds	r24, 0x017E
    6b08:	88 23       	and	r24, r24
    6b0a:	39 f4       	brne	.+14     	; 0x6b1a <main+0x12ea>
						{
							Location=0;
    6b0c:	10 92 7e 01 	sts	0x017E, r1
							LCD_vidGotoxy(0,7);
    6b10:	80 e0       	ldi	r24, 0x00	; 0
    6b12:	67 e0       	ldi	r22, 0x07	; 7
    6b14:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6b18:	0a c0       	rjmp	.+20     	; 0x6b2e <main+0x12fe>
						}
						else if(Location==1)
    6b1a:	80 91 7e 01 	lds	r24, 0x017E
    6b1e:	81 30       	cpi	r24, 0x01	; 1
    6b20:	31 f4       	brne	.+12     	; 0x6b2e <main+0x12fe>
						{
							Location=0;
    6b22:	10 92 7e 01 	sts	0x017E, r1
							LCD_vidGotoxy(0,7);
    6b26:	80 e0       	ldi	r24, 0x00	; 0
    6b28:	67 e0       	ldi	r22, 0x07	; 7
    6b2a:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
						}
						if(Location==2)
    6b2e:	80 91 7e 01 	lds	r24, 0x017E
    6b32:	82 30       	cpi	r24, 0x02	; 2
    6b34:	41 f4       	brne	.+16     	; 0x6b46 <main+0x1316>
						{
							Location=1;
    6b36:	81 e0       	ldi	r24, 0x01	; 1
    6b38:	80 93 7e 01 	sts	0x017E, r24
							LCD_vidGotoxy(0,10);
    6b3c:	80 e0       	ldi	r24, 0x00	; 0
    6b3e:	6a e0       	ldi	r22, 0x0A	; 10
    6b40:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6b44:	17 c0       	rjmp	.+46     	; 0x6b74 <main+0x1344>
						}
						else if(Location==3)
    6b46:	80 91 7e 01 	lds	r24, 0x017E
    6b4a:	83 30       	cpi	r24, 0x03	; 3
    6b4c:	41 f4       	brne	.+16     	; 0x6b5e <main+0x132e>
						{
							Location=2;
    6b4e:	82 e0       	ldi	r24, 0x02	; 2
    6b50:	80 93 7e 01 	sts	0x017E, r24
							LCD_vidGotoxy(0,13);
    6b54:	80 e0       	ldi	r24, 0x00	; 0
    6b56:	6d e0       	ldi	r22, 0x0D	; 13
    6b58:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
    6b5c:	0b c0       	rjmp	.+22     	; 0x6b74 <main+0x1344>
						}
						else if(Location==4)
    6b5e:	80 91 7e 01 	lds	r24, 0x017E
    6b62:	84 30       	cpi	r24, 0x04	; 4
    6b64:	39 f4       	brne	.+14     	; 0x6b74 <main+0x1344>
						{
							Location = 3;
    6b66:	83 e0       	ldi	r24, 0x03	; 3
    6b68:	80 93 7e 01 	sts	0x017E, r24
							LCD_vidGotoxy(1,7);
    6b6c:	81 e0       	ldi	r24, 0x01	; 1
    6b6e:	67 e0       	ldi	r22, 0x07	; 7
    6b70:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
			}
		}

		LCD_vidGotoxy(0,7);

while (Mode == MODE2)
    6b74:	80 91 78 01 	lds	r24, 0x0178
    6b78:	82 30       	cpi	r24, 0x02	; 2
    6b7a:	11 f4       	brne	.+4      	; 0x6b80 <main+0x1350>
    6b7c:	0c 94 9c 2d 	jmp	0x5b38	; 0x5b38 <main+0x308>
    6b80:	0c 94 91 2d 	jmp	0x5b22	; 0x5b22 <main+0x2f2>

00006b84 <Sec_Timing>:

}


void Sec_Timing(void)
{
    6b84:	df 93       	push	r29
    6b86:	cf 93       	push	r28
    6b88:	cd b7       	in	r28, 0x3d	; 61
    6b8a:	de b7       	in	r29, 0x3e	; 62

	counter ++;
    6b8c:	80 91 85 01 	lds	r24, 0x0185
    6b90:	90 91 86 01 	lds	r25, 0x0186
    6b94:	a0 91 87 01 	lds	r26, 0x0187
    6b98:	b0 91 88 01 	lds	r27, 0x0188
    6b9c:	01 96       	adiw	r24, 0x01	; 1
    6b9e:	a1 1d       	adc	r26, r1
    6ba0:	b1 1d       	adc	r27, r1
    6ba2:	80 93 85 01 	sts	0x0185, r24
    6ba6:	90 93 86 01 	sts	0x0186, r25
    6baa:	a0 93 87 01 	sts	0x0187, r26
    6bae:	b0 93 88 01 	sts	0x0188, r27
	if(counter == 4000)
    6bb2:	80 91 85 01 	lds	r24, 0x0185
    6bb6:	90 91 86 01 	lds	r25, 0x0186
    6bba:	a0 91 87 01 	lds	r26, 0x0187
    6bbe:	b0 91 88 01 	lds	r27, 0x0188
    6bc2:	80 3a       	cpi	r24, 0xA0	; 160
    6bc4:	2f e0       	ldi	r18, 0x0F	; 15
    6bc6:	92 07       	cpc	r25, r18
    6bc8:	20 e0       	ldi	r18, 0x00	; 0
    6bca:	a2 07       	cpc	r26, r18
    6bcc:	20 e0       	ldi	r18, 0x00	; 0
    6bce:	b2 07       	cpc	r27, r18
    6bd0:	09 f0       	breq	.+2      	; 0x6bd4 <Sec_Timing+0x50>
    6bd2:	4a c0       	rjmp	.+148    	; 0x6c68 <Sec_Timing+0xe4>
	{
		Sec_Counter++;
    6bd4:	80 91 7b 01 	lds	r24, 0x017B
    6bd8:	8f 5f       	subi	r24, 0xFF	; 255
    6bda:	80 93 7b 01 	sts	0x017B, r24
		if(Sec_Counter == 60)
    6bde:	80 91 7b 01 	lds	r24, 0x017B
    6be2:	8c 33       	cpi	r24, 0x3C	; 60
    6be4:	11 f4       	brne	.+4      	; 0x6bea <Sec_Timing+0x66>
			Sec_Counter = 0;
    6be6:	10 92 7b 01 	sts	0x017B, r1
		if(Sec_Counter<10)
    6bea:	80 91 7b 01 	lds	r24, 0x017B
    6bee:	8a 30       	cpi	r24, 0x0A	; 10
    6bf0:	c0 f4       	brcc	.+48     	; 0x6c22 <Sec_Timing+0x9e>
		{
			LCD_vidGotoxy(0,12);
    6bf2:	80 e0       	ldi	r24, 0x00	; 0
    6bf4:	6c e0       	ldi	r22, 0x0C	; 12
    6bf6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
			LCD_vidWriteCharctr('0');
    6bfa:	80 e3       	ldi	r24, 0x30	; 48
    6bfc:	0e 94 01 22 	call	0x4402	; 0x4402 <LCD_vidWriteCharctr>
			LCD_vidWriteflt((f32)Sec_Counter);
    6c00:	80 91 7b 01 	lds	r24, 0x017B
    6c04:	88 2f       	mov	r24, r24
    6c06:	90 e0       	ldi	r25, 0x00	; 0
    6c08:	a0 e0       	ldi	r26, 0x00	; 0
    6c0a:	b0 e0       	ldi	r27, 0x00	; 0
    6c0c:	bc 01       	movw	r22, r24
    6c0e:	cd 01       	movw	r24, r26
    6c10:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6c14:	dc 01       	movw	r26, r24
    6c16:	cb 01       	movw	r24, r22
    6c18:	bc 01       	movw	r22, r24
    6c1a:	cd 01       	movw	r24, r26
    6c1c:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
    6c20:	14 c0       	rjmp	.+40     	; 0x6c4a <Sec_Timing+0xc6>
		}
		else
		{
			LCD_vidGotoxy(0,12);
    6c22:	80 e0       	ldi	r24, 0x00	; 0
    6c24:	6c e0       	ldi	r22, 0x0C	; 12
    6c26:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <LCD_vidGotoxy>
			LCD_vidWriteflt((f32)Sec_Counter);
    6c2a:	80 91 7b 01 	lds	r24, 0x017B
    6c2e:	88 2f       	mov	r24, r24
    6c30:	90 e0       	ldi	r25, 0x00	; 0
    6c32:	a0 e0       	ldi	r26, 0x00	; 0
    6c34:	b0 e0       	ldi	r27, 0x00	; 0
    6c36:	bc 01       	movw	r22, r24
    6c38:	cd 01       	movw	r24, r26
    6c3a:	0e 94 36 12 	call	0x246c	; 0x246c <__floatunsisf>
    6c3e:	dc 01       	movw	r26, r24
    6c40:	cb 01       	movw	r24, r22
    6c42:	bc 01       	movw	r22, r24
    6c44:	cd 01       	movw	r24, r26
    6c46:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <LCD_vidWriteflt>
		}
		if(Sec_Counter == 0)
    6c4a:	80 91 7b 01 	lds	r24, 0x017B
    6c4e:	88 23       	and	r24, r24
    6c50:	19 f4       	brne	.+6      	; 0x6c58 <Sec_Timing+0xd4>
				Sec_Counter = 60;
    6c52:	8c e3       	ldi	r24, 0x3C	; 60
    6c54:	80 93 7b 01 	sts	0x017B, r24
			counter = 0;
    6c58:	10 92 85 01 	sts	0x0185, r1
    6c5c:	10 92 86 01 	sts	0x0186, r1
    6c60:	10 92 87 01 	sts	0x0187, r1
    6c64:	10 92 88 01 	sts	0x0188, r1
	}

}
    6c68:	cf 91       	pop	r28
    6c6a:	df 91       	pop	r29
    6c6c:	08 95       	ret

00006c6e <Mode_Chang>:


void Mode_Chang(void)
{
    6c6e:	df 93       	push	r29
    6c70:	cf 93       	push	r28
    6c72:	cd b7       	in	r28, 0x3d	; 61
    6c74:	de b7       	in	r29, 0x3e	; 62
	if(Mode == MODE1)
    6c76:	80 91 78 01 	lds	r24, 0x0178
    6c7a:	81 30       	cpi	r24, 0x01	; 1
    6c7c:	59 f4       	brne	.+22     	; 0x6c94 <Mode_Chang+0x26>
	{
		TIMER0_vidStopTimer();
    6c7e:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <TIMER0_vidStopTimer>

		LCD_vidSendCommand(LCD_CURSURON_BLINKOFF);
    6c82:	8e e0       	ldi	r24, 0x0E	; 14
    6c84:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
		Mode = MODE2;
    6c88:	82 e0       	ldi	r24, 0x02	; 2
    6c8a:	80 93 78 01 	sts	0x0178, r24
		Location = 0;
    6c8e:	10 92 7e 01 	sts	0x017E, r1
    6c92:	08 c0       	rjmp	.+16     	; 0x6ca4 <Mode_Chang+0x36>
	}
	else
	{
		TIMER0_ContCounting();
    6c94:	0e 94 86 2b 	call	0x570c	; 0x570c <TIMER0_ContCounting>
		LCD_vidSendCommand(LCD_CURSUROFF_BLINKOFF);
    6c98:	8c e0       	ldi	r24, 0x0C	; 12
    6c9a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <LCD_vidSendCommand>
		Mode = MODE1;
    6c9e:	81 e0       	ldi	r24, 0x01	; 1
    6ca0:	80 93 78 01 	sts	0x0178, r24
	}
}
    6ca4:	cf 91       	pop	r28
    6ca6:	df 91       	pop	r29
    6ca8:	08 95       	ret

00006caa <__mulsi3>:
    6caa:	62 9f       	mul	r22, r18
    6cac:	d0 01       	movw	r26, r0
    6cae:	73 9f       	mul	r23, r19
    6cb0:	f0 01       	movw	r30, r0
    6cb2:	82 9f       	mul	r24, r18
    6cb4:	e0 0d       	add	r30, r0
    6cb6:	f1 1d       	adc	r31, r1
    6cb8:	64 9f       	mul	r22, r20
    6cba:	e0 0d       	add	r30, r0
    6cbc:	f1 1d       	adc	r31, r1
    6cbe:	92 9f       	mul	r25, r18
    6cc0:	f0 0d       	add	r31, r0
    6cc2:	83 9f       	mul	r24, r19
    6cc4:	f0 0d       	add	r31, r0
    6cc6:	74 9f       	mul	r23, r20
    6cc8:	f0 0d       	add	r31, r0
    6cca:	65 9f       	mul	r22, r21
    6ccc:	f0 0d       	add	r31, r0
    6cce:	99 27       	eor	r25, r25
    6cd0:	72 9f       	mul	r23, r18
    6cd2:	b0 0d       	add	r27, r0
    6cd4:	e1 1d       	adc	r30, r1
    6cd6:	f9 1f       	adc	r31, r25
    6cd8:	63 9f       	mul	r22, r19
    6cda:	b0 0d       	add	r27, r0
    6cdc:	e1 1d       	adc	r30, r1
    6cde:	f9 1f       	adc	r31, r25
    6ce0:	bd 01       	movw	r22, r26
    6ce2:	cf 01       	movw	r24, r30
    6ce4:	11 24       	eor	r1, r1
    6ce6:	08 95       	ret

00006ce8 <__udivmodsi4>:
    6ce8:	a1 e2       	ldi	r26, 0x21	; 33
    6cea:	1a 2e       	mov	r1, r26
    6cec:	aa 1b       	sub	r26, r26
    6cee:	bb 1b       	sub	r27, r27
    6cf0:	fd 01       	movw	r30, r26
    6cf2:	0d c0       	rjmp	.+26     	; 0x6d0e <__udivmodsi4_ep>

00006cf4 <__udivmodsi4_loop>:
    6cf4:	aa 1f       	adc	r26, r26
    6cf6:	bb 1f       	adc	r27, r27
    6cf8:	ee 1f       	adc	r30, r30
    6cfa:	ff 1f       	adc	r31, r31
    6cfc:	a2 17       	cp	r26, r18
    6cfe:	b3 07       	cpc	r27, r19
    6d00:	e4 07       	cpc	r30, r20
    6d02:	f5 07       	cpc	r31, r21
    6d04:	20 f0       	brcs	.+8      	; 0x6d0e <__udivmodsi4_ep>
    6d06:	a2 1b       	sub	r26, r18
    6d08:	b3 0b       	sbc	r27, r19
    6d0a:	e4 0b       	sbc	r30, r20
    6d0c:	f5 0b       	sbc	r31, r21

00006d0e <__udivmodsi4_ep>:
    6d0e:	66 1f       	adc	r22, r22
    6d10:	77 1f       	adc	r23, r23
    6d12:	88 1f       	adc	r24, r24
    6d14:	99 1f       	adc	r25, r25
    6d16:	1a 94       	dec	r1
    6d18:	69 f7       	brne	.-38     	; 0x6cf4 <__udivmodsi4_loop>
    6d1a:	60 95       	com	r22
    6d1c:	70 95       	com	r23
    6d1e:	80 95       	com	r24
    6d20:	90 95       	com	r25
    6d22:	9b 01       	movw	r18, r22
    6d24:	ac 01       	movw	r20, r24
    6d26:	bd 01       	movw	r22, r26
    6d28:	cf 01       	movw	r24, r30
    6d2a:	08 95       	ret

00006d2c <__prologue_saves__>:
    6d2c:	2f 92       	push	r2
    6d2e:	3f 92       	push	r3
    6d30:	4f 92       	push	r4
    6d32:	5f 92       	push	r5
    6d34:	6f 92       	push	r6
    6d36:	7f 92       	push	r7
    6d38:	8f 92       	push	r8
    6d3a:	9f 92       	push	r9
    6d3c:	af 92       	push	r10
    6d3e:	bf 92       	push	r11
    6d40:	cf 92       	push	r12
    6d42:	df 92       	push	r13
    6d44:	ef 92       	push	r14
    6d46:	ff 92       	push	r15
    6d48:	0f 93       	push	r16
    6d4a:	1f 93       	push	r17
    6d4c:	cf 93       	push	r28
    6d4e:	df 93       	push	r29
    6d50:	cd b7       	in	r28, 0x3d	; 61
    6d52:	de b7       	in	r29, 0x3e	; 62
    6d54:	ca 1b       	sub	r28, r26
    6d56:	db 0b       	sbc	r29, r27
    6d58:	0f b6       	in	r0, 0x3f	; 63
    6d5a:	f8 94       	cli
    6d5c:	de bf       	out	0x3e, r29	; 62
    6d5e:	0f be       	out	0x3f, r0	; 63
    6d60:	cd bf       	out	0x3d, r28	; 61
    6d62:	09 94       	ijmp

00006d64 <__epilogue_restores__>:
    6d64:	2a 88       	ldd	r2, Y+18	; 0x12
    6d66:	39 88       	ldd	r3, Y+17	; 0x11
    6d68:	48 88       	ldd	r4, Y+16	; 0x10
    6d6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    6d6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    6d6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6d70:	8c 84       	ldd	r8, Y+12	; 0x0c
    6d72:	9b 84       	ldd	r9, Y+11	; 0x0b
    6d74:	aa 84       	ldd	r10, Y+10	; 0x0a
    6d76:	b9 84       	ldd	r11, Y+9	; 0x09
    6d78:	c8 84       	ldd	r12, Y+8	; 0x08
    6d7a:	df 80       	ldd	r13, Y+7	; 0x07
    6d7c:	ee 80       	ldd	r14, Y+6	; 0x06
    6d7e:	fd 80       	ldd	r15, Y+5	; 0x05
    6d80:	0c 81       	ldd	r16, Y+4	; 0x04
    6d82:	1b 81       	ldd	r17, Y+3	; 0x03
    6d84:	aa 81       	ldd	r26, Y+2	; 0x02
    6d86:	b9 81       	ldd	r27, Y+1	; 0x01
    6d88:	ce 0f       	add	r28, r30
    6d8a:	d1 1d       	adc	r29, r1
    6d8c:	0f b6       	in	r0, 0x3f	; 63
    6d8e:	f8 94       	cli
    6d90:	de bf       	out	0x3e, r29	; 62
    6d92:	0f be       	out	0x3f, r0	; 63
    6d94:	cd bf       	out	0x3d, r28	; 61
    6d96:	ed 01       	movw	r28, r26
    6d98:	08 95       	ret

00006d9a <_exit>:
    6d9a:	f8 94       	cli

00006d9c <__stop_program>:
    6d9c:	ff cf       	rjmp	.-2      	; 0x6d9c <__stop_program>
